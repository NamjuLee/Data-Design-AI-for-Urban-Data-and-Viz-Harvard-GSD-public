{"version":3,"file":"static/js/4023.6948891a.chunk.js","mappings":"gTAGaA,EAAQ,0CAEjB,WAAYC,GAAY,IAAD,EA8BhB,OA9BgB,gBACnB,cAAMA,IAFVC,IAAkB,GAMb,EAAKC,MAAMC,IAAIC,QAAkB,WAGlCC,EAAAA,EAAAA,eAAcC,gGAAgEC,MAAK,SAACC,GAKhF,IAJA,IAAIC,EAAQ,EACRC,EAAS,EACTC,EAAS,EACPC,EAAOJ,EAAEK,MAAM,eACZC,EAAI,EAAGA,EAAIF,EAAKG,SAAUD,EAAG,CAClC,IAAME,EAASJ,EAAKE,GAAGD,MAAM,KACvBI,GAAOD,EAAO,GACdE,GAAOF,EAAO,GACfG,MAAMF,IAASE,MAAMD,KACtBE,QAAQC,IAAIJ,EAAKC,GAEjB,EAAKjB,IAAIqB,KAAK,CAACL,EAAKC,IACpBT,IACAC,GAAUQ,EACVP,GAAUM,EAElB,CAEA,EAAKM,OAAOZ,EAASF,EAAOC,EAASD,GACrC,EAAKe,KAAK,IACV,EAAKC,OACT,IAAG,CAEP,CAYC,OAZA,8BACD,SAAcC,GAIV,IAAK,IAAIZ,EAAI,EAAGA,EAAIa,KAAK1B,IAAIc,SAAUD,EAAG,CACtC,IAAMc,EAAYD,KAAKE,SAASF,KAAK1B,IAAIa,GAAG,GAAIa,KAAK1B,IAAIa,GAAG,IAC5DgB,EAAYJ,EAAKE,EAAU,GAAIA,EAAU,GAAID,KAAKI,KAAO,EAAG,yBAChE,CAIJ,KAAC,EA9CgB,CAASC,EAAAA,eAgDxBF,EAAc,SAACJ,EAA+BO,EAAWC,EAAWC,EAAWC,GACjFV,EAAIW,UAAYD,EAChBV,EAAIY,YACJZ,EAAIa,IAAIN,EAAGC,EAA6B,GAAzBM,KAAKC,IAAQ,GAAJN,GAAW,GAAQ,EAAa,EAAVK,KAAKE,IACnDhB,EAAIiB,YACJjB,EAAIkB,MACR,C","sources":["PART_10_Web_Visualization_Digital_Mapping_Analysis/08_CSV/index.ts"],"sourcesContent":["import { RendererJSAPI } from '../../lib'\r\nimport { getCSVFromURL } from 'njscore';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n    pts: number[][] = [];\r\n    constructor(view: any) {\r\n        super(view);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        (this.mView.map.basemap as any) = 'streets';\r\n\r\n        // https://data.boston.gov/dataset/blue-bike-stations\r\n        getCSVFromURL(process.env.PUBLIC_URL + '/static/data/Blue_Bike_Stations.csv').then((d) => {\r\n            let count = 0;\r\n            let latSum = 0;\r\n            let lonSum = 0;\r\n            const line = d.split(/\\r\\n|\\r|\\n/g);\r\n            for (let i = 1; i < line.length; ++i) {\r\n                const values = line[i].split(',');\r\n                const lon = +values[5];\r\n                const lat = +values[4];\r\n                if (!isNaN(lon) && !isNaN(lat)) {\r\n                    console.log(lon, lat);\r\n                    \r\n                    this.pts.push([lon, lat]);\r\n                    count++;\r\n                    latSum += lat;\r\n                    lonSum += lon;\r\n                }\r\n            }\r\n            // console.log(count)\r\n            this.center(lonSum / count, latSum / count);\r\n            this.zoom(11);\r\n            this.start();\r\n        });\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n        for (let i = 0; i < this.pts.length; ++i) { \r\n            const projected = this.toScreen(this.pts[i][0], this.pts[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time + 3, 'rgba(10, 8, 255, 0.85)' );\r\n        }\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n}\r\nconst renderPoint = (ctx: CanvasRenderingContext2D, x: number, y: number, t: number, color: string) => {\r\n    ctx.fillStyle = color;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, (Math.sin(t * 0.8) + 4) * 2, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n};\r\n"],"names":["Solution","view","pts","mView","map","basemap","getCSVFromURL","process","then","d","count","latSum","lonSum","line","split","i","length","values","lon","lat","isNaN","console","log","push","center","zoom","start","ctx","this","projected","toScreen","renderPoint","time","RendererJSAPI","x","y","t","color","fillStyle","beginPath","arc","Math","sin","PI","closePath","fill"],"sourceRoot":""}