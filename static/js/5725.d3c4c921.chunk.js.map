{"version":3,"file":"static/js/5725.d3c4c921.chunk.js","mappings":"iTAGaA,EAAQ,0CAQjB,WAAYC,GAAY,IAAD,EAuBN,OAvBM,gBACnB,cAAMA,IAPVC,IAAkB,GAAG,EAErBC,OAAqB,GAAG,EACxBC,QAAsB,GAAG,EACzBC,OAAqB,IAKjBC,EAAAA,EAAAA,gBAAe,mGAAmGC,MAAK,SAACC,GACpH,IAAK,IAAIC,EAAI,EAAIA,EAAID,EAAW,QAAEE,SAAUD,EAEV,eAA1BD,EAAW,QAAEC,GAAO,GACtBD,EAAW,QAAEC,GAAGE,KAAKC,SAAS,SAACC,GACzB,EAAKV,OAAOW,KAAK,CAACD,EAAS,IAAGA,EAAS,KAC7C,IACmC,eAA1BL,EAAW,QAAEC,GAAO,GAC3BD,EAAW,QAAEC,GAAGE,KAAKC,SAAS,SAACC,GACzB,EAAKT,QAAQU,KAAK,CAACD,EAAS,IAAGA,EAAS,KAC9C,IACiC,YAA1BL,EAAW,QAAEC,GAAO,IAC3BD,EAAW,QAAEC,GAAGE,KAAKC,SAAS,SAACC,GACzB,EAAKR,OAAOS,KAAK,CAACD,EAAS,IAAGA,EAAS,KAC7C,GAIZ,IAEA,EAAKE,QAAQ,CACjB,CAoCC,OApCA,8BACD,SAAOC,GACHA,EAAIC,yBAA2B,SAC/B,IAAK,IAAIR,EAAI,EAAGA,EAAIS,KAAKf,OAAOO,SAAUD,EAAG,CACzC,IAAMU,EAAYD,KAAKE,SAASF,KAAKf,OAAOM,GAAG,GAAIS,KAAKf,OAAOM,GAAG,IAClEY,EAAYL,EAAKG,EAAU,GAAIA,EAAU,GAAID,KAAKI,KAAM,uBAC5D,CACA,IAAK,IAAIb,EAAI,EAAGA,EAAIS,KAAKd,QAAQM,SAAUD,EAAG,CAC1C,IAAMU,EAAYD,KAAKE,SAASF,KAAKd,QAAQK,GAAG,GAAIS,KAAKd,QAAQK,GAAG,IACpEY,EAAYL,EAAKG,EAAU,GAAIA,EAAU,GAAID,KAAKI,KAAO,EAAG,uBAChE,CACA,IAAK,IAAIb,EAAI,EAAGA,EAAIS,KAAKb,OAAOK,SAAUD,EAAG,CACzC,IAAMU,EAAYD,KAAKE,SAASF,KAAKb,OAAOI,GAAG,GAAIS,KAAKb,OAAOI,GAAG,IAClEY,EAAYL,EAAKG,EAAU,GAAIA,EAAU,GAAID,KAAKI,KAAO,EAAG,uBAChE,CACA,IAAK,IAAIb,EAAI,EAAGA,EAAIS,KAAKhB,IAAIQ,SAAUD,EAAG,CACtC,IAAMU,EAAYD,KAAKE,SAASF,KAAKhB,IAAIO,GAAG,GAAIS,KAAKhB,IAAIO,GAAG,IAC5DY,EAAYL,EAAKG,EAAU,GAAIA,EAAU,GAAID,KAAKI,KAAO,EAAG,2BAChE,CAEJ,GAAC,qBACD,SAAQC,GACJ,GACH,uBACD,SAAUC,EAAWC,GACjB,GACH,qBACD,SAAQD,EAAWC,GACf,GACH,wBACD,SAAWD,EAAWC,GAClB,IAAMC,EAAeR,KAAKS,MAAMH,EAAGC,GACnCP,KAAKhB,IAAIY,KAAKY,EAClB,GAAC,uBACD,SAAUF,EAAWC,GAErB,KAAC,EApEgB,CAASG,EAAAA,eAuExBP,EAAc,SAACL,EAA+BQ,EAAWC,EAAWI,EAAWC,GACjFd,EAAIe,UAAYD,EAChBd,EAAIgB,YACJhB,EAAIiB,IAAIT,EAAGC,EAA6B,GAAzBS,KAAKC,IAAQ,GAAJN,GAAW,GAAQ,EAAa,EAAVK,KAAKE,IACnDpB,EAAIqB,YACJrB,EAAIsB,MACR,C","sources":["PART_08_Third_Place_Prediction_Implementation/Project_01_Third_Place/index.ts"],"sourcesContent":["import { RendererJSAPI } from '../../lib'\r\nimport { getJSONFromURL } from 'njscore';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    pts: number[][] = [];\r\n\r\n    ptsUni: number[][] = [];\r\n    ptsBook: number[][] = [];\r\n    ptsLib: number[][] = [];\r\n\r\n    constructor(view: any) {\r\n        super(view);\r\n\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Boston/thrid-place/ThridPlaceBoston.json').then((d) => {\r\n            for (let i = 0 ; i < d['dataset'].length; ++i) {\r\n                // console.log(d['dataset'][i]['id'])\r\n                if (d['dataset'][i]['id'] === 'university') {\r\n                  d['dataset'][i].data.forEach( (pos: any) => {\r\n                        this.ptsUni.push([pos['lon'], pos['lat']]);\r\n                  });\r\n                } else if (d['dataset'][i]['id'] === 'book_store') {\r\n                    d['dataset'][i].data.forEach( (pos: any) => {\r\n                          this.ptsBook.push([pos['lon'], pos['lat']]);\r\n                    });\r\n                } else if (d['dataset'][i]['id'] === 'library') {\r\n                    d['dataset'][i].data.forEach( (pos: any) => {\r\n                          this.ptsLib.push([pos['lon'], pos['lat']]);\r\n                    });\r\n                } \r\n\r\n            }\r\n        });\r\n        \r\n        this.start();\r\n    }\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.globalCompositeOperation = 'screen' ; //'lighten';\r\n        for (let i = 0; i < this.ptsUni.length; ++i) { \r\n            const projected = this.toScreen(this.ptsUni[i][0], this.ptsUni[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time, 'rgba(0, 255, 0, 0.6)' );\r\n        }\r\n        for (let i = 0; i < this.ptsBook.length; ++i) { \r\n            const projected = this.toScreen(this.ptsBook[i][0], this.ptsBook[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time + 1, 'rgba(0, 0, 255, 0.6)' );\r\n        }\r\n        for (let i = 0; i < this.ptsLib.length; ++i) { \r\n            const projected = this.toScreen(this.ptsLib[i][0], this.ptsLib[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time + 2, 'rgba(255, 0, 0, 0.6)' );\r\n        }\r\n        for (let i = 0; i < this.pts.length; ++i) { \r\n            const projected = this.toScreen(this.pts[i][0], this.pts[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time + 3, 'rgba(255, 255, 255, 0.6)' );\r\n        }\r\n\r\n    }\r\n    keyDown(k: KeyboardEvent): void {\r\n        // console.log('key pressed', k);\r\n    }\r\n    mouseDown(x: number, y: number): void {\r\n        // console.log('mouse down')\r\n    }\r\n    mouseUp(x: number, y: number): void {\r\n        // console.log('mouse up')\r\n    }\r\n    mouseClick(x: number, y: number): void {\r\n        const mapProjected = this.toMap(x, y);\r\n        this.pts.push(mapProjected);\r\n    }\r\n    mouseMove(x: number, y: number) {\r\n\r\n    }\r\n}\r\n\r\nconst renderPoint = (ctx: CanvasRenderingContext2D, x: number, y: number, t: number, color: string) => {\r\n    ctx.fillStyle = color;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, (Math.sin(t * 0.8) + 4) * 2, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n}\r\n"],"names":["Solution","view","pts","ptsUni","ptsBook","ptsLib","getJSONFromURL","then","d","i","length","data","forEach","pos","push","start","ctx","globalCompositeOperation","this","projected","toScreen","renderPoint","time","k","x","y","mapProjected","toMap","RendererJSAPI","t","color","fillStyle","beginPath","arc","Math","sin","PI","closePath","fill"],"sourceRoot":""}