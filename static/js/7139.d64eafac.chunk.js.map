{"version":3,"file":"static/js/7139.d64eafac.chunk.js","mappings":"iTAGaA,EAAQ,0CAUjB,WAAYC,GAAY,IAAD,mBACnB,cAAMA,IATVC,KAAY,GAAG,EAGfC,QAAUC,mCAA8C,EAGxDC,aAA2B,GAIvBC,QAAQC,IAAI,eAAeH,oCAI3B,EAAKI,KAAK,GACV,EAAKC,OAAO,WAAY,SAKxB,IAHA,IAGSC,GAHI,GAGKA,EAFN,KAEiBA,EACzB,EAAKL,aAAaM,MAAKC,EAAAA,EAAAA,mBAAkBF,IAI7C,IACMG,EAAK,2DADM,QACyD,kBAAU,EAAKV,QAAO,iBAQnF,OANbW,EAAAA,EAAAA,gBAAeD,GAAOE,MAAK,SAACC,GACxBV,QAAQC,IAAIS,GACZ,EAAKd,KAAKS,KAAKK,EACnB,IAGA,EAAKC,QAAQ,CACjB,CAgCC,OAhCA,8BACD,SAAcC,GAIV,IAAK,IAAIR,EAAI,EAAIA,EAAIS,KAAKjB,KAAKkB,SAAUV,EAAI,CACzC,IAAMW,EAAQF,KAAKjB,KAAKQ,GAElBY,EAAYH,KAAKI,SAASF,EAAa,MAAO,IAAGA,EAAa,MAAO,KAErEG,EAAOH,EAAY,KAAQ,KAC3BI,GAAYb,EAAAA,EAAAA,mBAAkBY,GAC9BE,EAAe,cAAUD,EAAU,GAAE,aAAKA,EAAU,GAAE,aAAKA,EAAU,GAAE,KAE7EE,EAAYT,EAAKI,EAAU,GAAIA,EAAU,GAAIH,KAAKS,KAAMF,GACxDG,EAAWX,EAAKI,EAAU,GAAK,GAAIA,EAAU,GAAGE,EAAM,OAC1D,CAEAM,EAAkBZ,EAAKC,KAAKd,aAIhC,GAAC,wBACD,SAAkB0B,EAAWC,GAAkB,IAAD,OACpCC,EAASd,KAAKe,MAAMH,EAAGC,GAGvBnB,EAAK,8DAA0DoB,EAAO,GAAE,gBAAQA,EAAO,GAAE,kBAAUd,KAAKhB,QAAO,kBACrHW,EAAAA,EAAAA,gBAAeD,GAAOE,MAAK,SAACC,GACxBV,QAAQC,IAAIS,GACZ,EAAKd,KAAKS,KAAKK,EACnB,GACJ,KAAC,EArEgB,CAASmB,EAAAA,eAwExBR,EAAc,SAACT,EAA+Ba,EAAWC,EAAWI,EAAWC,GACjFnB,EAAIoB,UAAYD,EAChBnB,EAAIqB,YACJrB,EAAIsB,IAAIT,EAAGC,EAA6B,GAAzBS,KAAKC,IAAQ,GAAJN,GAAW,GAAQ,EAAa,EAAVK,KAAKE,IACnDzB,EAAI0B,YACJ1B,EAAI2B,MACR,EACMhB,EAAa,SAACX,EAA+Ba,EAAWC,EAAWc,EAAcT,GACnFnB,EAAI6B,YAAcV,EAClBnB,EAAI8B,KAAO,aACX9B,EAAI+B,WAAWH,EAAMf,EAAGC,EAC5B,EACMF,EAAoB,SAACZ,EAA+BgC,GAMtD,IAJA,IACMC,EAAOjC,EAAIkC,OAAOC,OAAS,IAGxB3C,EAAI,EAAIA,EAAIwC,EAAW9B,SAAUV,EACtCQ,EAAIqB,YACJrB,EAAIoC,KAJE,EAIG5C,EANA,IAMcyC,EAJjB,EACA,IAINjC,EAAI0B,YACJ1B,EAAIoB,UAAS,eAAWY,EAAWxC,GAAG,GAAE,aAAKwC,EAAWxC,GAAG,GAAE,aAAKwC,EAAWxC,GAAG,GAAE,QAClFQ,EAAI2B,MAGZ,C","sources":["PART_10_Web_Visualization_Digital_Mapping_Analysis/05_REST_API/index.ts"],"sourcesContent":["import { RendererJSAPI } from '../../lib'\r\nimport { getJSONFromURL, getColorByCelsius } from 'njscore';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    data: any = [];\r\n    \r\n    // https://openweathermap.org/api\r\n    API_KEY = process.env.REACT_APP_OPEN_WATHER_MAP_API_KEY; // <== you need to overwrite your API KEY !!!\r\n\r\n    \r\n    colorsLegend: number[][] = [];\r\n    \r\n    constructor(view: any) {\r\n        super(view);\r\n        console.log('your key is ',process.env.REACT_APP_OPEN_WATHER_MAP_API_KEY);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.zoom(2);\r\n        this.center(127.024612, 37.532600)\r\n\r\n        const min = -45\r\n        const max = 45\r\n    \r\n        for (let i = min; i < max; ++i ) {\r\n            this.colorsLegend.push(getColorByCelsius(i))\r\n        }\r\n\r\n        // https://openweathermap.org/api\r\n        const CityName = \"Seoul\";\r\n        const query = `http://api.openweathermap.org/data/2.5/weather?q=${CityName}&appid=${this.API_KEY}&units=metric`;\r\n\r\n        getJSONFromURL(query).then((d) => {\r\n            console.log(d)\r\n            this.data.push(d)\r\n        });\r\n\r\n        // !! you should execute it for rendering\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n        for (let i = 0 ; i < this.data.length; ++i ) {\r\n            const place = this.data[i];\r\n\r\n            const screenPos = this.toScreen(place['coord']['lon'], place['coord']['lat']);\r\n\r\n            const temp = place['main']['temp'];\r\n            const tempColor = getColorByCelsius(temp);\r\n            const tempColorString = `rgb(${tempColor[0]}, ${tempColor[1]}, ${tempColor[2]})`;\r\n\r\n            renderPoint(ctx, screenPos[0], screenPos[1], this.time, tempColorString);\r\n            renderText(ctx, screenPos[0] + 15, screenPos[1],temp, '#fff');\r\n        }\r\n\r\n        renderColorLegend(ctx, this.colorsLegend);\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n        const mapPos = this.toMap(x, y);\r\n\r\n        // https://openweathermap.org/current\r\n        const query = `https://api.openweathermap.org/data/2.5/weather?lat=${mapPos[1]}&lon=${mapPos[0]}&appid=${this.API_KEY}&units=metric`\r\n        getJSONFromURL(query).then((d) => {\r\n            console.log(d)\r\n            this.data.push(d)\r\n        });\r\n    }\r\n}\r\n\r\nconst renderPoint = (ctx: CanvasRenderingContext2D, x: number, y: number, t: number, color: string) => {\r\n    ctx.fillStyle = color;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, (Math.sin(t * 0.8) + 4) * 3, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n};\r\nconst renderText = (ctx: CanvasRenderingContext2D, x: number, y: number, name: string, color: string) => {\r\n    ctx.strokeStyle = color;\r\n    ctx.font = '15px Arial';\r\n    ctx.strokeText(name, x, y);\r\n};\r\nconst renderColorLegend = (ctx: CanvasRenderingContext2D, colorArray: number[][]) => {\r\n    // https://www.esri.com/arcgis-blog/products/arcgis-pro/mapping/a-meaningful-temperature-palette/\r\n    const xOff = 100;\r\n    const yOff = ctx.canvas.height - 100;\r\n    const w = 5;\r\n    const h = 20;\r\n    for (let i = 0 ; i < colorArray.length; ++i) {\r\n        ctx.beginPath();\r\n        ctx.rect(i * w + xOff, yOff, w, h)\r\n        ctx.closePath();\r\n        ctx.fillStyle = `rgba(${colorArray[i][0]}, ${colorArray[i][1]}, ${colorArray[i][2]}, 1)`;\r\n        ctx.fill();\r\n    }\r\n\r\n};"],"names":["Solution","view","data","API_KEY","process","colorsLegend","console","log","zoom","center","i","push","getColorByCelsius","query","getJSONFromURL","then","d","start","ctx","this","length","place","screenPos","toScreen","temp","tempColor","tempColorString","renderPoint","time","renderText","renderColorLegend","x","y","mapPos","toMap","RendererJSAPI","t","color","fillStyle","beginPath","arc","Math","sin","PI","closePath","fill","name","strokeStyle","font","strokeText","colorArray","yOff","canvas","height","rect"],"sourceRoot":""}