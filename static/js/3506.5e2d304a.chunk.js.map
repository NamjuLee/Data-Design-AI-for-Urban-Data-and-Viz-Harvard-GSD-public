{"version":3,"file":"static/js/3506.5e2d304a.chunk.js","mappings":"qQAGaA,G,kBAAQ,WAIjB,WAAYC,IAAa,eAErBC,QAAQC,IAAI,wBACZD,QAAQC,IAAI,kCAUZD,QAAQC,IAAI,mBAChB,CAfC,OAeA,+BAjBD,WAEA,KAAC,EAHgB,G","sources":["PART_06_Problem_Data_Model_Train_Validation/LAB_Web_01_Tensor/index.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\nimport '@tensorflow/tfjs-backend-webgl';\r\n\r\nexport class Solution {\r\n    public destroy() {\r\n        \r\n    }\r\n    constructor(id: string) {\r\n    //  https://js.tensorflow.org/api/latest/\r\n        console.log(\"Let's learn TF JS !!\");\r\n        console.log(\"==============================\");\r\n\r\n        // ExeScalar();\r\n        // ExeAdd();\r\n        // ExeOperation();\r\n        // Tensor01();\r\n        // Tensor02();\r\n        // Tensor03();\r\n        // linearRegression();\r\n\r\n        console.log('Playground done!');\r\n    }\r\n};\r\n\r\nconst ExeScalar = () => {\r\n    // const d = tf.scalar(10);\r\n    // console.log('scalar.....');\r\n    // console.log(d);\r\n    // d.print();\r\n    // d.print(true);\r\n\r\n    // const d2 = tf.tensor([1, 2, 3]);\r\n    // d2.print();\r\n    // d2.print(true);\r\n\r\n    // const d3 = tf.tensor1d([1, 2, 3]);\r\n    // d3.print();\r\n    // d3.print(true);\r\n\r\n    // const d4 = tf.tensor([[1, 2], [3, 4]]);\r\n    // d4.print();\r\n    // //    d4.print(true);\r\n\r\n    // const d5 = tf.tensor2d([[1, 2], [3, 4]]);\r\n    // d5.print();\r\n    // //    d5.print(true);\r\n    // //    d4.add(d5).print();\r\n    // const d6 = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\r\n    // d6.print();\r\n\r\n    // const length = 30;\r\n    // const data = new Float32Array(length);\r\n    // for (let i = 0; i < length; ++i) { data[i] = i; }\r\n    // const d7 = tf.tensor2d(data, [10, 3]);\r\n    // d7.print();\r\n\r\n    // const length2 = 18;\r\n    // const data2 = new Float32Array(length2);\r\n    // for (let i = 0; i < length2; ++i) { data2[i] = i; }\r\n    // const d8 = tf.tensor3d(data2, [2, 3, 3]);\r\n    // d8.print();\r\n};\r\nconst ExeAdd = () => {\r\n    // const d1 = tf.scalar(5);\r\n    // const d2 = tf.tensor([1, 2, 3]).mul(d1);\r\n    // d2.print();\r\n\r\n    // const d3 = tf.tensor([1, 2, 3, 4, 5, 6], [2, 3]);\r\n    // d3.print();\r\n    // d3.mul(d1).print();\r\n    // d3.add(d1).print();\r\n    // d3.div(3).print();\r\n\r\n    // // ..\r\n    // const length = 30;\r\n    // const data = new Float32Array(length);\r\n    // for (let i = 0; i < length; ++i) { data[i] = i; }\r\n    // const d4 = tf.tensor2d(data, [10, 3]);\r\n    // d4.print();\r\n\r\n    // const d5 = d4;\r\n    // d5.print();\r\n\r\n    // const d6 = d5.add(d4);\r\n    // d6.print();\r\n\r\n    // const d7 = d5.sub(d1);\r\n    // d7.print();\r\n\r\n};\r\nconst ExeOperation = () => {\r\n\r\n    tf.tidy(() => {\r\n        // const d1 = tf.tensor([1, 2, 3, 4, 5, 6], [2, 3], 'float32');\r\n        // d1.print();\r\n\r\n        // const d2 = tf.tensor([1, 2, 3, 4, 5, 6], [3, 2], 'float32');\r\n        // d2.print();\r\n\r\n        // d1.matMul(d2).print();\r\n\r\n        // const d3 = d2.matMul(d1);\r\n        // d3.print();\r\n\r\n        // const d4 = tf.scalar(0.5);\r\n        // d3.mul(d4).print();\r\n\r\n        // const mathScore = tf.tensor1d([80, 90, 100, 80]);\r\n        // const historyScore = tf.tensor1d([70, 70, 70, 70]);\r\n        // mathScore.add(historyScore).div(2).print(); // print mean  // tensor num 10\r\n        // mathScore.add(historyScore).div(2).abs().print(); // print mean  // tensor num 11\r\n\r\n    });\r\n    //\r\n    console.log(tf.memory().numTensors);\r\n\r\n};\r\nconst Tensor01 = () => {\r\n    // let data = tf.tensor([0, 1, 2, 3], [2, 2]);\r\n    // data.print();\r\n    // // [[0, 1],\r\n    // // [2, 3]]\r\n\r\n    // data = tf.tensor([0, 1, 2, 3, 4, 5, 6, 7]);\r\n    // data.print(); // [0, 1, 2, 3, 4, 5, 6, 7]\r\n\r\n    // data = tf.tensor([0, 1, 2, 3, 4, 5, 6, 7], [2, 2, 2]);\r\n    // data.print();\r\n    // //     [[[0, 1],\r\n    // //     [2, 3]],\r\n    // //    [[4, 5],\r\n    // //     [6, 7]]]\r\n};\r\nconst Tensor02 = () => {\r\n    // let data: number[] = [];\r\n    // for (let i = 0; i < 15; ++i) {\r\n    //     data.push(Math.random());\r\n    // }\r\n    // let shape = [3, 5];\r\n    // let dataTensor = tf.tensor(data, shape);\r\n    // dataTensor.print();\r\n\r\n    // data = [];\r\n    // for (let i = 0; i < 30; ++i) {\r\n    //     data.push(Math.random() * 100);\r\n    // }\r\n    // shape = [2, 3, 5];\r\n    // dataTensor = tf.tensor(data, shape, 'int32');\r\n    // dataTensor.print();\r\n\r\n    // dataTensor = tf.tensor3d(data, [2, 3, 5], 'int32');\r\n    // dataTensor.print();\r\n};\r\nconst Tensor03 = () => {\r\n    // let data: number[] = [];\r\n    // for (let i = 0; i < 150000; ++i) {\r\n    //     data.push(Math.random());\r\n    // }\r\n    // let shape = [300, 500];\r\n    // let dataTensor = tf.tensor(data, shape);\r\n    // dataTensor.print();\r\n    // console.log(tf.memory().numTensors);\r\n};\r\n\r\nconst linearRegression = () => {\r\n    // Define a model for linear regression.\r\n    const model = tf.sequential();\r\n    model.add(tf.layers.dense({units: 1, inputShape: [1]}));\r\n\r\n    // Prepare the model for training: Specify the loss and the optimizer.\r\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\r\n\r\n    // Generate some synthetic data for training.\r\n    const x_train = tf.tensor2d([1, 2, 3, 4], [4, 1]);\r\n    const y_train = tf.tensor2d([1, 3, 5, 7], [4, 1]);\r\n\r\n    x_train.print();\r\n    y_train.print();\r\n\r\n    const x_val = tf.tensor2d([3], [1, 1])\r\n\r\n    // Train the model using the data.\r\n    model.fit(x_train, y_train, { epochs: 100 }).then(() => {\r\n        // Use the model to do inference on a data point the model hasn't seen before:\r\n        // Open the browser devtools to see the output\r\n        (model.predict(x_val) as any).print();\r\n    });\r\n\r\n};\r\n\r\n\r\n\r\n/*\r\nReference:\r\nhttps://www.tensorflow.org/js\r\nhttps://www.tensorflow.org/js/tutorials\r\nhttps://www.tensorflow.org/js/models\r\nhttps://js.tensorflow.org/api/latest/\r\n\r\n\r\n*/"],"names":["Solution","id","console","log"],"sourceRoot":""}