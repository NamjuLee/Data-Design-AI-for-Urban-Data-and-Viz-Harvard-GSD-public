{"version":3,"file":"static/js/2838.4d7d99c2.chunk.js","mappings":"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AAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,EAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,EAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,EAAK,EAAK,IAAK,EAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,EAAK,IAAK,EAAK,EAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,EAAK,IAAK,GACvE,CAAC,EAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,EAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,EAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,EAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,EAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,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","sources":["PART_06_Problem_Data_Model_Train_Validation/LAB_Web_05_KNNIrisPrediction/index.ts"],"sourcesContent":["import { shuffleArray } from '../../lib';\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    constructor(id: string) {\r\n\r\n        this.knnEx();\r\n        // this.irisPrediction();\r\n    }\r\n    public knnEx() {\r\n        const XData = [[0, 0], [0, 1], [1, 2], [1, 3]]\r\n        const yData = [0,       0,      1,      1]\r\n\r\n        const val = [[0, 0]]\r\n\r\n        const knn = new KNN(XData, yData);\r\n        const result = knn.predict(val);\r\n        \r\n        console.log(result, KNN);\r\n    }\r\n    public irisPrediction(){\r\n        const data =  getIrisData();\r\n\r\n        shuffleArray(data);\r\n\r\n        const inputs = [];\r\n        const labels = [];\r\n        for (let i = 0; i < data.length; ++i) {\r\n            let row = [];\r\n            for (let j = 0; j < data[i].length - 1; ++j) {\r\n                row.push(data[i][j]);\r\n            }\r\n            inputs.push(row);\r\n            labels.push(data[i][data[i].length -1])\r\n        }\r\n\r\n        console.log('Iris data');\r\n        console.log(inputs)\r\n\r\n        const numTraining = 0.6;\r\n\r\n        const train_inputs_data = inputs.splice(0, Math.floor(inputs.length * numTraining));\r\n        const train_labels_data = labels.splice(0, Math.floor(labels.length * numTraining));\r\n\r\n        const val_inputs_data = inputs;\r\n        const val_labels_data = labels;\r\n\r\n        console.log('train data inputs');\r\n        console.log(train_inputs_data);\r\n        console.log('train data labels');\r\n        console.log(train_labels_data);\r\n\r\n        console.log('validation data inputs');\r\n        console.log(val_inputs_data);\r\n        console.log('validation data labels');\r\n        console.log(val_labels_data);\r\n\r\n        const knn = new KNN(train_inputs_data, train_labels_data);\r\n        const result = knn.predict(val_inputs_data);\r\n        \r\n        console.log('Prediction :', result);\r\n        console.log('Ground truth ',val_labels_data);\r\n\r\n        let failure = [];\r\n        for(let i = 0 ; i < val_labels_data.length; ++i) {\r\n            if (val_labels_data[i] !== result[i]) {\r\n                failure.push(i);\r\n            }\r\n        }\r\n        console.log( String((100 - ( failure.length / val_labels_data.length * 100)).toFixed(2)) + '% accuracy');\r\n        console.log('index:', failure);\r\n\r\n    }\r\n    public destroy() {\r\n        try {\r\n            while (this.divHost !== undefined && this.divHost.lastElementChild !== undefined) {\r\n                this.divHost.removeChild(this.divHost.lastElementChild);\r\n            }\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst getIrisData = () => {\r\n    return [\r\n        [5.1, 3.5, 1.4, 0.2, 0], [4.9, 3.0, 1.4, 0.2, 0], [4.7, 3.2, 1.3, 0.2, 0],\r\n        [4.6, 3.1, 1.5, 0.2, 0], [5.0, 3.6, 1.4, 0.2, 0], [5.4, 3.9, 1.7, 0.4, 0],\r\n        [4.6, 3.4, 1.4, 0.3, 0], [5.0, 3.4, 1.5, 0.2, 0], [4.4, 2.9, 1.4, 0.2, 0],\r\n        [4.9, 3.1, 1.5, 0.1, 0], [5.4, 3.7, 1.5, 0.2, 0], [4.8, 3.4, 1.6, 0.2, 0],\r\n        [4.8, 3.0, 1.4, 0.1, 0], [4.3, 3.0, 1.1, 0.1, 0], [5.8, 4.0, 1.2, 0.2, 0],\r\n        [5.7, 4.4, 1.5, 0.4, 0], [5.4, 3.9, 1.3, 0.4, 0], [5.1, 3.5, 1.4, 0.3, 0],\r\n        [5.7, 3.8, 1.7, 0.3, 0], [5.1, 3.8, 1.5, 0.3, 0], [5.4, 3.4, 1.7, 0.2, 0],\r\n        [5.1, 3.7, 1.5, 0.4, 0], [4.6, 3.6, 1.0, 0.2, 0], [5.1, 3.3, 1.7, 0.5, 0],\r\n        [4.8, 3.4, 1.9, 0.2, 0], [5.0, 3.0, 1.6, 0.2, 0], [5.0, 3.4, 1.6, 0.4, 0],\r\n        [5.2, 3.5, 1.5, 0.2, 0], [5.2, 3.4, 1.4, 0.2, 0], [4.7, 3.2, 1.6, 0.2, 0],\r\n        [4.8, 3.1, 1.6, 0.2, 0], [5.4, 3.4, 1.5, 0.4, 0], [5.2, 4.1, 1.5, 0.1, 0],\r\n        [5.5, 4.2, 1.4, 0.2, 0], [4.9, 3.1, 1.5, 0.1, 0], [5.0, 3.2, 1.2, 0.2, 0],\r\n        [5.5, 3.5, 1.3, 0.2, 0], [4.9, 3.1, 1.5, 0.1, 0], [4.4, 3.0, 1.3, 0.2, 0],\r\n        [5.1, 3.4, 1.5, 0.2, 0], [5.0, 3.5, 1.3, 0.3, 0], [4.5, 2.3, 1.3, 0.3, 0],\r\n        [4.4, 3.2, 1.3, 0.2, 0], [5.0, 3.5, 1.6, 0.6, 0], [5.1, 3.8, 1.9, 0.4, 0],\r\n        [4.8, 3.0, 1.4, 0.3, 0], [5.1, 3.8, 1.6, 0.2, 0], [4.6, 3.2, 1.4, 0.2, 0],\r\n        [5.3, 3.7, 1.5, 0.2, 0], [5.0, 3.3, 1.4, 0.2, 0], [7.0, 3.2, 4.7, 1.4, 1],\r\n        [6.4, 3.2, 4.5, 1.5, 1], [6.9, 3.1, 4.9, 1.5, 1], [5.5, 2.3, 4.0, 1.3, 1],\r\n        [6.5, 2.8, 4.6, 1.5, 1], [5.7, 2.8, 4.5, 1.3, 1], [6.3, 3.3, 4.7, 1.6, 1],\r\n        [4.9, 2.4, 3.3, 1.0, 1], [6.6, 2.9, 4.6, 1.3, 1], [5.2, 2.7, 3.9, 1.4, 1],\r\n        [5.0, 2.0, 3.5, 1.0, 1], [5.9, 3.0, 4.2, 1.5, 1], [6.0, 2.2, 4.0, 1.0, 1],\r\n        [6.1, 2.9, 4.7, 1.4, 1], [5.6, 2.9, 3.6, 1.3, 1], [6.7, 3.1, 4.4, 1.4, 1],\r\n        [5.6, 3.0, 4.5, 1.5, 1], [5.8, 2.7, 4.1, 1.0, 1], [6.2, 2.2, 4.5, 1.5, 1],\r\n        [5.6, 2.5, 3.9, 1.1, 1], [5.9, 3.2, 4.8, 1.8, 1], [6.1, 2.8, 4.0, 1.3, 1],\r\n        [6.3, 2.5, 4.9, 1.5, 1], [6.1, 2.8, 4.7, 1.2, 1], [6.4, 2.9, 4.3, 1.3, 1],\r\n        [6.6, 3.0, 4.4, 1.4, 1], [6.8, 2.8, 4.8, 1.4, 1], [6.7, 3.0, 5.0, 1.7, 1],\r\n        [6.0, 2.9, 4.5, 1.5, 1], [5.7, 2.6, 3.5, 1.0, 1], [5.5, 2.4, 3.8, 1.1, 1],\r\n        [5.5, 2.4, 3.7, 1.0, 1], [5.8, 2.7, 3.9, 1.2, 1], [6.0, 2.7, 5.1, 1.6, 1],\r\n        [5.4, 3.0, 4.5, 1.5, 1], [6.0, 3.4, 4.5, 1.6, 1], [6.7, 3.1, 4.7, 1.5, 1],\r\n        [6.3, 2.3, 4.4, 1.3, 1], [5.6, 3.0, 4.1, 1.3, 1], [5.5, 2.5, 4.0, 1.3, 1],\r\n        [5.5, 2.6, 4.4, 1.2, 1], [6.1, 3.0, 4.6, 1.4, 1], [5.8, 2.6, 4.0, 1.2, 1],\r\n        [5.0, 2.3, 3.3, 1.0, 1], [5.6, 2.7, 4.2, 1.3, 1], [5.7, 3.0, 4.2, 1.2, 1],\r\n        [5.7, 2.9, 4.2, 1.3, 1], [6.2, 2.9, 4.3, 1.3, 1], [5.1, 2.5, 3.0, 1.1, 1],\r\n        [5.7, 2.8, 4.1, 1.3, 1], [6.3, 3.3, 6.0, 2.5, 2], [5.8, 2.7, 5.1, 1.9, 2],\r\n        [7.1, 3.0, 5.9, 2.1, 2], [6.3, 2.9, 5.6, 1.8, 2], [6.5, 3.0, 5.8, 2.2, 2],\r\n        [7.6, 3.0, 6.6, 2.1, 2], [4.9, 2.5, 4.5, 1.7, 2], [7.3, 2.9, 6.3, 1.8, 2],\r\n        [6.7, 2.5, 5.8, 1.8, 2], [7.2, 3.6, 6.1, 2.5, 2], [6.5, 3.2, 5.1, 2.0, 2],\r\n        [6.4, 2.7, 5.3, 1.9, 2], [6.8, 3.0, 5.5, 2.1, 2], [5.7, 2.5, 5.0, 2.0, 2],\r\n        [5.8, 2.8, 5.1, 2.4, 2], [6.4, 3.2, 5.3, 2.3, 2], [6.5, 3.0, 5.5, 1.8, 2],\r\n        [7.7, 3.8, 6.7, 2.2, 2], [7.7, 2.6, 6.9, 2.3, 2], [6.0, 2.2, 5.0, 1.5, 2],\r\n        [6.9, 3.2, 5.7, 2.3, 2], [5.6, 2.8, 4.9, 2.0, 2], [7.7, 2.8, 6.7, 2.0, 2],\r\n        [6.3, 2.7, 4.9, 1.8, 2], [6.7, 3.3, 5.7, 2.1, 2], [7.2, 3.2, 6.0, 1.8, 2],\r\n        [6.2, 2.8, 4.8, 1.8, 2], [6.1, 3.0, 4.9, 1.8, 2], [6.4, 2.8, 5.6, 2.1, 2],\r\n        [7.2, 3.0, 5.8, 1.6, 2], [7.4, 2.8, 6.1, 1.9, 2], [7.9, 3.8, 6.4, 2.0, 2],\r\n        [6.4, 2.8, 5.6, 2.2, 2], [6.3, 2.8, 5.1, 1.5, 2], [6.1, 2.6, 5.6, 1.4, 2],\r\n        [7.7, 3.0, 6.1, 2.3, 2], [6.3, 3.4, 5.6, 2.4, 2], [6.4, 3.1, 5.5, 1.8, 2],\r\n        [6.0, 3.0, 4.8, 1.8, 2], [6.9, 3.1, 5.4, 2.1, 2], [6.7, 3.1, 5.6, 2.4, 2],\r\n        [6.9, 3.1, 5.1, 2.3, 2], [5.8, 2.7, 5.1, 1.9, 2], [6.8, 3.2, 5.9, 2.3, 2],\r\n        [6.7, 3.3, 5.7, 2.5, 2], [6.7, 3.0, 5.2, 2.3, 2], [6.3, 2.5, 5.0, 1.9, 2],\r\n        [6.5, 3.0, 5.2, 2.0, 2], [6.2, 3.4, 5.4, 2.3, 2], [5.9, 3.0, 5.1, 1.8, 2],\r\n    ];\r\n};\r\n\r\n\r\n\r\nconst squaredEuclidean = (p: number[], q: number[]) => {\r\n    let d = 0;\r\n    for (let i = 0; i < p.length; i++) {\r\n      d += (p[i] - q[i]) * (p[i] - q[i]);\r\n    }\r\n    return d;\r\n  }\r\n  \r\n  const euclidean = (p: number[], q: number[]) => {\r\n    return Math.sqrt(squaredEuclidean(p, q));\r\n  }\r\n\r\n\r\n\r\nexport class KNN {\r\n   kdTree: Tree;\r\n   k: any;\r\n   classes: any;\r\n   isEuclidean: any;\r\n  constructor(dataset, labels, options = {}) {\r\n    if (dataset === true) {\r\n      const model = labels;\r\n      this.kdTree = new Tree(model.kdTree, options);\r\n      this.k = model.k;\r\n      this.classes = new Set(model.classes);\r\n      this.isEuclidean = model.isEuclidean;\r\n      return;\r\n    }\r\n    const classes = new Set(labels);\r\n    // const { distance = euclidean, k = classes.size + 1 } = options;\r\n    const k = classes.size + 1\r\n    const distance = euclidean;\r\n\r\n    const points = new Array(dataset.length);\r\n    for (let i = 0; i < points.length; ++i) {\r\n      points[i] = dataset[i].slice();\r\n    }\r\n\r\n    for (let i = 0; i < labels.length; ++i) {\r\n      points[i].push(labels[i]);\r\n    }\r\n\r\n    this.kdTree = new Tree(points, distance);\r\n    this.k = k;\r\n    this.classes = classes;\r\n    this.isEuclidean = distance === euclidean;\r\n  }\r\n  predict(dataset) {\r\n    if (Array.isArray(dataset)) {\r\n      if (typeof dataset[0] === 'number') {\r\n        return getSinglePrediction(this, dataset);\r\n      } else if (\r\n        Array.isArray(dataset[0]) &&\r\n        typeof dataset[0][0] === 'number'\r\n      ) {\r\n        const predictions = new Array(dataset.length);\r\n        for (let i = 0; i < dataset.length; i++) {\r\n          predictions[i] = getSinglePrediction(this, dataset[i]);\r\n        }\r\n        return predictions;\r\n      }\r\n    }\r\n    throw new TypeError('dataset error');\r\n  }\r\n}\r\n\r\nconst getSinglePrediction = (modelKnn, currentCase) => {\r\n  let nearestPoints = modelKnn.kdTree.nearest(currentCase, modelKnn.k);\r\n  let pointsPerClass = {};\r\n  let predictedClass = -1;\r\n  let maxPoints = -1;\r\n  let lastElement = nearestPoints[0][0].length - 1;\r\n\r\n  for (let element of modelKnn.classes) {\r\n    pointsPerClass[element] = 0;\r\n  }\r\n\r\n  for (let i = 0; i < nearestPoints.length; ++i) {\r\n    let currentClass = nearestPoints[i][0][lastElement];\r\n    let currentPoints = ++pointsPerClass[currentClass];\r\n    if (currentPoints > maxPoints) {\r\n      predictedClass = currentClass;\r\n      maxPoints = currentPoints;\r\n    }\r\n  }\r\n\r\n  return predictedClass;\r\n}\r\nclass Node {\r\n    obj: any;\r\n    left: any;\r\n    right: any;\r\n    parent: any;\r\n    dimensions: any;\r\n    constructor(obj, dimension, parent) {\r\n      this.obj = obj;\r\n      this.left = null;\r\n      this.right = null;\r\n      this.parent = parent;\r\n      this.dimensions = dimension;\r\n    }\r\n}\r\nclass Tree {\r\n    root: any;\r\n    dimensions: any;\r\n    metric: any;\r\n    constructor(points, metric) {\r\n      // If points is not an array, assume we're loading a pre-built tree\r\n      if (!Array.isArray(points)) {\r\n        this.dimensions = points.dimensions;\r\n        this.root = points;\r\n        restoreParent(this.root);\r\n      } else {\r\n        this.dimensions = new Array(points[0].length);\r\n        for (let i = 0; i < this.dimensions.length; i++) {\r\n          this.dimensions[i] = i;\r\n        }\r\n        this.root = buildTree(points, 0, null, this.dimensions);\r\n      }\r\n      this.metric = metric;\r\n    }\r\n    private nearest(point, maxNodes, maxDistance) {\r\n      const metric = this.metric;\r\n      const dimensions = this.dimensions;\r\n      let i;\r\n  \r\n      const bestNodes = new BinaryHeap((e) => -e[1]);\r\n  \r\n      function nearestSearch(node) {\r\n        const dimension = dimensions[node.dimension];\r\n        const ownDistance = metric(point, node.obj);\r\n        const linearPoint = {};\r\n        let bestChild, linearDistance, otherChild, i;\r\n  \r\n        function saveNode(node, distance) {\r\n          bestNodes.push([node, distance]);\r\n          if (bestNodes.size() > maxNodes) {\r\n            bestNodes.pop();\r\n          }\r\n        }\r\n  \r\n        for (i = 0; i < dimensions.length; i += 1) {\r\n          if (i === node.dimension) {\r\n            linearPoint[dimensions[i]] = point[dimensions[i]];\r\n          } else {\r\n            linearPoint[dimensions[i]] = node.obj[dimensions[i]];\r\n          }\r\n        }\r\n  \r\n        linearDistance = metric(linearPoint, node.obj);\r\n  \r\n        if (node.right === null && node.left === null) {\r\n          if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\r\n            saveNode(node, ownDistance);\r\n          }\r\n          return;\r\n        }\r\n  \r\n        if (node.right === null) {\r\n          bestChild = node.left;\r\n        } else if (node.left === null) {\r\n          bestChild = node.right;\r\n        } else {\r\n          if (point[dimension] < node.obj[dimension]) {\r\n            bestChild = node.left;\r\n          } else {\r\n            bestChild = node.right;\r\n          }\r\n        }\r\n  \r\n        nearestSearch(bestChild);\r\n  \r\n        if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\r\n          saveNode(node, ownDistance);\r\n        }\r\n  \r\n        if (\r\n          bestNodes.size() < maxNodes ||\r\n          Math.abs(linearDistance) < bestNodes.peek()[1]\r\n        ) {\r\n          if (bestChild === node.left) {\r\n            otherChild = node.right;\r\n          } else {\r\n            otherChild = node.left;\r\n          }\r\n          if (otherChild !== null) {\r\n            nearestSearch(otherChild);\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (maxDistance) {\r\n        for (i = 0; i < maxNodes; i += 1) {\r\n          bestNodes.push([null, maxDistance]);\r\n        }\r\n      }\r\n  \r\n      if (this.root) {\r\n        nearestSearch(this.root);\r\n      }\r\n  \r\n      const result = [];\r\n      for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\r\n        if (bestNodes.content[i][0]) {\r\n          result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n  \r\nconst toJSONImpl = (src): Node => {\r\n    const dest = new Node(src.obj, src.dimension, null);\r\n    if (src.left) dest.left = toJSONImpl(src.left);\r\n    if (src.right) dest.right = toJSONImpl(src.right);\r\n    return dest;\r\n}\r\n  \r\nconst buildTree = (points, depth, parent, dimensions) => {\r\n    const dim = depth % dimensions.length;\r\n  \r\n    if (points.length === 0) {\r\n      return null;\r\n    }\r\n    if (points.length === 1) {\r\n      return new Node(points[0], dim, parent);\r\n    }\r\n  \r\n    points.sort((a, b) => a[dimensions[dim]] - b[dimensions[dim]]);\r\n  \r\n    const median = Math.floor(points.length / 2);\r\n    const node = new Node(points[median], dim, parent);\r\n    node.left = buildTree(points.slice(0, median), depth + 1, node, dimensions);\r\n    node.right = buildTree(points.slice(median + 1), depth + 1, node, dimensions);\r\n  \r\n    return node;\r\n  }\r\n  \r\nconst restoreParent = (root) => {\r\n    if (root.left) {\r\n      root.left.parent = root;\r\n      restoreParent(root.left);\r\n    }\r\n  \r\n    if (root.right) {\r\n      root.right.parent = root;\r\n      restoreParent(root.right);\r\n    }\r\n}\r\n  \r\n\r\n\r\n  // Binary heap implementation from:\r\n  // http://eloquentjavascript.net/appendix2.html\r\n  class BinaryHeap {\r\n    content: any;\r\n    scoreFunction: any;\r\n    constructor(scoreFunction) {\r\n      this.content = [];\r\n      this.scoreFunction = scoreFunction;\r\n    }\r\n  \r\n    push(element) {\r\n      // Add the new element to the end of the array.\r\n      this.content.push(element);\r\n      // Allow it to bubble up.\r\n      this.bubbleUp(this.content.length - 1);\r\n    }\r\n  \r\n    pop() {\r\n      // Store the first element so we can return it later.\r\n      let result = this.content[0];\r\n      // Get the element at the end of the array.\r\n      let end = this.content.pop();\r\n      // If there are any elements left, put the end element at the\r\n      // start, and let it sink down.\r\n      if (this.content.length > 0) {\r\n        this.content[0] = end;\r\n        this.sinkDown(0);\r\n      }\r\n      return result;\r\n    }\r\n  \r\n    peek() {\r\n      return this.content[0];\r\n    }\r\n  \r\n    size() {\r\n      return this.content.length;\r\n    }\r\n  \r\n    bubbleUp(n) {\r\n      // Fetch the element that has to be moved.\r\n      let element = this.content[n];\r\n      // When at 0, an element can not go up any further.\r\n      while (n > 0) {\r\n        // Compute the parent element's index, and fetch it.\r\n        const parentN = Math.floor((n + 1) / 2) - 1;\r\n        const parent = this.content[parentN];\r\n        // Swap the elements if the parent is greater.\r\n        if (this.scoreFunction(element) < this.scoreFunction(parent)) {\r\n          this.content[parentN] = element;\r\n          this.content[n] = parent;\r\n          // Update 'n' to continue at the new position.\r\n          n = parentN;\r\n        } else {\r\n          // Found a parent that is less, no need to move it further.\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  \r\n    sinkDown(n) {\r\n      // Look up the target element and its score.\r\n      const length = this.content.length;\r\n      const element = this.content[n];\r\n      const elemScore = this.scoreFunction(element);\r\n  \r\n      while (true) {\r\n        let child1Score;\r\n        // Compute the indices of the child elements.\r\n        const child2N = (n + 1) * 2;\r\n        const child1N = child2N - 1;\r\n        // This is used to store the new position of the element,\r\n        // if any.\r\n        let swap = null;\r\n        // If the first child exists (is inside the array)...\r\n        if (child1N < length) {\r\n          // Look it up and compute its score.\r\n          const child1 = this.content[child1N];\r\n          child1Score = this.scoreFunction(child1);\r\n          // If the score is less than our element's, we need to swap.\r\n          if (child1Score < elemScore) {\r\n            swap = child1N;\r\n          }\r\n        }\r\n        // Do the same checks for the other child.\r\n        if (child2N < length) {\r\n          const child2 = this.content[child2N];\r\n          const child2Score = this.scoreFunction(child2);\r\n          if (child2Score < (swap === null ? elemScore : child1Score)) {\r\n            swap = child2N;\r\n          }\r\n        }\r\n  \r\n        // If the element needs to be moved, swap it, and continue.\r\n        if (swap !== null) {\r\n          this.content[n] = this.content[swap];\r\n          this.content[swap] = element;\r\n          n = swap;\r\n        } else {\r\n          // Otherwise, we are done.\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }"],"names":["Solution","id","divHost","this","knnEx","result","KNN","predict","console","log","data","getIrisData","shuffleArray","inputs","labels","i","length","row","j","push","train_inputs_data","splice","Math","floor","train_labels_data","val_inputs_data","val_labels_data","failure","String","toFixed","undefined","lastElementChild","removeChild","error","euclidean","p","q","sqrt","d","squaredEuclidean","dataset","options","kdTree","k","classes","isEuclidean","model","Tree","Set","size","distance","points","Array","slice","isArray","getSinglePrediction","predictions","TypeError","modelKnn","currentCase","nearestPoints","nearest","pointsPerClass","predictedClass","maxPoints","lastElement","currentClass","currentPoints","Node","obj","dimension","parent","left","right","dimensions","metric","root","buildTree","restoreParent","point","maxNodes","maxDistance","bestNodes","BinaryHeap","e","nearestSearch","node","bestChild","linearDistance","otherChild","ownDistance","linearPoint","saveNode","pop","peek","abs","min","content","depth","dim","sort","a","b","median","scoreFunction","element","bubbleUp","end","sinkDown","n","parentN","elemScore","child1Score","child2N","child1N","swap","child1","child2"],"sourceRoot":""}