{"version":3,"file":"static/js/8327.cc021872.chunk.js","mappings":"qQAAaA,EAAQ,WACjB,WAAYC,IAAU,eAClBC,QAAQC,IAAI,kEACZD,QAAQC,IAAI,iCACZD,QAAQC,IAAI,kEA6HZ,IAAIC,EAAU,qBAEdF,QAAQC,IAAIC,GAEZ,IAAIC,EAAKD,+BACTF,QAAQC,IAAIE,GAGZ,IAAIC,EAAcD,EAAGE,MAAM,KAC3BL,QAAQC,IAAIG,GAEZA,EAAYE,SAAQ,SAACC,EAAMC,GACvBR,QAAQC,IAAI,eAAgBM,EAAMC,EACtC,IAKAR,QAAQC,IAAI,cADHC,4BAMTF,QAAQC,KAAIQ,GAMZT,QAAQC,IAAI,kBAFA,IAEmBS,WAHnB,MAIZV,QAAQC,IAAI,SAAS,EA0EzB,CAGC,OAHA,+BACD,WAEA,KAAC,EA5OgB,E","sources":["PART_09_Visualization_Typescript/03_Data_Structure/index.ts"],"sourcesContent":["export class Solution {\r\n    constructor(id: any) {\r\n        console.log(\"Let's learn Typescript for digital mapping and visualization!!\");\r\n        console.log(\"03 Typescript, Data structure\");\r\n        console.log(\"==============================================================\");\r\n\r\n        // Codepan\r\n        // https://codepen.io/NJStudio/pen/wvMabpp?editors=1010\r\n\r\n        // Python version \r\n        // https://colab.research.google.com/drive/1hF5YaGvZxKX3ME1MJCTbZkeqPkALz0xS?usp=sharing\r\n\r\n        // Data Structure\r\n        // 8. .................... Array(List)\r\n\r\n        // let theListA = [1,2,3,4,5]\r\n        // let theListB = [\"hello world\"]\r\n        // console.log(theListA)\r\n        // console.log(theListA[3])\r\n\r\n        // console.log(theListB)\r\n\r\n        // theListB.push(3) // theListB.append(3) in Python\r\n        // theListB.push(6)\r\n        // console.log(theListB)\r\n\r\n        // array\r\n\r\n        // // Reference\r\n        // // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\r\n\r\n        // // Create an Array\r\n        // let fruits = ['Apple', 'Banana']\r\n        // console.log('fruits length', fruits.length) // 2\r\n\r\n\r\n        // // Access an Array item using the index position\r\n        // let first = fruits[0]\r\n        // console.log('first', first)\r\n\r\n        // let last = fruits[fruits.length - 1]\r\n        // console.log('last', last)\r\n\r\n        // first = 'Fineapple';\r\n        // console.log(fruits)\r\n\r\n\r\n        // // Modify an iteam in an Array\r\n        // fruits[0] = 'Fineapple';\r\n        // console.log(fruits)\r\n\r\n\r\n        // // Add an item to the end of an Array\r\n        // fruits.push('Orange')\r\n        // console.log(fruits)\r\n\r\n\r\n        // // Remove an item from the end of an Array\r\n        // let last = fruits.pop() // remove Orange (from the end)\r\n        // console.log(fruits) // [\"Fineapple\", \"Banana\"]\r\n\r\n\r\n        // // Add an item to the beginning of an Array\r\n        // let newLength = fruits.unshift('Strawberry') // add to the front\r\n        // console.log(fruits) // [\"Strawberry\", \"Fineapple\", \"Banana\"]\r\n\r\n\r\n        // // Remove an item from the beginning of an Array\r\n        // let indexNumber = fruits.indexOf('Fineapple')\r\n        // console.log(indexNumber);\r\n\r\n\r\n        // // Remove an item by index position\r\n        // let removedItem = fruits.splice(indexNumber, 1) // this is how to remove an item         \r\n        // console.log(fruits);\r\n\r\n\r\n        // // Check an iteam\r\n        // console.log('includes apple?',fruits.includes('banana'));\r\n        // console.log('includes apple?',fruits.includes('Banana'));\r\n\r\n\r\n        // // Merge arrays\r\n        // let array1 = ['a', 'b', 'c'];\r\n        // let array2 = ['d', 'e', 'f'];\r\n        // let array3 = array1.concat(array2);\r\n        // console.log(array3);\r\n\r\n\r\n        // // Loop an array\r\n        // // javascript function\r\n        // for(let index = 0 ; index < array3.length; ++index) {\r\n        // \t  console.log('by for loop :', array3[index], index);\r\n        // }\r\n        // array3.forEach(function(item, index) {\r\n        //   console.log('by foreach :',item, index)\r\n        // })\r\n        // // Arrow function\r\n        // array3.forEach((item, index) => {\r\n        //   console.log('by arrow function :', item, index)\r\n        // })\r\n\r\n\r\n        // 9. .................... String\r\n        // Python\r\n        // myData = 'a,b,c,d,e,f';\r\n        // print(myData)\r\n        // dataArray = myData.split(',');\r\n        // print(dataArray)\r\n        // for i in dataArray:\r\n        //   print(i)\r\n\r\n        // let myData = 'a,b,c,d,e,f';\r\n        // console.log(myData);\r\n        // myData = myData.split(',');\r\n\r\n        // for(let i = 0; i < myData.length; i++) {\r\n        // \tconsole.log(myData[i]);\r\n        // }\r\n\r\n        // myData.forEach( (d) => {\r\n        // \t\tconsole.log(d, 'from foreach')\r\n        // \t}\r\n        // );\r\n\r\n        // Reference\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\r\n\r\n        // Create an string\r\n        let string1 = \"A string primitive\";\r\n        let string2 = 'Also a string primitive';\r\n        console.log(string1);\r\n\r\n        let s3 = string1 + ' , ' + string2\r\n        console.log(s3);\r\n\r\n\r\n        let stringArray = s3.split(' ');\r\n        console.log(stringArray);\r\n\r\n        stringArray.forEach((item, index) => {\r\n            console.log('by foreach :', item, index)\r\n        })\r\n\r\n\r\n        //\r\n        let s4 = string1 + 123 + 456;\r\n        console.log('add strings', s4);\r\n\r\n        //\r\n        let word1 = 'a'\r\n        let word2 = 'A'\r\n        console.log(word1 === word2);\r\n\r\n\r\n        let word3 = '1'\r\n        let word4 = 1\r\n        // console.log('compare word1 with word2', word3 === word4);\r\n        console.log('by the function', parseFloat(word3) === word4);\r\n        console.log('by + ', +word3 === word4);\r\n\r\n\r\n        // 9. .................... Matrix (list of list)\r\n\r\n        // Python\r\n        // myArrayOfArray = [\r\n        //     [1,2,3],\r\n        //     [4,5,6]\r\n        // ]\r\n\r\n        // for i in myArrayOfArray:\r\n        //   # print(i)\r\n        //   for j in i:\r\n        //     print(j)\r\n\r\n        // let myArrayOfArray = [\r\n        //     [1,2,3],\r\n        //     [4,5,6]\r\n        // ]\r\n        // for(let j = 0; j < myArrayOfArray.length; ++j) {\r\n        // \tfor(let i = 0; i < myArrayOfArray[j].length; ++i) {\r\n        // \t\tconsole.log( myArrayOfArray[j][i] );\r\n        // \t}\r\n        // }\r\n\r\n        // console.log( 'index [1][0] ', myArrayOfArray[1][0] )\r\n\r\n    \r\n\r\n        // 9. .................... Object\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\r\n\r\n        // Python\r\n        // https://alligator.io/js/for-of-for-in-loops/\r\n        // https://jsonlint.com/\r\n        // myObject = {\r\n        //     'NJ': 1,\r\n        //     'MJ': 2,\r\n        //     'DJ': 3\r\n        // }\r\n        // print(myObject)\r\n        // for i in myObject:\r\n        //   print(myObject[i])\r\n        //   # print( i, ': ', myObject[i])\r\n\r\n        // let myObject = {\r\n        //     'NJ': 1,\r\n        //     'MJ': 2,\r\n        //     'DJ': 3\r\n        // };\r\n        // for(let i in myObject) {\r\n        // \tconsole.log('key', i, ', value: ', myObject[i]);\r\n        // }\r\n\r\n        // // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\r\n\r\n        // const object = { a: 1, b: 2, c: 3 };\r\n\r\n        // for (const property in object) {\r\n        //   console.log(`${property}: ${object[property]}`);\r\n        // }\r\n\r\n\r\n\r\n        // // JSON stringify\r\n        // const stringJSon = JSON.stringify(myObject)\r\n        // console.log(stringJSon);\r\n\r\n        // // JSON parse\r\n        // const jsonObject = JSON.parse(stringJSon);\r\n        // console.log(jsonObject);\r\n\r\n\r\n    }\r\n    public destroy() {\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n"],"names":["Solution","id","console","log","string1","s3","stringArray","split","forEach","item","index","word1","parseFloat"],"sourceRoot":""}