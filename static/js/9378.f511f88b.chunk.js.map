{"version":3,"file":"static/js/9378.f511f88b.chunk.js","mappings":"2RAEaA,EAAQ,0CAEjB,WAAYC,GAAsB,IAAD,EAMjB,OANiB,gBAC7B,cAAMA,IAEDC,OAAOC,MAAMC,WAAa,OAG/B,EAAKC,OAAO,CAChB,CAkEC,OAlEA,4BACD,WACI,IAAMC,EAAMC,KAAKD,IAEjBA,EAAIE,YACJF,EAAIG,IAAI,EAAG,EAAG,GAAI,EAAG,MACrBH,EAAII,YAEJJ,EAAIK,UAAY,UAChBL,EAAIM,OAMJC,QAAQC,IAAI,sCAIZ,IAyBMC,EAAK,CAAC,GAAI,KACVC,EAAK,CAAC,IAAK,IAEjBV,EAAIE,YACJF,EAAIW,OAAOF,EAAG,GAAIA,EAAG,IACrBT,EAAIY,OAAOF,EAAG,GAAIA,EAAG,IACrBV,EAAIa,YAAc,UAClBb,EAAIc,UAAY,EAChBd,EAAIe,QAcR,KAAC,EA3EgB,C,SAASC,e","sources":["PART_04_Geometry_Data/LAB_Web_02_Line_Polyline/index.ts"],"sourcesContent":["import { RendererCanvas } from '../../lib';\r\n\r\nexport class Solution extends RendererCanvas {\r\n\r\n    constructor(div: HTMLDivElement) {\r\n        super(div);\r\n\r\n        this.canvas.style.background = '#fff';\r\n        // this.ctx.translate(this.ctx.canvas.width * 0.5, this.ctx.canvas.height * 0.5);\r\n        // this.ctx.scale(2, 2);\r\n        this.init();\r\n    }\r\n    public init() {\r\n        const ctx = this.ctx;\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, 10, 0, 3.14 * 2)\r\n        ctx.closePath();\r\n\r\n        ctx.fillStyle = '#ff0000'\r\n        ctx.fill();\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        // Reference: https://codepen.io/NJStudio/pen/bGVzvMP?editors=1010\r\n\r\n        console.log('workshop-canvas 02 Line & Polyline');\r\n\r\n\r\n\r\n        const drawPoint = (x: number, y: number, color: string = '#121212', r: number = 5) => {\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, r, 0, 3.14 * 2)\r\n            ctx.closePath()\r\n            ctx.fillStyle = color;\r\n            ctx.fill()\r\n        }\r\n        const drawLine = (pts: number[][]) => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(pts[0][0], pts[0][1]);\r\n            for (let i = 1; i < pts.length; ++i) {\r\n                ctx.lineTo(pts[i][0], pts[i][1]);\r\n            }\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeStyle = '#00ff00';\r\n            ctx.stroke();\r\n        }\r\n\r\n\r\n        /////////////////////////////////////////////////////////////\r\n        // ......................................your code goes here\r\n        /////////////////////////////////////////////////////////////\r\n\r\n        // (1)\r\n        const p0 = [10, 100];\r\n        const p1 = [100, 10];\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(p0[0], p0[1]);\r\n        ctx.lineTo(p1[0], p1[1]);\r\n        ctx.strokeStyle = '#ff0000';\r\n        ctx.lineWidth = 3;\r\n        ctx.stroke();\r\n\r\n        // (2)\r\n        // const pline = [ 50, 50, 50, 100, 100, 50, 100, 100 ]\r\n\r\n        // (3) convert the python code and draw polyline \r\n        // lns = []\r\n        // for y in range(10, 200, 10):\r\n        //     for x in range(10, 200, 10):\r\n        //         if (x + y) % 2 == 0:\r\n        //             lns.append([x, y] )\r\n        // renderLineSeg(lns)\r\n\r\n\r\n    }\r\n}\r\n"],"names":["Solution","div","canvas","style","background","init","ctx","this","beginPath","arc","closePath","fillStyle","fill","console","log","p0","p1","moveTo","lineTo","strokeStyle","lineWidth","stroke","RendererCanvas"],"sourceRoot":""}