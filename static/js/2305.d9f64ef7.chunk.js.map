{"version":3,"file":"static/js/2305.d9f64ef7.chunk.js","mappings":"iTAIaA,EAAQ,0CAIjB,aAAkC,IAAD,EAArBC,EAAU,uDAAG,QAAM,gBAC3B,cAAMA,IAHVC,gBAAU,EAKN,EAAKC,OAAOC,SAASC,IAAI,EAAG,GAAI,IAEhC,IAAMC,EAAe,IAAIC,EAAAA,IAAmB,SAAU,KACtD,EAAKC,MAAMC,IAAIH,GAEf,EAAKJ,WAAa,IAAIK,EAAAA,IAAiB,SAAU,KACjD,EAAKL,WAAWE,SAASM,EAAI,GAC7B,EAAKR,WAAWE,SAASO,EAAI,GAC7B,EAAKT,WAAWU,YAAa,EAC7B,EAAKJ,MAAMC,IAAI,EAAKP,YAEpB,IAAMW,EAAW,IAAIN,EAAAA,IAAqB,IAAK,GAAI,IAC7CO,EAAS,IAAIP,EAAAA,IAAYM,EAAU,IAAIN,EAAAA,KAgE1C,OA/DH,EAAKC,MAAMC,IAAIK,IASfC,EAAAA,EAAAA,eAAc,4GAA4GC,MAAK,SAACC,GAO5H,IANA,IAAMC,EAAQD,EAAEE,MAAM,eAEhBC,EAAK,GACLC,EAAU,GACVC,EAAS,GAENC,EAAI,EAAGA,EAAIL,EAAMM,SAAUD,EAAG,CACnC,IAAME,EAAOP,EAAMK,GAAGJ,MAAM,KAGZ,MAAZM,EAAK,IACLL,EAAGM,MAAMD,EAAK,IAAMA,EAAK,IAAMA,EAAK,IAGxB,OAAZA,EAAK,IACLH,EAAOI,MAAMD,EAAK,GAAK,KAAMA,EAAK,GAAK,KAAMA,EAAK,GAAI,KAG1C,MAAZA,EAAK,KACLJ,EAAQK,MAAMD,EAAK,IAAKA,EAAK,IAAKA,EAAK,IACvCJ,EAAQK,MAAMD,EAAK,IAAKA,EAAK,IAAKA,EAAK,IAG/C,CAIA,IAAME,EAAW,IAAIpB,EAAAA,IAAwB,CACzCqB,KAAMrB,EAAAA,IACNsB,cAAc,IAQZhB,EAAW,IAAIN,EAAAA,IACrBM,EAASiB,SAAST,GAClBR,EAASkB,aAAa,WAAY,IAAIxB,EAAAA,IAA6Ba,EAAI,IAEvEP,EAASkB,aAAa,QAAS,IAAIxB,EAAAA,IAA6Be,EAAQ,IAIxET,EAASmB,wBACTnB,EAASoB,uBAGT,IAAMC,EAAO,IAAI3B,EAAAA,IAAWM,EAAUc,GACtC,EAAKnB,MAAMC,IAAIyB,GAEf,EAAKC,OACT,IAAG,CAGP,CAAC,iBAtFgB,CAASC,EAAAA,c","sources":["PART_11_Web_Visualization_3D_for_GIS/LAB_Web_10_Mesh-Vertex-Color/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree, getCSVFromURL } from '../../lib';\r\n\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    pointLight: THREE.PointLight\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        this.camera.position.set(0, 50, 50);\r\n\r\n        const ambientLight = new THREE.AmbientLight(0xcccccc, 0.25);\r\n        this.scene.add(ambientLight);\r\n\r\n        this.pointLight = new THREE.PointLight(0xffffff, 0.75);\r\n        this.pointLight.position.x = 10;\r\n        this.pointLight.position.y = 10;\r\n        this.pointLight.castShadow = true;\r\n        this.scene.add(this.pointLight);\r\n\r\n        const geometry = new THREE.SphereGeometry(4.1, 60, 60 );\r\n        const object = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( ) );\r\n        this.scene.add(object);\r\n\r\n        // const light = new THREE.HemisphereLight();\r\n\t\t// \t\tthis.scene.add( light );\r\n\r\n        // const geometry = new THREE.SphereGeometry( 1, 50, 50 );\r\n        // const object = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( ) );\r\n        // this.scene.add(object);\r\n\r\n        getCSVFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/geometry/CFDSimulationOBJ/CFDSimulationCustom.obj').then((d) => {\r\n            const lines = d.split(/\\r\\n|\\r|\\n/g);\r\n\r\n            const vs = []\r\n            const indices = [];\r\n            const colors = []\r\n\r\n            for (let i = 0; i < lines.length; ++i) {\r\n                const line = lines[i].split(' ');\r\n                \r\n         \r\n                if (line[0] === 'v') {\r\n                    vs.push(+line[1] , +line[3] , +line[2] )\r\n                }\r\n                \r\n                if (line[0] === 'vc') {\r\n                    colors.push(+line[1] / 255, +line[2] / 255, +line[3]/ 255)\r\n                }\r\n\r\n                if (line[0] === 'f') {\r\n                    indices.push(+line[1], +line[2], +line[3])\r\n                    indices.push(+line[1], +line[3], +line[4])\r\n\r\n                }\r\n            }\r\n            // console.log(vs);\r\n            // console.log(indices);\r\n    \r\n            const material = new THREE.MeshBasicMaterial({\r\n                side: THREE.DoubleSide,\r\n                vertexColors: true,\r\n                // wireframe: true,\r\n            });\r\n\r\n            // const material = new THREE.MeshLambertMaterial();\r\n\r\n            // const material = new THREE.MeshPhongMaterial(  )\r\n            \r\n            const geometry = new THREE.BufferGeometry();\r\n            geometry.setIndex(indices );\r\n            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vs, 3));\r\n            // geometry.setAttribute('normal', new THREE.Float32BufferAttribute(colors, 3));\r\n            geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n            // generateMorphTargets( geometry );\r\n\r\n            \r\n            geometry.computeBoundingSphere();\r\n            geometry.computeVertexNormals();\r\n            // this.positions = positions;\r\n            // this.geometry = geometry;\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            this.scene.add(mesh);\r\n\r\n            this.start();\r\n        });\r\n\r\n\r\n    }\r\n}\r\n"],"names":["Solution","id","pointLight","camera","position","set","ambientLight","THREE","scene","add","x","y","castShadow","geometry","object","getCSVFromURL","then","d","lines","split","vs","indices","colors","i","length","line","push","material","side","vertexColors","setIndex","setAttribute","computeBoundingSphere","computeVertexNormals","mesh","start","RendererThree"],"sourceRoot":""}