{"version":3,"file":"static/js/227.3594e060.chunk.js","mappings":"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","sources":["PART_9_LAB_Visualization_Analysis/Lab/14_Polygon/MouserInteraction.ts"],"sourcesContent":["import { RendererJSAPI } from '../../../lib'\r\nimport { getJSONFromURL } from 'njscore';\r\n\r\n// https://en.wikipedia.org/wiki/Thematic_map\r\n// https://en.wikipedia.org/wiki/Choropleth_map\r\n\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    colors: string[] = [];\r\n    polygonsGeo: number [][] = [];\r\n    polygonsScreenPath2D: Path2D [] = [];\r\n    centersScreen: number[][] = [];\r\n\r\n    constructor(view: any) {\r\n        super(view);\r\n\r\n        // disable interaction with a base map\r\n        // https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n        this.mView.on(\"drag\", (event) => {\r\n            event.stopPropagation();\r\n        });\r\n        this.mView.navigation.mouseWheelZoomEnabled = false;\r\n\r\n\r\n        // reposition the center of the basemap\r\n        this.center(-97.893669, 39.176304);\r\n        this.zoom(4);\r\n\r\n\r\n        const canvas = document.createElement('canvas');\r\n        canvas.id = 'layer';\r\n        canvas.width = this.mView.container.clientWidth;\r\n        canvas.height = this.mView.container.clientHeight;\r\n        canvas.style.background= 'rgba(0, 32, 0, 0.6)';\r\n        canvas.style.position = 'absolute';\r\n        canvas.style.pointerEvents = 'none';\r\n        this.mView.container.appendChild(canvas);\r\n\r\n        \r\n        // https://eric.clst.org/tech/usgeojson/\r\n        getJSONFromURL(process.env.PUBLIC_URL + '/static/data/gz_2010_us_050_00_20m.json').then((d) => {\r\n\r\n            const features = d['features'];\r\n\r\n            for(let i = 0 ; i < features.length; ++i) {\r\n                const geometry = features[i]['geometry'];\r\n                // console.log(geometry)\r\n                \r\n                if(geometry['type'] === 'Polygon') {\r\n                    // console.log(geometry['coordinates'].length)\r\n\r\n                    let x = geometry['coordinates'][0][0][0];\r\n                    let y = geometry['coordinates'][0][0][1];\r\n                    const polygon = [];\r\n                    polygon.push(x, y);\r\n\r\n\r\n                    for(let j = 1 ; j < geometry['coordinates'][0].length; ++j) {\r\n                        x = geometry['coordinates'][0][j][0];\r\n                        y = geometry['coordinates'][0][j][1];\r\n                        polygon.push(x, y);\r\n                    }\r\n\r\n                    this.colors.push(`rgba(0, 255, 0, ${Math.random() * 0.2 + 0.3})`);\r\n                    this.polygonsGeo.push(polygon);\r\n\r\n                }\r\n            }\r\n\r\n            this.start();\r\n        });\r\n    }\r\n    render(ctx: CanvasRenderingContext2D) {\r\n\r\n        for (let i = 0; i < this.polygonsGeo.length; ++i) { \r\n\r\n            let x = this.polygonsGeo[i][0];\r\n            let y = this.polygonsGeo[i][1];\r\n            let projectedScreen = this.toScreen(x, y);\r\n            ctx.beginPath();\r\n            ctx.moveTo(projectedScreen[0], projectedScreen[1]);\r\n\r\n            let polygonScreenPath = new Path2D();\r\n            polygonScreenPath.moveTo(projectedScreen[0], projectedScreen[1]);\r\n\r\n            let cx = projectedScreen[0];\r\n            let cy = projectedScreen[1];\r\n\r\n            let count = 1;\r\n\r\n            for (let j = 2; j < this.polygonsGeo[i].length; j += 2) { \r\n                x = this.polygonsGeo[i][j];\r\n                y = this.polygonsGeo[i][j+1];\r\n                projectedScreen = this.toScreen(x, y);\r\n                ctx.lineTo(projectedScreen[0], projectedScreen[1]);\r\n                \r\n                polygonScreenPath.lineTo(projectedScreen[0], projectedScreen[1]);\r\n\r\n                cx += projectedScreen[0];\r\n                cy += projectedScreen[1];\r\n\r\n                count++;\r\n            }\r\n            ctx.closePath()\r\n            ctx.fillStyle = this.colors[i];\r\n            ctx.fill();\r\n\r\n            \r\n            renderPoint(ctx, cx / count, cy / count, 1, '#0fff0f');\r\n\r\n            this.centersScreen.push([cx / count, cy / count, count]);\r\n\r\n            polygonScreenPath.closePath();\r\n            this.polygonsScreenPath2D.push(polygonScreenPath);\r\n\r\n        }\r\n\r\n        console.log('done!');\r\n        this.isStatic = true;\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        this.ctx.lineWidth = 0;\r\n\r\n        let closestPtID = -1;\r\n        let maxDis = 100000;\r\n        for(let i = 0; i < this.centersScreen.length; ++i) {\r\n            const centroidScreen = this.centersScreen[i];\r\n            // console.log(centroidScreen)\r\n            const theDis = getDistance(x, y, centroidScreen[0], centroidScreen[1]);\r\n            if (theDis < maxDis) {\r\n                maxDis = theDis;\r\n                closestPtID = i;\r\n                \r\n            }\r\n        }\r\n\r\n        console.log('id:', closestPtID);\r\n        this.ctx.lineWidth = 0.2;\r\n        if (closestPtID !== -1 && closestPtID <= this.polygonsScreenPath2D.length) {\r\n            \r\n            const polygonScreen = this.polygonsScreenPath2D[closestPtID];\r\n            this.ctx.strokeStyle = '#0f0';\r\n            this.ctx.stroke(polygonScreen);\r\n        }\r\n    }\r\n}\r\n\r\nconst renderPoint = (ctx: CanvasRenderingContext2D, x: number, y: number, s: number, color: string) => {\r\n    ctx.fillStyle = color;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, s, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n}\r\n\r\nconst getDistance = (x0: number, y0: number, x1:number, y1:number): number => {\r\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));\r\n}"],"names":["Solution","view","colors","polygonsGeo","polygonsScreenPath2D","centersScreen","mView","on","event","stopPropagation","navigation","mouseWheelZoomEnabled","center","zoom","canvas","document","createElement","id","width","container","clientWidth","height","clientHeight","style","background","position","pointerEvents","appendChild","getJSONFromURL","then","d","features","i","length","geometry","x","y","polygon","push","j","Math","random","start","ctx","this","projectedScreen","toScreen","beginPath","moveTo","polygonScreenPath","Path2D","cx","cy","count","lineTo","closePath","fillStyle","fill","renderPoint","console","log","isStatic","lineWidth","closestPtID","maxDis","centroidScreen","theDis","getDistance","polygonScreen","strokeStyle","stroke","RendererJSAPI","s","color","arc","PI","x0","y0","x1","y1","sqrt"],"sourceRoot":""}