{"version":3,"file":"static/js/6884.8862aa10.chunk.js","mappings":"6WAIaA,EAAQ,0CAOjB,aAAkC,IAAD,EAArBC,EAAU,uDAAG,QAAM,gBAC3B,cAAMA,IANVC,UAAiB,GAAG,EACpBC,cAAqB,GAAG,EACxBC,cAAqB,GAAG,EACxBC,QAAe,GAKX,IAAMC,EAAQ,IAAIC,EAAAA,IAAiB,SAAU,IAC7C,EAAKC,OAAOC,IAAIH,GAChB,EAAKI,MAAMD,IAAIH,GACf,EAAKE,OAAOG,SAASC,IAAI,EAAG,GAAI,IA0B7B,OArBHC,EAAAA,EAAAA,gBAAe,mFAAmFC,MAAK,SAACC,GACpG,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAe,SAAEE,SAAUD,EAC3C,EAAKd,UAAUgB,KAAKH,EAAe,SAAEC,GAAa,SAAe,aAErEG,EAAY,EAAKT,MAAO,EAAKR,UAAW,CAAC,EAAG,EAAG,KAE/CW,EAAAA,EAAAA,gBAAe,mFAAmFC,MAAK,SAACC,GACpG,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAe,SAAEE,SAAUD,EAC3C,EAAKb,cAAce,KAAKH,EAAe,SAAEC,GAAa,SAAe,aAEzEG,EAAY,EAAKT,MAAO,EAAKP,cAAe,CAAC,EAAG,EAAG,GACvD,KAEAU,EAAAA,EAAAA,gBAAe,mFAAmFC,MAAK,SAACC,GACpG,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAe,SAAEE,SAAUD,EAC3C,EAAKZ,cAAcc,KAAKH,EAAe,SAAEC,GAAa,SAAe,aAEzEG,EAAY,EAAKT,MAAO,EAAKN,cAAe,CAAC,EAAG,EAAG,GACvD,IAEA,EAAKgB,OACT,IAAG,CACP,CAAC,iBAxCgB,CAASC,EAAAA,eA0CjBF,EAAc,SAACT,EAAoBY,EAAYC,GAgBxD,IAfA,IAAMC,EAAW,IAAIjB,EAAAA,IACfkB,EAAW,IAAIlB,EAAAA,IAAwB,CAAEmB,cAAc,IAEvDC,EAAY,GACZC,EAAS,GACTC,EAAU,GAUPb,EAAI,EAAGA,EAAIM,EAAML,SAAUD,EAGhC,IAFA,IAAMc,EAAQR,EAAMN,GAEXe,EAAI,EAAGA,EAAID,EAAMb,SAAUc,EAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMC,GAAGd,SAAUe,EAAG,CAEtC,OAAqBC,EAAAA,EAAAA,oBAAmBH,EAAMC,GAAGC,GAAG,GAAIF,EAAMC,GAAGC,GAAG,IAAG,eAAhEE,EAAI,KAAEC,EAAI,KACXD,EACAC,EACG,EAET,IAAMC,EAjBJ,KAiBSF,GAnBV,mBAoBKG,EAlBJ,KAkBSF,GAnBV,mBAoBDR,EAAUT,KAAKkB,EAAG,EAAGC,GACrBT,EAAOV,KAAKK,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAElCS,EAAIF,EAAMC,GAAGd,OAAS,GACtBY,EAAQX,KAAKoB,KAAKC,MAAMZ,EAAUV,OAAS,GAAK,EAAGqB,KAAKC,MAAMZ,EAAUV,OAAS,GAEzF,CAGRO,EAASgB,SAASX,GAClBL,EAASiB,aAAa,WAAY,IAAIlC,EAAAA,IAA6BoB,EAAW,IAC9EH,EAASiB,aAAa,QAAS,IAAIlC,EAAAA,IAA6BqB,EAAQ,IACxEJ,EAASkB,wBACT,IAAMC,EAAO,IAAIpC,EAAAA,IAAmBiB,EAAUC,GAE9C,OADAf,EAAMD,IAAIkC,GACHA,CACX,C,6KCrFa3C,EAAQ,0CAOjB,aAAkC,IAAD,EAArBC,EAAU,uDAAG,QAAM,gBAC3B,cAAMA,IANVC,UAAiB,GAAG,EACpBC,cAAqB,GAAG,EACxBC,cAAqB,GAAG,EACxBC,QAAe,GAKX,IAAMC,EAAQ,IAAIC,EAAAA,IAAiB,SAAU,IAC7C,EAAKC,OAAOC,IAAIH,GAChB,EAAKI,MAAMD,IAAIH,GACf,EAAKE,OAAOG,SAASC,IAAI,EAAG,GAAI,IAoB7B,OAfHC,EAAAA,EAAAA,gBAAe,mFAAmFC,MAAK,SAACC,GACpG,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAe,SAAEE,SAAUD,EAC3C,EAAKd,UAAUgB,KAAKH,EAAe,SAAEC,GAAa,SAAe,cAErEG,EAAAA,EAAAA,aAAY,EAAKT,MAAO,EAAKR,UAAW,CAAC,GAAK,GAAK,MAEnDW,EAAAA,EAAAA,gBAAe,iFAAiFC,MAAK,SAACC,GAClG,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAe,SAAEE,SAAUD,EAC3C,EAAKX,QAAQa,KAAKH,EAAe,SAAEC,GAAa,SAAe,aAEnE4B,EAAmB,EAAKlC,MAAO,EAAKL,QAAS,CAAC,EAAG,EAAG,GAExD,IAEA,EAAKe,OACT,IAAG,CACP,CAAC,iBAlCgB,CAASC,EAAAA,eAoCxBuB,EAAqB,SAAClC,EAAoBY,EAAYuB,GAOxD,IANA,IAIMlB,EAAY,GAETmB,EAAQ,EAAGA,EAAQxB,EAAML,SAAU6B,EAGxC,IAFA,IAAMC,EAAezB,EAAMwB,GAElBE,EAAQ,EAAGA,EAAQD,EAAa9B,SAAU+B,EAAO,CACtD,IAAMC,EAAUF,EAAaC,GAG7B,GAAuB,IAAnBC,EAAQhC,OAAc,CAKtB,IAJA,IAAMiC,EAAaD,EAAQ,GAErBE,EAAQ,GAELnC,EAAI,EAAGA,EAAIkC,EAAWjC,SAAUD,EAAG,CAExC,OAAqBiB,EAAAA,EAAAA,oBAAmBiB,EAAWlC,GAAG,GAAIkC,EAAWlC,GAAG,IAAG,eAErEoB,EApBR,KAkBa,MApBd,mBAuBSC,EArBR,KAkBmB,MAnBpB,mBAwBGV,EAAUT,KAAKkB,EAAG,EAAGC,GAErBc,EAAMjC,KAAK,IAAIX,EAAAA,IAAc6B,EAAGC,GACpC,CAEA,IAAIb,EAAW,IAAIjB,EAAAA,IAAoB,IAAIA,EAAAA,IAAY4C,IACnDC,EAAM,IAAI7C,EAAAA,IAAwB,CAClC8C,KAAM9C,EAAAA,IAAkBgB,MAAO,MAC/B+B,aAAa,EACbC,QAAS,KAETC,EAAO,IAAIjD,EAAAA,IAAWiB,EAAU4B,GACpC1C,EAAMD,IAAI+C,GACVA,EAAKC,aAAa,IAAIlD,EAAAA,IAAc,EAAG,EAAG,GAAc,GAAV+B,KAAKoB,GAEvD,CACJ,CAER,C","sources":["PART_11_Web_Visualization_3D_for_GIS/Slowzone_03_Polyline/index.ts","PART_11_Web_Visualization_3D_for_GIS/Slowzone_04_Polygon/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree, } from '../../lib';\r\nimport { getJSONFromURL, MercatorProjection, } from 'njscore';\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        // ................................................................................\r\n        // your code goes here\r\n        const path = '/static/research/slow-zone/';\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            renderLines(this.scene, this.streetOSM, [0, 1, 1]);\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/treated-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesTreated, [1, 0, 0]);\r\n            });\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/control-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesControl.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesControl, [0, 1, 0]);\r\n            });\r\n\r\n            this.start();\r\n        });\r\n    }\r\n}\r\nexport const renderLines = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const material = new THREE.LineBasicMaterial({ vertexColors: true });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n    const indices = [];\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    let xC = 0\r\n    let yC = 0\r\n    let Count = 0\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n                xC += xPro;\r\n                yC += yPro;\r\n                Count += 1;\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                positions.push(x, 0, y)\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n                if (k < route[j].length - 1) {\r\n                    indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    geometry.setIndex(indices);\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    geometry.computeBoundingSphere();\r\n    const line = new THREE.LineSegments(geometry, material);\r\n    scene.add(line);\r\n    return line;\r\n};","import * as THREE from 'three';\r\nimport { RendererThree } from '../../lib';\r\nimport { getJSONFromURL, MercatorProjection } from 'njscore';\r\nimport { renderLines } from '../Slowzone_03_Polyline';\r\n\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        // ................................................................................\r\n        // your code goes here\r\n        const path = '/static/research/slow-zone/';\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            renderLines(this.scene, this.streetOSM, [0.3, 0.3, 0.3]);\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/zones-30.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.zones30.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderMultiPolygon(this.scene, this.zones30, [0, 1, 0]);\r\n\r\n            });\r\n\r\n            this.start();\r\n        });\r\n    }\r\n}\r\nconst renderMultiPolygon = (scene: THREE.Scene, paths: any, colorArray: number[]) => {\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    const positions = [];\r\n\r\n    for (let multi = 0; multi < paths.length; ++multi) {\r\n        const multiPolygon = paths[multi];\r\n\r\n        for (let polyI = 0; polyI < multiPolygon.length; ++polyI) {\r\n            const polygon = multiPolygon[polyI];\r\n\r\n\r\n            if (polygon.length === 1) {\r\n                const thePolygon = polygon[0];\r\n\r\n                const shape = [];\r\n\r\n                for (let i = 0; i < thePolygon.length; ++i) {\r\n\r\n                    const [xPro, yPro] = MercatorProjection(thePolygon[i][0], thePolygon[i][1]);\r\n\r\n                    const x = (xPro + xOFf) * scale\r\n                    const y = (yPro + yOFf) * scale\r\n                    // console.log(x, y)\r\n                    positions.push(x, 0, y)\r\n\r\n                    shape.push(new THREE.Vector2(x, y));\r\n                }\r\n\r\n                let geometry = new THREE.ShapeGeometry(new THREE.Shape(shape));\r\n                let mat = new THREE.MeshBasicMaterial({\r\n                    side: THREE.DoubleSide, color: 0x00ff00,\r\n                    transparent: true,\r\n                    opacity: 0.3\r\n                });\r\n                let mesh = new THREE.Mesh(geometry, mat);\r\n                scene.add(mesh);\r\n                mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n\r\n            }\r\n        }\r\n    }\r\n};"],"names":["Solution","id","streetOSM","routesTreated","routesControl","zones30","light","THREE","camera","add","scene","position","set","getJSONFromURL","then","data","i","length","push","renderLines","start","RendererThree","paths","color","geometry","material","vertexColors","positions","colors","indices","route","j","k","MercatorProjection","xPro","yPro","x","y","Math","floor","setIndex","setAttribute","computeBoundingSphere","line","renderMultiPolygon","colorArray","multi","multiPolygon","polyI","polygon","thePolygon","shape","mat","side","transparent","opacity","mesh","rotateOnAxis","PI"],"sourceRoot":""}