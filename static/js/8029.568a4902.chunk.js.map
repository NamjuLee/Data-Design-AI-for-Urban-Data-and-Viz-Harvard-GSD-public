{"version":3,"file":"static/js/8029.568a4902.chunk.js","mappings":"qQAAaA,EAAQ,WACjB,WAAYC,IAAY,eACpBC,QAAQC,IAAI,kEACZD,QAAQC,IAAI,iCACZD,QAAQC,IAAI,oCAkHhB,CAGC,OAHA,+BACD,WAEA,KAAC,EAzHgB,E","sources":["PART_09_Visualization_Typescript/04_Function_Class/index.ts"],"sourcesContent":["export class Solution {\r\n    constructor(view: any) {\r\n        console.log(\"Let's learn Typescript for digital mapping and visualization!!\");\r\n        console.log(\"04 Typescript, Function Class\");\r\n        console.log(\"=================================\");\r\n        // Codepan\r\n        // https://codepen.io/NJStudio/pen/wvMabpp?editors=1010\r\n\r\n        // Python version \r\n        // https://colab.research.google.com/drive/1hF5YaGvZxKX3ME1MJCTbZkeqPkALz0xS?usp=sharing\r\n\r\n        // Data Structure\r\n        // 12. .................... function\r\n\r\n        // function add(a: number, b: number) {\r\n        // //     console.log('a + b:', a + b, 'by Regular function')\r\n        // }\r\n\r\n        // const result = add(2, 3)\r\n\r\n\r\n        // // .......................... arrow function\r\n        // const myFnA = (a: number) => {\r\n        // //     console.log(a * a, 'by Arrow function');\r\n        // }\r\n        // const myNum = 3;\r\n\r\n\r\n        // // ......................... Parameters\r\n        // const manyParams = (num: number, name: string) => {\r\n        //     let names = ''\r\n        //     for (let i = 0; i < num; ++i) {\r\n        //         names += name;\r\n        //     }\r\n        //     return names;\r\n        // }\r\n\r\n        // console.log(manyParams(5, 'namju '));\r\n\r\n        // // we can call other functions in my function too.\r\n        // const multiply = (numA: number, numB: number) => {\r\n        //     return numA * numB\r\n        // }\r\n        // const printName = (name: string) => {\r\n        // //     console.log(name);\r\n        // }\r\n\r\n        // const callYourName = (name: string, numA: number, numB: number) => {\r\n        //     const result = multiply(numA, numB);\r\n        //     const names = manyParams(result, name);\r\n        //     printName(names)\r\n        // }\r\n        // callYourName('lee ', 2, 4)\r\n\r\n\r\n        // 13. .................... class\r\n        // Programming paradigm : https://en.wikipedia.org/wiki/Programming_paradigm\r\n        // Typescript Classes: https://www.typescriptlang.org/docs/handbook/classes.html\r\n\r\n        // Typescript class example: https://codepen.io/NJStudio/pen/MWKJZQq?editors=1010\r\n        // Python Class example: https://github.com/NamjuLee/Introduction-to-computational-design-python-notebook/blob/master/Workshop_03_PythonClassAdvanced.ipynb\r\n\r\n        // function example\r\n        const gsd = {\r\n            numStudent: 100,\r\n            numClassRoom: 5\r\n        }\r\n\r\n        const addStudent = (school: any, numStudent) => {\r\n            school.numStudent += numStudent\r\n        }\r\n        const updateClassRoom = (school: any) => {\r\n            const max = 20;\r\n            school.numClassRoom = school.numStudent / max;\r\n            return school\r\n        }\r\n\r\n        // addStudent(gsd, 40);\r\n        // console.log(gsd);\r\n\r\n        // updateClassRoom(gsd);\r\n        // console.log(gsd);\r\n\r\n        // class implementation\r\n        class School {\r\n            nameSchool: string;\r\n            numStudent: number;\r\n            numClassRoom: number;\r\n            max: number = 20;\r\n            constructor(name: string, numStu: number, numClass: number) {\r\n                this.nameSchool = name;\r\n                this.numStudent = numStu;\r\n                this.numClassRoom = numClass;\r\n            }\r\n            addStudent = (numStudent) => {\r\n                this.numStudent += numStudent;\r\n                this.updateClassRoom();\r\n                this.print();\r\n            }\r\n            updateClassRoom = () => {\r\n                this.numClassRoom = this.numStudent / this.max;\r\n            }\r\n            print() {\r\n            //     console.log('numStudent:', this.numStudent, 'numClassRoom', this.numClassRoom);\r\n                // console.log(JSON.stringify(this));\r\n            }\r\n\r\n        }\r\n\r\n        // const school_a = new School('Harvard GSD', 100, 5);\r\n        // school_a.addStudent(40);\r\n        // school_a.addStudent(-60);\r\n\r\n        // const school_b = new School('MIT Architecture', 100, 5);\r\n        // school_b.addStudent(20)\r\n\r\n \r\n\r\n    }\r\n    public destroy() {\r\n\r\n    }\r\n}\r\n"],"names":["Solution","view","console","log"],"sourceRoot":""}