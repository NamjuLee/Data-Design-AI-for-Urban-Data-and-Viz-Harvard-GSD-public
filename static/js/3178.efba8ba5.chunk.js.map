{"version":3,"file":"static/js/3178.efba8ba5.chunk.js","mappings":"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EAAAA,GAAAA,IAAS,CAAC3xD,OAAQ,CAACjD,EAAGy/F,EAAY9sG,EAAGkD,GAAI+qB,QAAAA,IACvC8+E,EACFxhG,GAAI,CAAC+E,OAAQ,CAACpN,EAAGuE,GAAMwmB,QAAAA,EAAS1d,MAAO,CAACrQ,KAAM,EAAGC,UAAU,KAC/D2N,EAAIkE,KAAK+6F,GACT35B,EAAcphE,KAAK66F,GACnBz5B,EAAcphE,KAAKmI,GACnBi5D,EAAcphE,KAAK86F,GACnB15B,EAAcphE,KAAKvK,GACnB2rE,EAAcphE,KAAK+6F,GAGrB,IAAM3zF,EAASygF,GAAK,CAACvpF,OAAQxC,EAAKmgB,QAAAA,EAAS1d,MAAO,CAACrQ,KAAM,KAIzD,OAFAkzE,EAAc9kE,SAAQ,SAAAyE,GAAC,OAAIkb,EAAQ4kD,8BAA8B9/D,EAAE,IAE5DqG,CACT,GD0RA,QA3KsC,CACpC25D,GACAi6B,GAAAA,GACA35B,GACAC,GACA25B,GAAAA,GACA15B,GACAI,GACAK,GACAG,GACAI,GACAE,GACAC,GACAC,GACAI,GACAC,GACA2E,GACAI,GACArpE,GACAQ,GACA4hE,GACAyI,GACAc,GACAQ,GACAI,GACAiwB,GAAAA,GACAC,GAAAA,GACA3vB,GACA4vB,GAAAA,EACA3vB,GACAwB,GACA6B,GACAC,GACAU,GACAU,GACAQ,GACAkB,GACAQ,GACAC,GACAC,GACAsC,GACAU,GACAC,GACAI,GACAc,GACAC,GACAI,GACAE,GACAE,GACAW,GACAI,GACAK,GACA3b,GACAj5D,GACA03F,GAAAA,GACA7hB,GACA8hB,GAAAA,GACA3hB,GACA4hB,GAAAA,GACAnd,GACAO,GACAE,GACA2c,GAAAA,GACA/b,GACAC,GACAK,GACAE,GACAS,GACA+a,GAAAA,GACAC,GAAAA,EACAC,GAAAA,EACAra,GACApV,GACAsV,GACAC,GACAC,GACAxkB,GACA0+B,GAAAA,GACAC,GAAAA,GACAla,GACAma,GAAAA,GACA/Z,GACAG,GACAE,GACAG,GACAC,GACAO,GACAS,GACAuY,GAAAA,GACAtY,GACAC,GACAz5E,GACAK,GACAu5E,GACAQ,GACAG,GACAwX,GAAAA,GACAvX,GACAO,GACAQ,GACAyW,GAAAA,GACAC,GAAAA,GACA9V,GACAU,GACAK,GACAgV,GAAAA,GACA5U,GACAK,GACAG,GACAC,GACAG,GACAxqB,GACAy+B,GAAAA,GACAhU,GACAgB,GACAW,GACAU,GACA4R,GAAAA,EACAxiB,GACA+Q,GACAhtB,GACAC,GACAS,GACAusB,GACA/7E,GACAk/E,GACA9+E,GACA+/E,GACAK,GACAS,GACAuM,GAAAA,GACAtM,GACAW,GACAQ,GACAK,GACA+K,GAAAA,GACA9K,GACAC,GACAC,GACA6K,GAAAA,GACAjX,GACAwM,GACAC,GACAU,GACAW,GACAO,GACAO,GACAE,GACAK,GACA+H,GAAAA,GACA5H,GACAE,GACAE,GACAC,GACAY,GACAY,GACAM,GACA0F,GAAAA,GACApkB,GACA8e,GACAC,GACAC,GACAE,GACAK,GACA8E,GAAAA,EACAxC,GACAG,GACAI,GACA/S,IAGsC,kBAAE,CAArC,IAAMiV,GAAY,QACrBC,EAAAA,EAAAA,gBAAeD,oBE9TFE,EAAAA,aAESC,GAAAA","sources":["../../tfjs-core/src/public/chained_ops/abs.ts","../../tfjs-core/src/public/chained_ops/acos.ts","../../tfjs-core/src/public/chained_ops/acosh.ts","../../tfjs-core/src/public/chained_ops/add.ts","../../tfjs-core/src/public/chained_ops/all.ts","../../tfjs-core/src/public/chained_ops/any.ts","../../tfjs-core/src/public/chained_ops/arg_max.ts","../../tfjs-core/src/public/chained_ops/arg_min.ts","../../tfjs-core/src/public/chained_ops/as_scalar.ts","../../tfjs-core/src/public/chained_ops/as_type.ts","../../tfjs-core/src/public/chained_ops/as1d.ts","../../tfjs-core/src/public/chained_ops/as2d.ts","../../tfjs-core/src/public/chained_ops/as3d.ts","../../tfjs-core/src/public/chained_ops/as4d.ts","../../tfjs-core/src/public/chained_ops/as5d.ts","../../tfjs-core/src/public/chained_ops/asin.ts","../../tfjs-core/src/public/chained_ops/asinh.ts","../../tfjs-core/src/public/chained_ops/atan.ts","../../tfjs-core/src/public/chained_ops/atan2.ts","../../tfjs-core/src/public/chained_ops/atanh.ts","../../tfjs-core/src/public/chained_ops/avg_pool.ts","../../tfjs-core/src/public/chained_ops/batch_to_space_nd.ts","../../tfjs-core/src/public/chained_ops/batchnorm.ts","../../tfjs-core/src/public/chained_ops/broadcast_to.ts","../../tfjs-core/src/public/chained_ops/cast.ts","../../tfjs-core/src/public/chained_ops/ceil.ts","../../tfjs-core/src/public/chained_ops/clip_by_value.ts","../../tfjs-core/src/public/chained_ops/concat.ts","../../tfjs-core/src/public/chained_ops/conv1d.ts","../../tfjs-core/src/public/chained_ops/conv2d_transpose.ts","../../tfjs-core/src/public/chained_ops/conv2d.ts","../../tfjs-core/src/public/chained_ops/cos.ts","../../tfjs-core/src/public/chained_ops/cosh.ts","../../tfjs-core/src/public/chained_ops/cumprod.ts","../../tfjs-core/src/public/chained_ops/cumsum.ts","../../tfjs-core/src/public/chained_ops/depth_to_space.ts","../../tfjs-core/src/public/chained_ops/depthwise_conv2d.ts","../../tfjs-core/src/public/chained_ops/dilation2d.ts","../../tfjs-core/src/public/chained_ops/div_no_nan.ts","../../tfjs-core/src/public/chained_ops/div.ts","../../tfjs-core/src/public/chained_ops/dot.ts","../../tfjs-core/src/public/chained_ops/elu.ts","../../tfjs-core/src/public/chained_ops/equal.ts","../../tfjs-core/src/public/chained_ops/erf.ts","../../tfjs-core/src/public/chained_ops/euclidean_norm.ts","../../tfjs-core/src/public/chained_ops/exp.ts","../../tfjs-core/src/public/chained_ops/expand_dims.ts","../../tfjs-core/src/public/chained_ops/expm1.ts","../../tfjs-core/src/public/chained_ops/fft.ts","../../tfjs-core/src/public/chained_ops/flatten.ts","../../tfjs-core/src/public/chained_ops/floor.ts","../../tfjs-core/src/public/chained_ops/floorDiv.ts","../../tfjs-core/src/public/chained_ops/gather.ts","../../tfjs-core/src/public/chained_ops/greater_equal.ts","../../tfjs-core/src/public/chained_ops/greater.ts","../../tfjs-core/src/public/chained_ops/ifft.ts","../../tfjs-core/src/public/chained_ops/irfft.ts","../../tfjs-core/src/public/chained_ops/is_finite.ts","../../tfjs-core/src/public/chained_ops/is_inf.ts","../../tfjs-core/src/public/chained_ops/is_nan.ts","../../tfjs-core/src/public/chained_ops/leaky_relu.ts","../../tfjs-core/src/public/chained_ops/less_equal.ts","../../tfjs-core/src/public/chained_ops/less.ts","../../tfjs-core/src/public/chained_ops/local_response_normalization.ts","../../tfjs-core/src/public/chained_ops/log_sigmoid.ts","../../tfjs-core/src/public/chained_ops/log_softmax.ts","../../tfjs-core/src/public/chained_ops/log_sum_exp.ts","../../tfjs-core/src/public/chained_ops/log.ts","../../tfjs-core/src/public/chained_ops/log1p.ts","../../tfjs-core/src/public/chained_ops/logical_and.ts","../../tfjs-core/src/public/chained_ops/logical_not.ts","../../tfjs-core/src/public/chained_ops/logical_or.ts","../../tfjs-core/src/public/chained_ops/logical_xor.ts","../../tfjs-core/src/public/chained_ops/mat_mul.ts","../../tfjs-core/src/public/chained_ops/max_pool.ts","../../tfjs-core/src/public/chained_ops/max.ts","../../tfjs-core/src/public/chained_ops/maximum.ts","../../tfjs-core/src/public/chained_ops/mean.ts","../../tfjs-core/src/public/chained_ops/min.ts","../../tfjs-core/src/public/chained_ops/minimum.ts","../../tfjs-core/src/public/chained_ops/mirror_pad.ts","../../tfjs-core/src/public/chained_ops/mod.ts","../../tfjs-core/src/public/chained_ops/mul.ts","../../tfjs-core/src/public/chained_ops/neg.ts","../../tfjs-core/src/public/chained_ops/norm.ts","../../tfjs-core/src/public/chained_ops/not_equal.ts","../../tfjs-core/src/public/chained_ops/one_hot.ts","../../tfjs-core/src/public/chained_ops/ones_like.ts","../../tfjs-core/src/public/chained_ops/pad.ts","../../tfjs-core/src/public/chained_ops/pool.ts","../../tfjs-core/src/public/chained_ops/pow.ts","../../tfjs-core/src/public/chained_ops/prelu.ts","../../tfjs-core/src/public/chained_ops/prod.ts","../../tfjs-core/src/public/chained_ops/reciprocal.ts","../../tfjs-core/src/public/chained_ops/relu.ts","../../tfjs-core/src/public/chained_ops/relu6.ts","../../tfjs-core/src/public/chained_ops/reshape_as.ts","../../tfjs-core/src/public/chained_ops/reshape.ts","../../tfjs-core/src/public/chained_ops/resize_bilinear.ts","../../tfjs-core/src/public/chained_ops/resize_nearest_neighbor.ts","../../tfjs-core/src/public/chained_ops/reverse.ts","../../tfjs-core/src/public/chained_ops/rfft.ts","../../tfjs-core/src/public/chained_ops/round.ts","../../tfjs-core/src/public/chained_ops/rsqrt.ts","../../tfjs-core/src/public/chained_ops/selu.ts","../../tfjs-core/src/public/chained_ops/separable_conv2d.ts","../../tfjs-core/src/public/chained_ops/sigmoid.ts","../../tfjs-core/src/public/chained_ops/sign.ts","../../tfjs-core/src/public/chained_ops/sin.ts","../../tfjs-core/src/public/chained_ops/sinh.ts","../../tfjs-core/src/public/chained_ops/slice.ts","../../tfjs-core/src/public/chained_ops/softmax.ts","../../tfjs-core/src/public/chained_ops/softplus.ts","../../tfjs-core/src/public/chained_ops/space_to_batch_nd.ts","../../tfjs-core/src/public/chained_ops/split.ts","../../tfjs-core/src/public/chained_ops/sqrt.ts","../../tfjs-core/src/public/chained_ops/square.ts","../../tfjs-core/src/public/chained_ops/squared_difference.ts","../../tfjs-core/src/public/chained_ops/squeeze.ts","../../tfjs-core/src/public/chained_ops/stack.ts","../../tfjs-core/src/public/chained_ops/step.ts","../../tfjs-core/src/public/chained_ops/strided_slice.ts","../../tfjs-core/src/public/chained_ops/sub.ts","../../tfjs-core/src/public/chained_ops/sum.ts","../../tfjs-core/src/public/chained_ops/tan.ts","../../tfjs-core/src/public/chained_ops/tanh.ts","../../tfjs-core/src/public/chained_ops/tile.ts","../../tfjs-core/src/public/chained_ops/to_bool.ts","../../tfjs-core/src/public/chained_ops/to_float.ts","../../tfjs-core/src/public/chained_ops/to_int.ts","../../tfjs-core/src/public/chained_ops/topk.ts","../../tfjs-core/src/public/chained_ops/transpose.ts","../../tfjs-core/src/public/chained_ops/unique.ts","../../tfjs-core/src/public/chained_ops/unsorted_segment_sum.ts","../../tfjs-core/src/public/chained_ops/unstack.ts","../../tfjs-core/src/public/chained_ops/where.ts","../../tfjs-core/src/public/chained_ops/zeros_like.ts","../../tfjs-core/src/gradients/Abs_grad.ts","../../tfjs-core/src/gradients/Acos_grad.ts","../../tfjs-core/src/gradients/Acosh_grad.ts","../../tfjs-core/src/gradients/Add_grad.ts","../../tfjs-core/src/gradients/AddN_grad.ts","../../tfjs-core/src/gradients/ArgMax_grad.ts","../../tfjs-core/src/gradients/ArgMin_grad.ts","../../tfjs-core/src/gradients/Asin_grad.ts","../../tfjs-core/src/gradients/Asinh_grad.ts","../../tfjs-core/src/gradients/Atan2_grad.ts","../../tfjs-core/src/gradients/Atan_grad.ts","../../tfjs-core/src/gradients/Atanh_grad.ts","../../tfjs-core/src/ops/avg_pool_3d_grad.ts","../../tfjs-core/src/gradients/AvgPool3D_grad.ts","../../tfjs-core/src/ops/avg_pool_grad.ts","../../tfjs-core/src/gradients/AvgPool_grad.ts","../../tfjs-core/src/gradients/BatchMatMul_grad.ts","../../tfjs-core/src/gradients/BatchToSpaceND_grad.ts","../../tfjs-core/src/gradients/BroadcastTo_grad.ts","../../tfjs-core/src/gradients/Cast_grad.ts","../../tfjs-core/src/gradients/Ceil_grad.ts","../../tfjs-core/src/gradients/ClipByValue_grad.ts","../../tfjs-core/src/gradients/ComplexAbs_grad.ts","../../tfjs-core/src/gradients/Concat_grad.ts","../../tfjs-core/src/gradients/Conv2D_grad.ts","../../tfjs-core/src/gradients/Conv2DBackpropInput_grad.ts","../../tfjs-core/src/ops/conv3d_backprop_filter.ts","../../tfjs-core/src/gradients/Conv3D_grad.ts","../../tfjs-core/src/gradients/Cos_grad.ts","../../tfjs-core/src/gradients/Cosh_grad.ts","../../tfjs-core/src/gradients/Cumsum_grad.ts","../../tfjs-core/src/gradients/DepthwiseConv2dNative_grad.ts","../../tfjs-core/src/gradients/Dilation2D_grad.ts","../../tfjs-core/src/gradients/Elu_grad.ts","../../tfjs-core/src/gradients/Erf_grad.ts","../../tfjs-core/src/gradients/Exp_grad.ts","../../tfjs-core/src/gradients/ExpandDims_grad.ts","../../tfjs-core/src/gradients/Expm1_grad.ts","../../tfjs-core/src/gradients/Floor_grad.ts","../../tfjs-core/src/gradients/FloorDiv_grad.ts","../../tfjs-core/src/gradients/FusedBatchNorm_grad.ts","../../tfjs-core/src/gradients/GatherV2_grad.ts","../../tfjs-core/src/gradients/GreaterEqual_grad.ts","../../tfjs-core/src/gradients/Identity_grad.ts","../../tfjs-core/src/gradients/IsFinite_grad.ts","../../tfjs-core/src/gradients/IsInf_grad.ts","../../tfjs-core/src/gradients/IsNan_grad.ts","../../tfjs-core/src/gradients/LeakyRelu_grad.ts","../../tfjs-core/src/gradients/Log1p_grad.ts","../../tfjs-core/src/gradients/Log_grad.ts","../../tfjs-core/src/gradients/LogSoftmax_grad.ts","../../tfjs-core/src/ops/local_response_normalization_backprop.ts","../../tfjs-core/src/gradients/LRN_grad.ts","../../tfjs-core/src/gradients/min_max_grad_util.ts","../../tfjs-core/src/gradients/Max_grad.ts","../../tfjs-core/src/gradients/Maximum_grad.ts","../../tfjs-core/src/ops/max_pool_3d_grad.ts","../../tfjs-core/src/gradients/MaxPool3D_grad.ts","../../tfjs-core/src/ops/max_pool_grad.ts","../../tfjs-core/src/gradients/MaxPool_grad.ts","../../tfjs-core/src/gradients/Mean_grad.ts","../../tfjs-core/src/gradients/Min_grad.ts","../../tfjs-core/src/gradients/Minimum_grad.ts","../../tfjs-core/src/gradients/MirrorPad_grad.ts","../../tfjs-core/src/gradients/Mod_grad.ts","../../tfjs-core/src/gradients/Multiply_grad.ts","../../tfjs-core/src/gradients/Neg_grad.ts","../../tfjs-core/src/gradients/OneHot_grad.ts","../../tfjs-core/src/gradients/OnesLike_grad.ts","../../tfjs-core/src/gradients/Pack_grad.ts","../../tfjs-core/src/gradients/PadV2_grad.ts","../../tfjs-core/src/gradients/Pow_grad.ts","../../tfjs-core/src/gradients/Prelu_grad.ts","../../tfjs-core/src/gradients/Prod_grad.ts","../../tfjs-core/src/gradients/RealDiv_grad.ts","../../tfjs-core/src/gradients/Reciprocal_grad.ts","../../tfjs-core/src/gradients/Relu6_grad.ts","../../tfjs-core/src/gradients/Relu_grad.ts","../../tfjs-core/src/gradients/Reshape_grad.ts","../../tfjs-core/src/gradients/ResizeBilinear_grad.ts","../../tfjs-core/src/gradients/ResizeNearestNeighbor_grad.ts","../../tfjs-core/src/gradients/Reverse_grad.ts","../../tfjs-core/src/gradients/Round_grad.ts","../../tfjs-core/src/gradients/Rsqrt_grad.ts","../../tfjs-core/src/gradients/Select_grad.ts","../../tfjs-core/src/gradients/Selu_grad.ts","../../tfjs-core/src/gradients/Sigmoid_grad.ts","../../tfjs-core/src/gradients/Sign_grad.ts","../../tfjs-core/src/gradients/Sin_grad.ts","../../tfjs-core/src/gradients/Sinh_grad.ts","../../tfjs-core/src/gradients/Slice_grad.ts","../../tfjs-core/src/gradients/Softmax_grad.ts","../../tfjs-core/src/gradients/Softplus_grad.ts","../../tfjs-core/src/gradients/SpaceToBatchND_grad.ts","../../tfjs-core/src/gradients/SplitV_grad.ts","../../tfjs-core/src/gradients/Sqrt_grad.ts","../../tfjs-core/src/gradients/Square_grad.ts","../../tfjs-core/src/gradients/SquaredDifference_grad.ts","../../tfjs-core/src/gradients/Step_grad.ts","../../tfjs-core/src/gradients/Sub_grad.ts","../../tfjs-core/src/gradients/Sum_grad.ts","../../tfjs-core/src/gradients/Tan_grad.ts","../../tfjs-core/src/gradients/Tanh_grad.ts","../../tfjs-core/src/gradients/Tile_grad.ts","../../tfjs-core/src/gradients/Transpose_grad.ts","../../tfjs-core/src/gradients/Unpack_grad.ts","../../tfjs-core/src/gradients/UnsortedSegmentSum_grad.ts","../../tfjs-core/src/register_all_gradients.ts","../../tfjs-core/src/gradients/ZerosLike_grad.ts","../../tfjs-layers/src/errors.ts","../../tfjs-layers/src/utils/executor_utils.ts","../../tfjs-layers/src/utils/generic_utils.ts","../../tfjs-layers/src/backend/state.ts","../../tfjs-layers/src/keras_format/common.ts","../../tfjs-layers/src/common.ts","../../tfjs-layers/src/backend/common.ts","../../tfjs-layers/src/utils/math_utils.ts","../../tfjs-layers/src/backend/tfjs_backend.ts","../../tfjs-layers/src/keras_format/initializer_config.ts","../../tfjs-layers/src/initializers.ts","../../tfjs-layers/src/utils/types_utils.ts","../../tfjs-layers/src/utils/variable_utils.ts","../../tfjs-layers/src/variables.ts","../../tfjs-layers/src/engine/topology.ts","../../tfjs-layers/src/engine/input_layer.ts","../../tfjs-layers/src/engine/executor.ts","../../tfjs-layers/src/constraints.ts","../../tfjs-layers/src/flags_layers.ts","../../tfjs-layers/src/base_callbacks.ts","../../tfjs-layers/src/logs.ts","../../tfjs-layers/src/layers/serialization.ts","../../tfjs-layers/src/losses.ts","../../tfjs-layers/src/metrics.ts","../../tfjs-layers/src/user_defined_metadata.ts","../../tfjs-layers/src/utils/layer_utils.ts","../../tfjs-layers/src/utils/serialization_utils.ts","../../tfjs-layers/src/version.ts","../../tfjs-layers/src/engine/container.ts","../../tfjs-layers/src/engine/training_utils.ts","../../tfjs-layers/src/engine/training_dataset.ts","../../tfjs-layers/src/engine/training_tensors.ts","../../tfjs-layers/src/engine/training.ts","../../tfjs-layers/src/optimizers.ts","../../tfjs-layers/src/models.ts","../../tfjs-layers/src/exports.ts","../../tfjs-layers/src/activations.ts","../../tfjs-layers/src/regularizers.ts","../../tfjs-layers/src/layers/advanced_activations.ts","../../tfjs-layers/src/utils/conv_utils.ts","../../tfjs-layers/src/layers/convolutional.ts","../../tfjs-layers/src/layers/convolutional_depthwise.ts","../../tfjs-layers/src/layers/recurrent.ts","../../tfjs-layers/src/layers/convolutional_recurrent.ts","../../tfjs-layers/src/layers/core.ts","../../tfjs-layers/src/layers/embeddings.ts","../../tfjs-layers/src/layers/merge.ts","../../tfjs-layers/src/layers/noise.ts","../../tfjs-layers/src/layers/normalization.ts","../../tfjs-layers/src/layers/padding.ts","../../tfjs-layers/src/layers/pooling.ts","../../tfjs-layers/src/layers/wrappers.ts","../../tfjs-layers/src/layers/preprocessing/image_preprocessing.ts","../../tfjs-layers/src/layers/preprocessing/center_crop.ts","../../tfjs-layers/src/layers/preprocessing/category_encoding.ts","../../tfjs-layers/src/layers/preprocessing/preprocessing_utils.ts","../../tfjs-layers/src/layers/preprocessing/image_resizing.ts","../../tfjs-layers/src/exports_layers.ts","../../tfjs-layers/src/callbacks.ts","../../tfjs-converter/src/data/compiled_api.ts","../../tfjs-converter/src/flags.ts","../../tfjs-converter/src/version.ts","../../tfjs-data/src/util/deep_map.ts","../../tfjs-data/src/util/deep_clone.ts","../../tfjs-data/src/util/ring_buffer.ts","../../tfjs-data/src/util/growing_ring_buffer.ts","../../tfjs-data/src/iterators/lazy_iterator.ts","../../tfjs-data/src/dataset.ts","../../tfjs-data/src/datasets/csv_dataset.ts","../../tfjs-data/src/version.ts","../../tfjs-backend-cpu/src/backend_cpu.ts","../../tfjs-backend-cpu/src/base.ts","../../tfjs-backend-cpu/src/kernels/Elu.ts","../../tfjs-backend-cpu/src/kernels/LeakyRelu.ts","../../tfjs-backend-cpu/src/kernels/Prelu.ts","../../tfjs-backend-cpu/src/kernels/Relu.ts","../../tfjs-backend-cpu/src/kernels/Relu6.ts","../../tfjs-backend-cpu/src/utils/fused_utils.ts","../../tfjs-backend-cpu/src/kernels/Reshape.ts","../../tfjs-backend-cpu/src/kernels/BatchMatMul.ts","../../tfjs-backend-cpu/src/kernels/_FusedMatMul.ts","../../tfjs-backend-cpu/src/kernels/Acos.ts","../../tfjs-backend-cpu/src/kernels/Acosh.ts","../../tfjs-backend-cpu/src/kernels/AddN.ts","../../tfjs-backend-cpu/src/kernels/All.ts","../../tfjs-backend-cpu/src/kernels/Any.ts","../../tfjs-backend-cpu/src/kernels/ArgMax.ts","../../tfjs-backend-cpu/src/kernels/ArgMin.ts","../../tfjs-backend-cpu/src/kernels/Asin.ts","../../tfjs-backend-cpu/src/kernels/Asinh.ts","../../tfjs-backend-cpu/src/kernels/Atan.ts","../../tfjs-backend-cpu/src/kernels/Atan2.ts","../../tfjs-backend-cpu/src/kernels/Atanh.ts","../../tfjs-backend-cpu/src/utils/pool_utils.ts","../../tfjs-backend-cpu/src/kernels/AvgPool.ts","../../tfjs-backend-cpu/src/kernels/AvgPool3D.ts","../../tfjs-backend-cpu/src/kernels/AvgPool3DGrad.ts","../../tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts","../../tfjs-backend-cpu/src/kernels/BatchNorm.ts","../../tfjs-backend-cpu/src/kernels/BatchToSpaceND.ts","../../tfjs-backend-cpu/src/kernels/Bincount.ts","../../tfjs-backend-cpu/src/kernels/BroadcastArgs.ts","../../tfjs-backend-cpu/src/kernels/ClipByValue.ts","../../tfjs-backend-cpu/src/kernels/ComplexAbs.ts","../../tfjs-backend-cpu/src/kernels/Imag.ts","../../tfjs-backend-cpu/src/kernels/Concat.ts","../../tfjs-backend-cpu/src/kernels/Conv2D.ts","../../tfjs-backend-cpu/src/kernels/Conv2DBackpropFilter.ts","../../tfjs-backend-cpu/src/kernels/Conv2DBackpropInput.ts","../../tfjs-backend-cpu/src/kernels/Conv3D.ts","../../tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts","../../tfjs-backend-cpu/src/kernels/Conv3DBackpropInputV2.ts","../../tfjs-backend-cpu/src/kernels/Cos.ts","../../tfjs-backend-cpu/src/kernels/Cosh.ts","../../tfjs-backend-cpu/src/kernels/CropAndResize.ts","../../tfjs-backend-cpu/src/kernels/Cumprod.ts","../../tfjs-backend-cpu/src/kernels/Cumsum.ts","../../tfjs-backend-cpu/src/kernels/DenseBincount.ts","../../tfjs-backend-cpu/src/kernels/DepthToSpace.ts","../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNative.ts","../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../tfjs-backend-cpu/src/kernels/Diag.ts","../../tfjs-backend-cpu/src/kernels/Dilation2D.ts","../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropFilter.ts","../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropInput.ts","../../tfjs-backend-cpu/src/kernels/Sum.ts","../../tfjs-backend-cpu/src/kernels/Einsum.ts","../../tfjs-backend-cpu/src/kernels/EluGrad.ts","../../tfjs-backend-cpu/src/kernels/Erf.ts","../../tfjs-backend-cpu/src/kernels/ExpandDims.ts","../../tfjs-backend-cpu/src/kernels/RealDiv.ts","../../tfjs-backend-cpu/src/utils/fft_utils.ts","../../tfjs-backend-cpu/src/kernels/FFT.ts","../../tfjs-backend-cpu/src/kernels/Fill.ts","../../tfjs-backend-cpu/src/kernels/FlipLeftRight.ts","../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../tfjs-backend-cpu/src/kernels/FusedConv2D.ts","../../tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts","../../tfjs-backend-cpu/src/kernels/GatherNd.ts","../../tfjs-backend-cpu/src/kernels/GatherV2.ts","../../tfjs-backend-cpu/src/kernels/IFFT.ts","../../tfjs-backend-cpu/src/kernels/IsFinite.ts","../../tfjs-backend-cpu/src/kernels/IsInf.ts","../../tfjs-backend-cpu/src/kernels/IsNaN.ts","../../tfjs-backend-cpu/src/kernels/LinSpace.ts","../../tfjs-backend-cpu/src/kernels/Log1p.ts","../../tfjs-backend-cpu/src/kernels/LogicalAnd.ts","../../tfjs-backend-cpu/src/kernels/LogicalNot.ts","../../tfjs-backend-cpu/src/kernels/LogicalOr.ts","../../tfjs-backend-cpu/src/kernels/LRN.ts","../../tfjs-backend-cpu/src/kernels/LRNGrad.ts","../../tfjs-backend-cpu/src/kernels/Max.ts","../../tfjs-backend-cpu/src/kernels/MaxPool.ts","../../tfjs-backend-cpu/src/kernels/MaxPool3D.ts","../../tfjs-backend-cpu/src/kernels/MaxPool3DGrad.ts","../../tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts","../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts","../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax_impl.ts","../../tfjs-backend-cpu/src/kernels/Mean.ts","../../tfjs-backend-cpu/src/kernels/Min.ts","../../tfjs-backend-cpu/src/kernels/MirrorPad.ts","../../tfjs-backend-cpu/src/kernels/Mod.ts","../../tfjs-backend-cpu/src/kernels/Softmax.ts","../../tfjs-backend-cpu/src/kernels/Multinomial.ts","../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV3.ts","../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV4.ts","../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV5.ts","../../tfjs-backend-cpu/src/kernels/OneHot.ts","../../tfjs-backend-cpu/src/kernels/ZerosLike.ts","../../tfjs-backend-cpu/src/kernels/OnesLike.ts","../../tfjs-backend-cpu/src/kernels/Pack.ts","../../tfjs-backend-cpu/src/kernels/PadV2.ts","../../tfjs-backend-cpu/src/kernels/Pow.ts","../../tfjs-backend-cpu/src/kernels/RaggedGather.ts","../../tfjs-backend-cpu/src/kernels/RaggedRange.ts","../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor.ts","../../tfjs-backend-cpu/src/kernels/Range.ts","../../tfjs-backend-cpu/src/kernels/Reciprocal.ts","../../tfjs-backend-cpu/src/kernels/ResizeBilinear.ts","../../tfjs-backend-cpu/src/kernels/ResizeBilinearGrad.ts","../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighbor.ts","../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighborGrad.ts","../../tfjs-backend-cpu/src/kernels/Reverse.ts","../../tfjs-backend-cpu/src/kernels/RotateWithOffset.ts","../../tfjs-backend-cpu/src/kernels/Round.ts","../../tfjs-backend-cpu/src/kernels/ScatterNd.ts","../../tfjs-backend-cpu/src/kernels/SearchSorted_impl.ts","../../tfjs-backend-cpu/src/kernels/SearchSorted.ts","../../tfjs-backend-cpu/src/kernels/Select.ts","../../tfjs-backend-cpu/src/kernels/Selu.ts","../../tfjs-backend-cpu/src/kernels/Sign.ts","../../tfjs-backend-cpu/src/kernels/Sin.ts","../../tfjs-backend-cpu/src/kernels/Sinh.ts","../../tfjs-backend-cpu/src/kernels/Softplus.ts","../../tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts","../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows.ts","../../tfjs-backend-cpu/src/kernels/SparseReshape.ts","../../tfjs-backend-cpu/src/kernels/SparseSegmentMean.ts","../../tfjs-backend-cpu/src/kernels/SparseSegmentSum.ts","../../tfjs-backend-cpu/src/kernels/SparseToDense.ts","../../tfjs-backend-cpu/src/kernels/SplitV.ts","../../tfjs-backend-cpu/src/kernels/Square.ts","../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../tfjs-backend-cpu/src/kernels/Step.ts","../../tfjs-backend-cpu/src/kernels/StridedSlice.ts","../../tfjs-backend-cpu/src/kernels/StringNGrams.ts","../../tfjs-backend-cpu/src/kernels/StringSplit.ts","../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast.ts","../../tfjs-backend-cpu/src/kernels/Tan.ts","../../tfjs-backend-cpu/src/kernels/Tanh.ts","../../tfjs-backend-cpu/src/kernels/Tile.ts","../../tfjs-backend-cpu/src/kernels/TopK.ts","../../tfjs-backend-cpu/src/kernels/Transform.ts","../../tfjs-backend-cpu/src/kernels/Unique.ts","../../tfjs-backend-cpu/src/kernels/Unpack.ts","../../tfjs-backend-cpu/src/register_all_kernels.ts","../../tfjs-backend-cpu/src/kernels/UnsortedSegmentSum.ts","../node_modules/@tensorflow/tfjs/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {abs} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    abs<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.abs = function<T extends Tensor>(this: T) {\n  this.throwIfDisposed();\n  return abs(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {acos} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    acos<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.acos = function<T extends Tensor>(this: T) {\n  this.throwIfDisposed();\n  return acos(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {acosh} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    acosh<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.acosh = function<T extends Tensor>(this: T) {\n  this.throwIfDisposed();\n  return acosh(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {add} from '../../ops/add';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    add<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.add = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return add(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {all} from '../../ops/all';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    all<T extends Tensor>(this: T, axis?: number|number[], keepDims?: boolean):\n        T;\n  }\n}\n\ngetGlobalTensorClass().prototype.all = function<T extends Tensor>(\n    this: T, axis?: number|number[], keepDims?: boolean): T {\n  this.throwIfDisposed();\n  return all(this, axis, keepDims);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {any} from '../../ops/any';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    any<T extends Tensor>(this: T, axis?: number|number[], keepDims?: boolean):\n        T;\n  }\n}\n\ngetGlobalTensorClass().prototype.any = function<T extends Tensor>(\n    this: T, axis?: number|number[], keepDims?: boolean): T {\n  this.throwIfDisposed();\n  return any(this, axis, keepDims);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {argMax} from '../../ops/arg_max';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    argMax<T extends Tensor>(axis?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.argMax = function<T extends Tensor>(\n    axis?: number): T {\n  this.throwIfDisposed();\n  return argMax(this, axis);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {argMin} from '../../ops/arg_min';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    argMin<T extends Tensor>(axis?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.argMin = function<T extends Tensor>(\n    axis: number): T {\n  this.throwIfDisposed();\n  return argMin(this, axis);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Scalar, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\nimport {assert} from '../../util';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    asScalar<T extends Tensor>(): Scalar;\n  }\n}\n\n/**\n * Converts a size-1 `tf.Tensor` to a `tf.Scalar`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.asScalar = function<T extends Tensor>(this: T):\n    Scalar {\n  this.throwIfDisposed();\n  assert(this.size === 1, () => 'The array must have only 1 element.');\n  return reshape(this, []);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {cast} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {DataType, Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    asType<T extends Tensor>(this: T, dtype: DataType): T;\n  }\n}\n\n/**\n * Casts a `tf.Tensor` to a specified dtype.\n *\n * @param dtype Data-type to cast the tensor to.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.asType = function<T extends Tensor>(\n    this: T, dtype: DataType): T {\n  this.throwIfDisposed();\n  return cast<T>(this, dtype);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    as1D<T extends Tensor>(): Tensor1D;\n  }\n}\n\n/**\n * Converts a `tf.Tensor` to a `tf.Tensor1D`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.as1D = function<T extends Tensor>(): T {\n  this.throwIfDisposed();\n  return reshape(this, [this.size]) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    as2D<T extends Tensor>(rows: number, columns: number): Tensor2D;\n  }\n}\n\n/**\n * Converts a `tf.Tensor` to a `tf.Tensor2D`.\n *\n * @param rows Number of rows in `tf.Tensor2D`.\n * @param columns Number of columns in `tf.Tensor2D`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.as2D = function<T extends Tensor>(\n    rows: number, columns: number): T {\n  this.throwIfDisposed();\n  return reshape(this, [rows, columns]) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    as3D<T extends Tensor>(rows: number, columns: number, depth: number):\n        Tensor3D;\n  }\n}\n\n/**\n * Converts a `tf.Tensor` to a `tf.Tensor3D`.\n *\n * @param rows Number of rows in `tf.Tensor3D`.\n * @param columns Number of columns in `tf.Tensor3D`.\n * @param depth Depth of `tf.Tensor3D`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.as3D = function<T extends Tensor>(\n    rows: number, columns: number, depth: number): T {\n  this.throwIfDisposed();\n  return reshape(this, [rows, columns, depth]) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    as4D<T extends Tensor>(\n        rows: number, columns: number, depth: number, depth2: number): Tensor4D;\n  }\n}\n\n/**\n * Converts a `tf.Tensor` to a `tf.Tensor4D`.\n *\n * @param rows Number of rows in `tf.Tensor4D`.\n * @param columns Number of columns in `tf.Tensor4D`.\n * @param depth Depth of `tf.Tensor4D`.\n * @param depth2 4th dimension of `tf.Tensor4D`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.as4D = function<T extends Tensor>(\n    rows: number, columns: number, depth: number, depth2: number): T {\n  this.throwIfDisposed();\n  return reshape(this, [rows, columns, depth, depth2]) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    as5D<T extends Tensor>(\n        rows: number, columns: number, depth: number, depth2: number,\n        depth3: number): Tensor5D;\n  }\n}\n\n/**\n * Converts a `tf.Tensor` to a `tf.Tensor5D`.\n *\n * @param rows Number of rows in `tf.Tensor5D`.\n * @param columns Number of columns in `tf.Tensor5D`.\n * @param depth Depth of `tf.Tensor5D`.\n * @param depth2 4th dimension of `tf.Tensor5D`.\n * @param depth3 5th dimension of 'tf.Tensor5D'\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.as5D = function<T extends Tensor>(\n    rows: number, columns: number, depth: number, depth2: number,\n    depth3: number): T {\n  this.throwIfDisposed();\n  return reshape(this, [rows, columns, depth, depth2, depth3]) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {asin} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    asin<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.asin = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return asin(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {asinh} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    asinh<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.asinh = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return asinh(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {atan} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    atan<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.atan = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return atan(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {atan2} from '../../ops/atan2';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    atan2<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.atan2 = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return atan2(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {atanh} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    atanh<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.atanh = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return atanh(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ExplicitPadding} from '../../ops/conv_util';\nimport {avgPool} from '../../ops/avg_pool';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    avgPool<T extends Tensor3D|Tensor4D>(\n        filterSize: [number, number]|number, strides: [number, number]|number,\n        pad: 'valid'|'same'|number|ExplicitPadding,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.avgPool =\n    function<T extends Tensor3D|Tensor4D>(\n        this: T, filterSize: [number, number]|number,\n        strides: [number, number]|number,\n        pad: 'valid'|'same'|number|ExplicitPadding,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  this.throwIfDisposed();\n  return avgPool(this, filterSize, strides, pad, dimRoundingMode);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {batchToSpaceND} from '../../ops/batch_to_space_nd';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    batchToSpaceND<R extends Rank>(blockShape: number[], crops: number[][]):\n        Tensor<R>;\n  }\n}\n\ngetGlobalTensorClass().prototype.batchToSpaceND = function<R extends Rank>(\n    blockShape: number[], crops: number[][]): Tensor<R> {\n  this.throwIfDisposed();\n  return batchToSpaceND(this, blockShape, crops);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {batchNorm} from '../../ops/batchnorm';\nimport {getGlobalTensorClass, Tensor, Tensor1D} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    batchNorm<T extends Tensor>(\n        mean: Tensor<R>|Tensor1D|TensorLike,\n        variance: Tensor<R>|Tensor1D|TensorLike,\n        offset?: Tensor<R>|Tensor1D|TensorLike,\n        scale?: Tensor<R>|Tensor1D|TensorLike,\n        varianceEpsilon?: number): Tensor<R>;\n  }\n}\n\ngetGlobalTensorClass().prototype.batchNorm = function<R extends Rank>(\n    mean: Tensor<R>|Tensor1D|TensorLike,\n    variance: Tensor<R>|Tensor1D|TensorLike,\n    offset?: Tensor<R>|Tensor1D|TensorLike,\n    scale?: Tensor<R>|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor<R> {\n  this.throwIfDisposed();\n  return batchNorm(this, mean, variance, offset, scale, varianceEpsilon);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {broadcastTo} from '../../ops/broadcast_to';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, ShapeMap} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    broadcastTo<R extends Rank>(shape: ShapeMap[R]): Tensor<R>;\n  }\n}\n\ngetGlobalTensorClass().prototype.broadcastTo = function<R extends Rank>(\n    shape: ShapeMap[R]): Tensor<R> {\n  this.throwIfDisposed();\n  return broadcastTo(this, shape);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {cast} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {DataType, Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    cast<T extends Tensor>(dtype: DataType): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.cast = function<T extends Tensor>(\n    dtype: DataType): T {\n  this.throwIfDisposed();\n  return cast(this, dtype) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {ceil} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    ceil<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.ceil = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return ceil(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {clipByValue} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    clipByValue<T extends Tensor>(min: number, max: number): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.clipByValue = function<T extends Tensor>(\n    min: number, max: number): T {\n  this.throwIfDisposed();\n  return clipByValue(this, min, max) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {concat} from '../../ops/concat';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    concat<T extends Tensor>(tensors: T|Array<T|TensorLike>, axis?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.concat = function<T extends Tensor>(\n    x: T|Array<T|TensorLike>, axis?: number): T {\n  this.throwIfDisposed();\n  if (x instanceof Tensor) {\n    x = [x];\n  }\n  return concat([this, ...x], axis) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {conv1d} from '../../ops/conv1d';\nimport {ExplicitPadding} from '../../ops/conv_util';\nimport {getGlobalTensorClass, Tensor2D, Tensor3D} from '../../tensor';\nimport {Rank, TensorLike3D} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    conv1d<T extends Tensor2D|Tensor3D>(\n        filter: Tensor3D|TensorLike3D, stride: number,\n        pad: 'valid'|'same'|number|ExplicitPadding, dataFormat?: 'NWC'|'NCW',\n        dilation?: number, dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.conv1d = function<T extends Tensor2D|Tensor3D>(\n    filter: Tensor3D|TensorLike3D, stride: number,\n    pad: 'valid'|'same'|number|ExplicitPadding, dataFormat?: 'NWC'|'NCW',\n    dilation?: number, dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  this.throwIfDisposed();\n  return conv1d(\n             this, filter, stride, pad, dataFormat, dilation,\n             dimRoundingMode) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {conv2dTranspose} from '../../ops/conv2d_transpose';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank, TensorLike4D} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    conv2dTranspose<T extends Tensor3D|Tensor4D>(\n        filter: Tensor4D|TensorLike4D,\n        outputShape: [number, number, number, number]|[number, number, number],\n        strides: [number, number]|number, pad: 'valid'|'same'|number,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.conv2dTranspose =\n    function<T extends Tensor3D|Tensor4D>(\n        filter: Tensor4D|TensorLike4D,\n        outputShape: [number, number, number, number]|[number, number, number],\n        strides: [number, number]|number, pad: 'valid'|'same'|number,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  this.throwIfDisposed();\n  return conv2dTranspose(\n             this, filter, outputShape, strides, pad, dimRoundingMode) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {conv2d} from '../../ops/conv2d';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank, TensorLike4D} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    conv2d<T extends Tensor3D|Tensor4D>(\n        filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n        pad: 'valid'|'same'|number, dataFormat?: 'NHWC'|'NCHW',\n        dilations?: [number, number]|number,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.conv2d = function<T extends Tensor3D|Tensor4D>(\n    filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n    pad: 'valid'|'same'|number, dataFormat?: 'NHWC'|'NCHW',\n    dilations?: [number, number]|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  this.throwIfDisposed();\n  return conv2d(\n             this, filter, strides, pad, dataFormat, dilations,\n             dimRoundingMode) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {cos} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    cos<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.cos = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return cos(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {cosh} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    cosh<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.cosh = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return cosh(this);\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { cumprod } from '../../ops/cumprod';\nimport { getGlobalTensorClass, Tensor } from '../../tensor';\nimport { Rank } from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    cumprod<R extends Rank>(\n      axis?: number,\n      exclusive?: boolean,\n      reverse?: boolean\n    ): Tensor<R>;\n  }\n}\n\ngetGlobalTensorClass().prototype.cumprod = function <R extends Rank>(\n  axis?: number,\n  exclusive?: boolean,\n  reverse?: boolean\n): Tensor<R> {\n  this.throwIfDisposed();\n  return cumprod(this, axis, exclusive, reverse);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {cumsum} from '../../ops/cumsum';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    cumsum<R extends Rank>(\n        axis?: number, exclusive?: boolean, reverse?: boolean): Tensor<R>;\n  }\n}\n\ngetGlobalTensorClass().prototype.cumsum = function<R extends Rank>(\n    axis?: number, exclusive?: boolean, reverse?: boolean): Tensor<R> {\n  this.throwIfDisposed();\n  return cumsum(this, axis, exclusive, reverse);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {depthToSpace} from '../../ops/depth_to_space';\nimport {getGlobalTensorClass, Tensor4D} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    depthToSpace<T extends Tensor4D>(\n        blockSize: number, dataFormat: 'NHWC'|'NCHW'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.depthToSpace = function<T extends Tensor4D>(\n    blockSize: number, dataFormat: 'NHWC'|'NCHW'): T {\n  this.throwIfDisposed();\n  return depthToSpace(this, blockSize, dataFormat) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {depthwiseConv2d} from '../../ops/depthwise_conv2d';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank, TensorLike4D} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    depthwiseConv2d<T extends Tensor3D|Tensor4D>(\n        filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n        pad: 'valid'|'same'|number, dataFormat?: 'NHWC'|'NCHW',\n        dilations?: [number, number]|number,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.depthwiseConv2d =\n    function<T extends Tensor3D|Tensor4D>(\n        filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n        pad: 'valid'|'same'|number, dataFormat?: 'NHWC'|'NCHW',\n        dilations?: [number, number]|number,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  this.throwIfDisposed();\n  return depthwiseConv2d(\n             this, filter, strides, pad, dataFormat, dilations,\n             dimRoundingMode) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {dilation2d} from '../../ops/dilation2d';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank, TensorLike3D} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    dilation2d<T extends Tensor3D|Tensor4D>(\n        filter: Tensor3D|TensorLike3D, strides: [number, number]|number,\n        pad: 'valid'|'same', dilations?: [number, number]|number,\n        dataFormat?: 'NHWC'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.dilation2d =\n    function<T extends Tensor3D|Tensor4D>(\n        filter: Tensor3D|TensorLike3D, strides: [number, number]|number,\n        pad: 'valid'|'same', dilations?: [number, number]|number,\n        dataFormat?: 'NHWC'): T {\n  this.throwIfDisposed();\n  return dilation2d(this, filter, strides, pad, dilations, dataFormat) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {divNoNan} from '../../ops/div_no_nan';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    divNoNan<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.divNoNan = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return divNoNan(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {div} from '../../ops/div';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    div<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.div = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return div(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {dot} from '../../ops/dot';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    dot<T extends Tensor>(b: Tensor|TensorLike): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.dot = function<T extends Tensor>(\n    b: T|TensorLike): Tensor {\n  this.throwIfDisposed();\n  return dot(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {elu} from '../../ops/elu';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    elu<T extends Tensor>(): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.elu = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return elu(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {equal} from '../../ops/equal';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    equal<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.equal = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return equal(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {erf} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    erf<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.erf = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return erf(this);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {euclideanNorm} from '../../ops/euclidean_norm';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    euclideanNorm<T extends Tensor>(\n        this: T, axis?: number|number[], keepDims?: boolean): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.euclideanNorm = function<T extends Tensor>(\n    this: T, axis?: number|number[], keepDims?: boolean): T {\n  this.throwIfDisposed();\n  return euclideanNorm(this, axis, keepDims) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {exp} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    exp<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.exp = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return exp(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {expandDims} from '../../ops/expand_dims';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    expandDims<T extends Tensor>(axis?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.expandDims = function<T extends Tensor>(\n    axis?: number): T {\n  this.throwIfDisposed();\n  return expandDims(this, axis);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {expm1} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    expm1<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.expm1 = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return expm1(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {fft} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    fft<T extends Tensor>(this: Tensor): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.fft = function<T extends Tensor>(this: Tensor):\n    T {\n  this.throwIfDisposed();\n  return fft(this) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    flatten<T extends Tensor>(): Tensor1D;\n  }\n}\n\n/**\n * Flatten a Tensor to a 1D array.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.flatten = function<T extends Tensor>(): T {\n  this.throwIfDisposed();\n  return reshape(this, [this.size]) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {floor} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    floor<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.floor = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return floor(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {floorDiv} from '../../ops/floorDiv';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    floorDiv<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.floorDiv = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return floorDiv(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {gather} from '../../ops/gather';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    gather<T extends Tensor>(\n        this: T, indices: Tensor|TensorLike, axis?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.gather = function<T extends Tensor>(\n    this: T, indices: Tensor|TensorLike, axis?: number): T {\n  this.throwIfDisposed();\n  return gather(this, indices, axis);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {greaterEqual} from '../../ops/greater_equal';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    greaterEqual<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.greaterEqual = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return greaterEqual(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {greater} from '../../ops/greater';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    greater<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.greater = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return greater(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {ifft} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    ifft<T extends Tensor>(this: Tensor): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.ifft = function<T extends Tensor>(\n    this: Tensor): T {\n  this.throwIfDisposed();\n  return ifft(this) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {irfft} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    irfft<T extends Tensor>(this: Tensor): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.irfft = function<T extends Tensor>(\n    this: Tensor): T {\n  this.throwIfDisposed();\n  return irfft(this) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {isFinite} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    isFinite<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.isFinite = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return isFinite(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {isInf} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    isInf<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.isInf = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return isInf(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {isNaN} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    isNaN<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.isNaN = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return isNaN(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {leakyRelu} from '../../ops/leaky_relu';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    leakyRelu<T extends Tensor>(alpha: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.leakyRelu = function<T extends Tensor>(\n    this: T, alpha: number): T {\n  this.throwIfDisposed();\n  return leakyRelu(this, alpha);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {lessEqual} from '../../ops/less_equal';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    lessEqual<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.lessEqual = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return lessEqual(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {less} from '../../ops/less';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    less<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.less = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return less(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {localResponseNormalization} from '../../ops/local_response_normalization';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    localResponseNormalization<T extends Tensor>(\n        depthRadius?: number, bias?: number, alpha?: number, beta?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.localResponseNormalization =\n    function<T extends Tensor>(\n        depthRadius?: number, bias?: number, alpha?: number, beta?: number): T {\n  this.throwIfDisposed();\n  return localResponseNormalization(this, depthRadius, bias, alpha, beta) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {logSigmoid} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    logSigmoid<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.logSigmoid = function<T extends Tensor>(\n    this: T): T {\n  this.throwIfDisposed();\n  return logSigmoid(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {logSoftmax} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    logSoftmax<T extends Tensor>(this: T, axis?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.logSoftmax = function<T extends Tensor>(\n    this: T, axis?: number): T {\n  this.throwIfDisposed();\n  return logSoftmax(this, axis);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {logSumExp} from '../../ops/log_sum_exp';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    logSumExp<T extends Tensor>(\n        this: T, axis?: number|number[], keepDims?: boolean): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.logSumExp = function<T extends Tensor>(\n    this: T, axis?: number|number[], keepDims?: boolean): T {\n  this.throwIfDisposed();\n  return logSumExp(this, axis, keepDims);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {log} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    log<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.log = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return log(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {log1p} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    log1p<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.log1p = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return log1p(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {logicalAnd} from '../../ops/logical_and';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    logicalAnd<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.logicalAnd = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return logicalAnd(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {logicalNot} from '../../ops/logical_not';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    logicalNot<T extends Tensor>(): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.logicalNot = function<T extends Tensor>(): T {\n  this.throwIfDisposed();\n  return logicalNot(this) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {logicalOr} from '../../ops/logical_or';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    logicalOr<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.logicalOr = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return logicalOr(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {logicalXor} from '../../ops/logical_xor';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    logicalXor<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.logicalXor = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return logicalXor(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {matMul} from '../../ops/mat_mul';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    matMul<T extends Tensor>(\n        b: Tensor|TensorLike, transposeA?: boolean,\n        transposeB?: boolean): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.matMul = function<T extends Tensor>(\n    this: T, b: Tensor|TensorLike, transposeA?: boolean,\n    transposeB?: boolean): Tensor {\n  this.throwIfDisposed();\n  return matMul(this, b, transposeA, transposeB);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ExplicitPadding} from '../../ops/conv_util';\nimport {maxPool} from '../../ops/max_pool';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    maxPool<T extends Tensor3D|Tensor4D>(\n        filterSize: [number, number]|number, strides: [number, number]|number,\n        pad: 'valid'|'same'|number|ExplicitPadding,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.maxPool =\n    function<T extends Tensor3D|Tensor4D>(\n        this: T, filterSize: [number, number]|number,\n        strides: [number, number]|number,\n        pad: 'valid'|'same'|number|ExplicitPadding,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  this.throwIfDisposed();\n  return maxPool(this, filterSize, strides, pad, dimRoundingMode);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {max} from '../../ops/max';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    max<T extends Tensor>(axis?: number|number[], keepDims?: boolean): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.max = function<T extends Tensor>(\n    axis?: number|number[], keepDims?: boolean): T {\n  this.throwIfDisposed();\n  return max(this, axis, keepDims);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {maximum} from '../../ops/maximum';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    maximum<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.maximum = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return maximum(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {mean} from '../../ops/mean';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    mean<T extends Tensor>(axis?: number|number[], keepDims?: boolean): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.mean = function<T extends Tensor>(\n    axis?: number|number[], keepDims?: boolean): T {\n  this.throwIfDisposed();\n  return mean(this, axis, keepDims);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {min} from '../../ops/min';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    min<T extends Tensor>(axis?: number|number[], keepDims?: boolean): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.min = function<T extends Tensor>(\n    axis?: number|number[], keepDims?: boolean): T {\n  this.throwIfDisposed();\n  return min(this, axis, keepDims);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {minimum} from '../../ops/minimum';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    minimum<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.minimum = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return minimum(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {mirrorPad} from '../../ops/mirror_pad';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    mirrorPad<T extends Tensor>(\n        paddings: Array<[number, number]>, mode: 'reflect'|'symmetric'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.mirrorPad = function<T extends Tensor>(\n    this: T, paddings: Array<[number, number]>,\n    mode: 'reflect'|'symmetric'): T {\n  this.throwIfDisposed();\n  return mirrorPad(this, paddings, mode);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {mod} from '../../ops/mod';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    mod<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.mod = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return mod(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {mul} from '../../ops/mul';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    mul<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.mul = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return mul(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {neg} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    neg<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.neg = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return neg(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {norm} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    norm<T extends Tensor>(\n        ord?: number|'euclidean'|'fro', axis?: number|number[],\n        keepDims?: boolean): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.norm = function<T extends Tensor>(\n    ord?: number|'euclidean'|'fro', axis?: number|number[],\n    keepDims?: boolean) {\n  this.throwIfDisposed();\n  return norm(this, ord, axis, keepDims) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {notEqual} from '../../ops/not_equal';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    notEqual<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.notEqual = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return notEqual(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {oneHot} from '../../ops/one_hot';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    oneHot(depth: number, onValue: number, offValue: number): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.oneHot = function(\n    depth: number, onValue = 1, offValue = 0): Tensor {\n  this.throwIfDisposed();\n  return oneHot(this, depth, onValue, offValue);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {onesLike} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    onesLike<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.onesLike = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return onesLike(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {pad} from '../../ops/pad';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    pad<T extends Tensor>(\n        paddings: Array<[number, number]>, constantValue?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.pad = function<T extends Tensor>(\n    this: T, paddings: Array<[number, number]>, constantValue: number): T {\n  this.throwIfDisposed();\n  return pad(this, paddings, constantValue);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ExplicitPadding} from '../../ops/conv_util';\nimport {pool} from '../../ops/pool';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    pool<T extends Tensor3D|Tensor4D>(\n        windowShape: [number, number]|number, poolingType: 'avg'|'max',\n        padding: 'valid'|'same'|number|ExplicitPadding,\n        diationRate?: [number, number]|number,\n        strides?: [number, number]|number,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.pool = function<T extends Tensor3D|Tensor4D>(\n    this: T, windowShape: [number, number]|number, poolingType: 'max'|'avg',\n    padding: 'valid'|'same'|number|ExplicitPadding,\n    dilationRate?: [number, number]|number,\n    strides?: [number, number]|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  this.throwIfDisposed();\n  return pool(this, windowShape, poolingType, padding, dilationRate, strides,\n              dimRoundingMode);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {pow} from '../../ops/pow';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    pow<T extends Tensor>(exp: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.pow = function<T extends Tensor>(\n    exp: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return pow(this, exp);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {prelu} from '../../ops/prelu';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    prelu<T extends Tensor>(alpha: T|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.prelu = function<T extends Tensor>(\n    this: T, alpha: T|TensorLike): T {\n  this.throwIfDisposed();\n  return prelu(this, alpha);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {prod} from '../../ops/prod';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    prod<T extends Tensor>(this: T, axis?: number|number[], keepDims?: boolean):\n        T;\n  }\n}\n\ngetGlobalTensorClass().prototype.prod = function<T extends Tensor>(\n    this: T, axis?: number|number[], keepDims?: boolean): T {\n  this.throwIfDisposed();\n  return prod(this, axis, keepDims);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {reciprocal} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    reciprocal<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.reciprocal = function<T extends Tensor>(\n    this: T): T {\n  this.throwIfDisposed();\n  return reciprocal(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {relu} from '../../ops/relu';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    relu<T extends Tensor>(): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.relu = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return relu(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {relu6} from '../../ops/relu6';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    relu6<T extends Tensor>(): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.relu6 = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return relu6(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    reshapeAs<T extends Tensor>(x: T): T;\n  }\n}\n\n/**\n * Reshapes the tensor into the shape of the provided tensor.\n *\n * @param x The tensor of required shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.reshapeAs = function<T extends Tensor>(x: T):\n    T {\n  this.throwIfDisposed();\n  return reshape(this, x.shape) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    reshape<T extends Tensor>(shape: number[]): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.reshape = function<T extends Tensor>(\n    shape: number[]): T {\n  this.throwIfDisposed();\n  return reshape(this, shape) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {resizeBilinear} from '../../ops/image/resize_bilinear';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    resizeBilinear<T extends Tensor3D|Tensor4D>(\n        newShape2D: [number, number], alignCorners?: boolean,\n        halfPixelCenters?: boolean): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.resizeBilinear =\n    function<T extends Tensor3D|Tensor4D>(\n        this: T, newShape2D: [number, number], alignCorners?: boolean,\n        halfPixelCenters?: boolean): T {\n  this.throwIfDisposed();\n  return resizeBilinear(this, newShape2D, alignCorners, halfPixelCenters);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {resizeNearestNeighbor} from '../../ops/image/resize_nearest_neighbor';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    resizeNearestNeighbor<T extends Tensor3D|Tensor4D>(\n        newShape2D: [number, number], alignCorners?: boolean,\n        halfFloatCenters?: boolean): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.resizeNearestNeighbor =\n    function<T extends Tensor3D|Tensor4D>(\n        this: T, newShape2D: [number, number], alignCorners?: boolean,\n        halfFloatCenters?: boolean): T {\n  this.throwIfDisposed();\n  return resizeNearestNeighbor(\n      this, newShape2D, alignCorners, halfFloatCenters);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {reverse} from '../../ops/reverse';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    reverse<T extends Tensor>(this: T, axis?: number|number[]): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.reverse = function<T extends Tensor>(\n    this: T, axis?: number|number[]): T {\n  this.throwIfDisposed();\n  return reverse(this, axis);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {rfft} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    rfft<T extends Tensor>(this: Tensor): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.rfft = function<T extends Tensor>(\n    this: Tensor): T {\n  this.throwIfDisposed();\n  return rfft(this) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {round} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    round<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.round = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return round(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {rsqrt} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    rsqrt<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.rsqrt = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return rsqrt(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {selu} from '../../ops/selu';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    selu<T extends Tensor>(): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.selu = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return selu(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {separableConv2d} from '../../ops/separable_conv2d';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank, TensorLike, TensorLike4D} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    separableConv2d<T extends Tensor3D|Tensor4D>(\n        depthwiseFilter: Tensor4D|TensorLike4D,\n        pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n        pad: 'valid'|'same', dilation?: [number, number]|number,\n        dataFormat?: 'NHWC'|'NCHW'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.separableConv2d =\n    function<T extends Tensor3D|Tensor4D>(\n        depthwiseFilter: Tensor4D|TensorLike4D,\n        pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n        pad: 'valid'|'same', dilation?: [number, number]|number,\n        dataFormat?: 'NHWC'|'NCHW'): T {\n  this.throwIfDisposed();\n  return separableConv2d(\n             this, depthwiseFilter, pointwiseFilter, strides, pad, dilation,\n             dataFormat) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {sigmoid} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    sigmoid<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.sigmoid = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return sigmoid(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {sign} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    sign<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.sign = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return sign(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {sin} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    sin<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.sin = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return sin(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {sinh} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    sinh<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.sinh = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return sinh(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {slice} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    slice<T extends Tensor>(\n        this: T, begin: number|number[], size?: number|number[]): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.slice = function<T extends Tensor>(\n    this: T, begin: number|number[], size?: number|number[]): T {\n  this.throwIfDisposed();\n  return slice(this, begin, size);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {softmax} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    softmax<T extends Tensor>(this: T, dim?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.softmax = function<T extends Tensor>(\n    this: T, dim: number): T {\n  this.throwIfDisposed();\n  return softmax(this, dim);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {softplus} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    softplus<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.softplus = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return softplus(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {spaceToBatchND} from '../../ops/space_to_batch_nd';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    spaceToBatchND<R extends Rank>(blockShape: number[], paddings: number[][]):\n        Tensor<R>;\n  }\n}\n\ngetGlobalTensorClass().prototype.spaceToBatchND = function<R extends Rank>(\n    blockShape: number[], paddings: number[][]): Tensor<R> {\n  this.throwIfDisposed();\n  return spaceToBatchND(this, blockShape, paddings);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {split} from '../../ops/split';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    split<T extends Tensor>(numOrSizeSplits: number[]|number, axis?: number):\n        T[];\n  }\n}\n\ngetGlobalTensorClass().prototype.split = function<T extends Tensor>(\n    numOrSizeSplits: number[]|number, axis?: number): T[] {\n  this.throwIfDisposed();\n  return split(this, numOrSizeSplits, axis);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {sqrt} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    sqrt<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.sqrt = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return sqrt(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {square} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    square<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.square = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return square(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {squaredDifference} from '../../ops/squared_difference';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    squaredDifference<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.squaredDifference = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return squaredDifference(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {squeeze} from '../../ops/squeeze';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    squeeze<T extends Tensor>(axis?: number[]): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.squeeze = function<T extends Tensor>(\n    axis?: number[]): T {\n  this.throwIfDisposed();\n  return squeeze(this, axis);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {stack} from '../../ops/stack';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    stack<T extends Tensor>(x: Tensor|Tensor[], axis?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.stack = function<T extends Tensor>(\n    x: Tensor|Tensor[], axis?: number): T {\n  this.throwIfDisposed();\n  const tensorsToBeStacked = x instanceof Tensor ? [this, x] : [this, ...x];\n  return stack(tensorsToBeStacked, axis) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {step} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    step<T extends Tensor>(this: T, alpha?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.step = function<T extends Tensor>(\n    this: T, alpha?: number) {\n  this.throwIfDisposed();\n  return step(this, alpha);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {stridedSlice} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    stridedSlice<T extends Tensor>(\n        this: Tensor, begin: number[], end: number[], strides: number[],\n        beginMask?: number, endMask?: number, ellipsisMask?: number,\n        newAxisMask?: number, shrinkAxisMask?: number): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.stridedSlice = function<T extends Tensor>(\n    this: Tensor, begin: number[], end: number[], strides: number[],\n    beginMask?: number, endMask?: number, ellipsisMask?: number,\n    newAxisMask?: number, shrinkAxisMask?: number): T {\n  this.throwIfDisposed();\n  return stridedSlice(\n             this, begin, end, strides, beginMask, endMask, ellipsisMask,\n             newAxisMask, shrinkAxisMask) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {sub} from '../../ops/sub';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    sub<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.sub = function<T extends Tensor>(\n    b: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return sub(this, b);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {sum} from '../../ops/sum';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    sum<T extends Tensor>(axis?: number|number[], keepDims?: boolean): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.sum = function<T extends Tensor>(\n    axis?: number|number[], keepDims?: boolean): T {\n  this.throwIfDisposed();\n  return sum(this, axis, keepDims);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {tan} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    tan<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.tan = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return tan(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {tanh} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    tanh<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.tanh = function<T extends Tensor>(this: T): T {\n  this.throwIfDisposed();\n  return tanh(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {tile} from '../../ops/tile';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    tile<T extends Tensor>(b: number[]): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.tile = function<T extends Tensor>(\n    reps: number[]): T {\n  this.throwIfDisposed();\n  return tile(this, reps) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {cast} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    toBool<T extends Tensor>(this: T): T;\n  }\n}\n\n/**\n * Casts the array to type `bool`\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.toBool = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return cast<T>(this, 'bool');\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {cast} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    toFloat<T extends Tensor>(this: T): T;\n  }\n}\n\n/**\n * Casts the array to type `float32`\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.toFloat = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return cast<T>(this, 'float32');\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {cast} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    toInt<T extends Tensor>(this: T): T;\n  }\n}\n\n/**\n * Casts the array to type `int32`\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.toInt = function<T extends Tensor>(this: T):\n    T {\n  this.throwIfDisposed();\n  return cast<T>(this, 'int32');\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {topk} from '../../ops/topk';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    topk<T extends Tensor>(this: T, k?: number, sorted?: boolean):\n        {values: T, indices: T};\n  }\n}\n\ngetGlobalTensorClass().prototype.topk = function<T extends Tensor>(\n    this: T, k?: number, sorted?: boolean): {values: T, indices: T} {\n  this.throwIfDisposed();\n  return topk(this, k, sorted) as {values: T, indices: T};\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {transpose} from '../../ops/transpose';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    transpose<T extends Tensor>(perm?: number[]): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.transpose = function<T extends Tensor>(\n    this: T, perm?: number[]): T {\n  this.throwIfDisposed();\n  return transpose(this, perm);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {unique} from '../../ops/unique';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    unique<T extends Tensor>(this: T, axis?: number): {values: T, indices: T};\n  }\n}\n\ngetGlobalTensorClass().prototype.unique = function<T extends Tensor>(\n    this: T, axis?: number): {values: T, indices: T} {\n  this.throwIfDisposed();\n  return unique(this, axis) as {values: T, indices: T};\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {unsortedSegmentSum} from '../../ops/unsorted_segment_sum';\nimport {getGlobalTensorClass, Tensor, Tensor1D} from '../../tensor';\nimport {Rank, TensorLike1D} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    unsortedSegmentSum<T extends Tensor>(\n        this: T, segmentIds: Tensor1D|TensorLike1D, numSegments: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.unsortedSegmentSum =\n    function<T extends Tensor>(\n        this: T, segmentIds: Tensor1D|TensorLike1D, numSegments: number): T {\n  this.throwIfDisposed();\n  return unsortedSegmentSum(this, segmentIds, numSegments);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {unstack} from '../../ops/unstack';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    unstack<T extends Tensor>(axis?: number): T[];\n  }\n}\n\ngetGlobalTensorClass().prototype.unstack = function<T extends Tensor>(\n    axis?: number): T[] {\n  this.throwIfDisposed();\n  return unstack(this, axis) as T[];\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {where} from '../../ops/where';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    where<T extends Tensor>(condition: Tensor|TensorLike, x: Tensor|TensorLike):\n        T;\n  }\n}\n\ngetGlobalTensorClass().prototype.where = function<T extends Tensor>(\n    condition: Tensor|TensorLike, x: Tensor|TensorLike): T {\n  this.throwIfDisposed();\n  return where(condition, this, x) as T;\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {zerosLike} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    zerosLike<T extends Tensor>(this: T): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.zerosLike = function<T extends Tensor>(\n    this: T): T {\n  this.throwIfDisposed();\n  return zerosLike(this);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {mul} from '../ops/mul';\nimport {step} from '../ops/step';\nimport {Tensor} from '../tensor';\n\nexport const absGradConfig: GradConfig = {\n  kernelName: Abs,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => mul(dy, step(cast(x, 'float32'), -1))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {neg} from '../ops/neg';\nimport {scalar} from '../ops/scalar';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {Tensor} from '../tensor';\n\nexport const acosGradConfig: GradConfig = {\n  kernelName: Acos,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {\n      x: () => {\n        const a = square(cast(x, 'float32'));\n        const b = sqrt(sub(scalar(1), a));\n        return neg(div(dy, b));\n      }\n\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {Tensor} from '../tensor';\n\nexport const acoshGradConfig: GradConfig = {\n  kernelName: Acosh,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {\n      x: () => {\n        const a = sqrt(sub(square(cast(x, 'float32')), 1));\n        return div(dy, a);\n      }\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Add} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport {reshape} from '../ops/reshape';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const addGradConfig: GradConfig = {\n  kernelName: Add,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape =\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, a.shape);\n    };\n    const derB = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, b.shape);\n    };\n\n    return {a: derA, b: derB};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {Tensor} from '../tensor';\n\nexport const addNGradConfig: GradConfig = {\n  kernelName: AddN,\n  saveAllInputs: true,\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const ders: {[key: string]: () => Tensor} = {};\n    saved.forEach((_, i) => {\n      ders[i] = () => dy.clone();\n    });\n    return ders;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const argMaxGradConfig: GradConfig = {\n  kernelName: ArgMax,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => zerosLike(x)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const argMinGradConfig: GradConfig = {\n  kernelName: ArgMin,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => zerosLike(x)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {scalar} from '../ops/scalar';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {Tensor} from '../tensor';\n\nexport const asinGradConfig: GradConfig = {\n  kernelName: Asin,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => div(dy, sqrt(sub(scalar(1), square(cast(x, 'float32')))))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {scalar} from '../ops/scalar';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {Tensor} from '../tensor';\n\nexport const asinhGradConfig: GradConfig = {\n  kernelName: Asinh,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {\n      x: () => {\n        const a = sqrt(add(scalar(1), square(cast(x, 'float32'))));\n        return div(dy, a);\n      }\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {assertAndGetBroadcastShape, getReductionAxes} from '../ops/broadcast_util';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {reshape} from '../ops/reshape';\nimport {square} from '../ops/square';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const atan2GradConfig: GradConfig = {\n  kernelName: Atan2,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const d = add(square(a), square(b));\n      let res = mul(dy, div(b, d));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, a.shape);\n    };\n    const derB = () => {\n      const d = add(square(a), square(b));\n      let res = neg(mul(dy, div(a, d)));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, b.shape);\n    };\n    return {a: derA, b: derB};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {square} from '../ops/square';\nimport {Tensor} from '../tensor';\n\nexport const atanGradConfig: GradConfig = {\n  kernelName: Atan,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {x: () => div(dy, add(square(cast(x, 'float32')), 1))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {scalar} from '../ops/scalar';\nimport {Tensor} from '../tensor';\n\nexport const atanhGradConfig: GradConfig = {\n  kernelName: Atanh,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {x: () => div(dy, sub(scalar(1), square(cast(x, 'float32'))))};\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {checkPadOnDimRoundingMode} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the backprop of a 3d avg pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction avgPool3dGrad_<T extends Tensor4D|Tensor5D>(\n    dy: T|TensorLike, input: T|TensorLike,\n    filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $dy = convertToTensor(dy, 'dy', 'avgPool3dGrad');\n  const $input = convertToTensor(input, 'input', 'avgPool3dGrad');\n\n  let dy5D = $dy as Tensor5D;\n  let input5D = $input as Tensor5D;\n  let reshapedTo5D = false;\n\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(\n        $dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n    input5D = reshape($input, [\n      1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]\n    ]);\n  }\n\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ` +\n          `${dy5D.rank}.`);\n  util.assert(\n      input5D.rank === 5,\n      () => `Error in avgPool3dGrad: input must be rank 5 but got rank ` +\n          `${input5D.rank}.`);\n  checkPadOnDimRoundingMode('avgPool3dGrad', pad, dimRoundingMode);\n  const inputs: AvgPool3DGradInputs = {dy: dy5D, input: input5D};\n  const attrs: AvgPool3DGradAttrs = {filterSize, strides, pad, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  AvgPool3DGrad, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n\n  return res;\n}\n\nexport const avgPool3dGrad = op({avgPool3dGrad_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {avgPool3dGrad} from '../ops/avg_pool_3d_grad';\nimport {Tensor, Tensor5D} from '../tensor';\n\nexport const avgPool3DGradConfig: GradConfig = {\n  kernelName: AvgPool3D,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved as [Tensor5D];\n    const {filterSize, strides, pad, dimRoundingMode} =\n        attrs as {} as AvgPool3DAttrs;\n\n    return {\n      x: () => avgPool3dGrad(\n          dy as Tensor5D, x, filterSize, strides, pad, dimRoundingMode)\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {ExplicitPadding} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the backprop of an 2D avg pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The input image, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n */\nfunction avgPoolGrad_<T extends Tensor3D|Tensor4D>(\n    dy: T|TensorLike, input: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|ExplicitPadding): T {\n  const $dy = convertToTensor(dy, 'dy', 'avgPoolGrad');\n  const $input = convertToTensor(input, 'input', 'avgPoolGrad');\n\n  util.assert(\n      $input.rank === $dy.rank,\n      () => `Rank of input (${$input.rank}) does not match rank of dy (${\n          $dy.rank})`);\n\n  let input4D = $input as Tensor4D;\n  let dy4D = $dy as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($input.rank === 3) {\n    reshapedTo4D = true;\n    input4D =\n        reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n    dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n  }\n\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in avgPoolGrad: dy must be rank 4 but got rank ` +\n          `${dy4D.rank}.`);\n  util.assert(\n      input4D.rank === 4,\n      () => `Error in avgPoolGrad: input must be rank 4 but got rank ` +\n          `${input4D.rank}.`);\n\n  const inputs: AvgPoolGradInputs = {dy: dy4D, input: input4D};\n\n  const attrs: AvgPoolGradAttrs = {filterSize, strides, pad};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  AvgPoolGrad, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const avgPoolGrad = op({avgPoolGrad_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool, AvgPoolAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {avgPoolGrad} from '../ops/avg_pool_grad';\nimport {Tensor, Tensor4D} from '../tensor';\n\nexport const avgPoolGradConfig: GradConfig = {\n  kernelName: AvgPool,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved as [Tensor4D];\n    const {filterSize, strides, pad} = attrs as {} as AvgPoolAttrs;\n    return {x: () => avgPoolGrad(dy as Tensor4D, x, filterSize, strides, pad)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {matMul} from '../ops/mat_mul';\nimport {Tensor} from '../tensor';\n\nexport const batchMatMulGradConfig: GradConfig = {\n  kernelName: BatchMatMul,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [a, b] = saved;\n\n    const {transposeA, transposeB} = attrs as {} as BatchMatMulAttrs;\n\n    if (!transposeA && !transposeB) {\n      return {\n        a: () => matMul(dy, b, false, true),\n        b: () => matMul(a, dy, true, false)\n      };\n    } else if (!transposeA && transposeB) {\n      return {\n        a: () => matMul(dy, b, false, false),\n        b: () => matMul(dy, a, true, false)\n      };\n    } else if (transposeA && !transposeB) {\n      return {\n        a: () => matMul(b, dy, false, true),\n        b: () => matMul(a, dy, false, false)\n      };\n    } else {\n      return {\n        a: () => matMul(b, dy, true, true),\n        b: () => matMul(dy, a, true, true)\n      };\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchToSpaceND, BatchToSpaceNDAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {spaceToBatchND} from '../ops/space_to_batch_nd';\nimport {Tensor} from '../tensor';\n\nexport const batchToSpaceNDGradConfig: GradConfig = {\n  kernelName: BatchToSpaceND,\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {blockShape, crops} = attrs as {} as BatchToSpaceNDAttrs;\n    return {x: () => spaceToBatchND(dy, blockShape, crops)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BroadcastTo, BroadCastToAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const broadcastToGradConfig: GradConfig = {\n  kernelName: BroadcastTo,\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const broadCastToAttrs: BroadCastToAttrs =\n        attrs as unknown as BroadCastToAttrs;\n\n    const inputShape = broadCastToAttrs.inputShape;\n    const outputShape = broadCastToAttrs.shape;\n\n    const reps: number[] = Array.from(outputShape);\n    for (let i = inputShape.length - 1; i >= 0; i--) {\n      if (inputShape[i] === outputShape[i]) {\n        reps[i] = 1;\n      } else if (inputShape[i] !== 1) {\n        throw new Error(`broadcastTo(): [${\n            inputShape}] cannot be broadcast to [${outputShape}].`);\n      }\n    }\n    const axes: number[] = [];\n    for (let i = 0; i < reps.length; i++) {\n      if (reps[i] > 1) {\n        axes.push(i);\n      }\n    }\n\n    return {x: () => sum(dy, axes, true /* keepDims */)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cast} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {Tensor} from '../tensor';\n\nexport const castGradConfig: GradConfig = {\n  kernelName: Cast,\n  gradFunc: (dy: Tensor) => {\n    return {x: () => dy.clone()};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const ceilGradConfig: GradConfig = {\n  kernelName: Ceil,\n  gradFunc: (dy: Tensor) => {\n    // TODO(manrajgrover): Return null for gradients when backprop supports it.\n    return {x: () => zerosLike(dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {greaterEqual} from '../ops/greater_equal';\nimport {lessEqual} from '../ops/less_equal';\nimport {logicalAnd} from '../ops/logical_and';\nimport {where} from '../ops/where';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const clipByValueGradConfig: GradConfig = {\n  kernelName: ClipByValue,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {clipValueMin, clipValueMax} = attrs as {} as ClipByValueAttrs;\n    return {\n      x: () => where(\n          logicalAnd(greaterEqual(x, clipValueMin), lessEqual(x, clipValueMax)),\n          dy, zerosLike(dy)),\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {absGradConfig} from './Abs_grad';\n\nexport const complexAbsGradConfig: GradConfig = {\n  kernelName: ComplexAbs,\n  inputsToSave: ['x'],\n  gradFunc: absGradConfig.gradFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Concat, ConcatAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {split} from '../ops/split';\nimport {Tensor} from '../tensor';\nimport {parseAxisParam} from '../util';\n\nexport const concatGradConfig: GradConfig = {\n  kernelName: Concat,\n  saveAllInputs: true,\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const shapes = saved.map(t => t.shape);\n    const {axis} = attrs as {} as ConcatAttrs;\n    const $axis = parseAxisParam(axis, saved[0].shape)[0];\n    const sizeSplits = shapes.map(s => s[$axis]);\n    const derTensors = split(dy, sizeSplits, $axis);\n    return derTensors.map(t => () => t) as {};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Conv2D, Conv2DAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {conv2DBackpropFilter} from '../ops/conv2d_backprop_filter';\nimport {conv2DBackpropInput} from '../ops/conv2d_backprop_input';\nimport * as conv_util from '../ops/conv_util';\nimport {Tensor, Tensor4D} from '../tensor';\nimport * as util from '../util';\n\nexport const conv2DGradConfig: GradConfig = {\n  kernelName: Conv2D,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x4D, $filter] = saved as [Tensor4D, Tensor4D];\n    const {dilations, strides, pad, dataFormat} = attrs as {} as Conv2DAttrs;\n\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of conv2D: dilation rates greater than 1 ' +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n\n    return {\n      x: () =>\n          conv2DBackpropInput(x4D.shape, dy, $filter, strides, pad, dataFormat),\n      filter: () =>\n          conv2DBackpropFilter(x4D, dy, $filter.shape, strides, pad, dataFormat)\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Conv2DBackpropInput, Conv2DBackpropInputAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {conv2d} from '../ops/conv2d';\nimport {conv2DBackpropFilter} from '../ops/conv2d_backprop_filter';\nimport {Tensor, Tensor4D} from '../tensor';\n\nexport const conv2DBackpropInputGradConfig: GradConfig = {\n  kernelName: Conv2DBackpropInput,\n  inputsToSave: ['dy', 'filter'],\n  gradFunc: (ddx: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [dy, filter] = saved as [Tensor4D, Tensor4D];\n\n    const {strides, pad, dataFormat, dimRoundingMode} =\n        attrs as {} as Conv2DBackpropInputAttrs;\n\n    return {\n      dy: () => conv2d(\n          ddx, filter, strides, pad, dataFormat, 1 /* dilations */,\n          dimRoundingMode),\n      filter: () => conv2DBackpropFilter(\n          ddx, dy, filter.shape, strides, pad, dataFormat, dimRoundingMode)\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the filter of a 3D convolution.\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\n *     assumed.\n * @param dy The dy image, of rank 5 or rank 4, of shape\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\n *     assumed.\n * @param filterShape The shape of the filter, length 5,\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction conv3DBackpropFilter_<T extends Tensor4D|Tensor5D>(\n    x: T, dy: T, filterShape: [number, number, number, number, number],\n    strides: [number, number, number]|number, pad: 'valid'|'same'): Tensor5D {\n  let x5D = x as Tensor5D;\n  if (x.rank === 4) {\n    x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);\n  }\n  let dy5D = dy as Tensor5D;\n  if (dy5D.rank === 4) {\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` +\n          `${x5D.shape}.`);\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` +\n          `${dy5D.shape}.`);\n  util.assert(\n      filterShape.length === 5,\n      () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` +\n          `${filterShape}.`);\n  util.assert(\n      x5D.shape[4] === filterShape[3],\n      () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` +\n          `match input depth in filter (${filterShape[3]}.`);\n  util.assert(\n      dy5D.shape[4] === filterShape[4],\n      () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` +\n          `match output depth for filter (${filterShape[4]}).`);\n\n  const inputs: Conv3DBackpropFilterV2Inputs = {x: x5D, dy: dy5D};\n\n  const attrs: Conv3DBackpropFilterV2Attrs = {strides, pad, filterShape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             Conv3DBackpropFilterV2, inputs as {} as NamedTensorMap,\n             attrs as {} as NamedAttrMap) as Tensor5D;\n}\n\nexport const conv3DBackpropFilter = op({conv3DBackpropFilter_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Conv3D, Conv3DAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {conv3DBackpropFilter} from '../ops/conv3d_backprop_filter';\nimport {conv3DBackpropInput} from '../ops/conv3d_backprop_input';\nimport {tupleValuesAreOne} from '../ops/conv_util';\nimport {Tensor, Tensor5D} from '../tensor';\nimport * as util from '../util';\n\nexport const conv3DGradConfig: GradConfig = {\n  kernelName: Conv3D,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor5D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {dilations, strides, pad} = attrs as {} as Conv3DAttrs;\n    util.assert(\n        tupleValuesAreOne(dilations),\n        () =>\n            'Error in gradient of conv3D: dilation rates greater than 1 are ' +\n            `not yet supported in gradients. Got dilations '${dilations}'`);\n\n    const [x5D, $filter] = saved;\n\n    return {\n      x: () => conv3DBackpropInput(\n          (x5D as Tensor5D).shape, dy, $filter as Tensor5D, strides, pad),\n      filter: () => conv3DBackpropFilter(\n          x5D as Tensor5D, dy, ($filter as Tensor5D).shape, strides, pad)\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {sin} from '../ops/sin';\nimport {Tensor} from '../tensor';\n\nexport const cosGradConfig: GradConfig = {\n  kernelName: Cos,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {x: () => mul(neg(sin(cast(x, 'float32'))), dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {mul} from '../ops/mul';\nimport {sinh} from '../ops/sinh';\nimport {Tensor} from '../tensor';\n\nexport const coshGradConfig: GradConfig = {\n  kernelName: Cosh,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {x: () => mul(sinh(cast(x, 'float32')), dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {getAxesPermutation} from '../ops/axis_util';\nimport {cumsum} from '../ops/cumsum';\nimport {transpose} from '../ops/transpose';\nimport {Tensor} from '../tensor';\n\nexport const cumsumGradConfig: GradConfig = {\n  kernelName: Cumsum,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {axis, exclusive, reverse}: CumsumAttrs = attrs as {} as CumsumAttrs;\n\n    return {\n      x: () => {\n        const permutation = getAxesPermutation([axis], x.rank);\n\n        let out = cumsum(dy, axis, exclusive, !reverse);\n\n        if (permutation != null) {\n          out = transpose(out, permutation);\n        }\n\n        return out;\n      }\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport * as conv_util from '../ops/conv_util';\nimport {depthwiseConv2dNativeBackpropFilter} from '../ops/depthwise_conv2d_native_backprop_filter';\nimport {depthwiseConv2dNativeBackpropInput} from '../ops/depthwise_conv2d_native_backprop_input';\nimport {Tensor, Tensor4D} from '../tensor';\nimport * as util from '../util';\n\nexport const depthwiseConv2dNativeGradConfig: GradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {dilations, strides, pad, dimRoundingMode} =\n        attrs as {} as DepthwiseConv2dNativeAttrs;\n    const $dilations = dilations == null ? [1, 1] as[number,number] : dilations;\n\n    util.assert(\n        conv_util.tupleValuesAreOne($dilations),\n        () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${$dilations}'`);\n\n    const [x, filter] = saved as [Tensor4D, Tensor4D];\n\n    util.assert(\n        x.rank === 4,\n        () => `Error in gradient of depthwiseConv2dNative: input must be ` +\n            `rank 4, but got rank ${x.rank}.`);\n    util.assert(\n        filter.rank === 4,\n        () => `Error in gradient of depthwiseConv2dNative: filter must be ` +\n            `rank 4, but got rank ${filter.rank}.`);\n    util.assert(\n        x.shape[3] === filter.shape[2],\n        () => `Error in gradient of depthwiseConv2d: number of input ` +\n            `channels (${x.shape[3]}) must match the inChannels dimension ` +\n            `in filter ${filter.shape[2]}.`);\n\n    util.assert(\n        conv_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n        () => 'Error in gradient of depthwiseConv2d: Either strides or ' +\n            `dilations must be  1. Got strides ${strides} and dilations ` +\n            `'${$dilations}'.`);\n\n    conv_util.checkPadOnDimRoundingMode(\n        'depthwiseConv2d', pad, dimRoundingMode);\n\n    return {\n      x: () => depthwiseConv2dNativeBackpropInput(\n          x.shape, dy, filter, strides, pad, $dilations, dimRoundingMode),\n      filter: () => depthwiseConv2dNativeBackpropFilter(\n          x, dy, filter.shape, strides, pad, $dilations, dimRoundingMode),\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Dilation2D, Dilation2DBackpropFilter, Dilation2DBackpropFilterInputs, Dilation2DBackpropInput, Dilation2DBackpropInputInputs} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nexport const dilation2dGradConfig: GradConfig = {\n  kernelName: Dilation2D,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x, filter] = saved as [Tensor4D, Tensor3D];\n\n    const inputInputs: Dilation2DBackpropInputInputs = {x, filter, dy};\n    const filterInputs: Dilation2DBackpropFilterInputs = {x, filter, dy};\n\n    return {\n      x: () => ENGINE.runKernel(\n          Dilation2DBackpropInput, inputInputs as {} as NamedTensorMap, attrs),\n      filter: () => ENGINE.runKernel(\n          Dilation2DBackpropFilter, filterInputs as {} as NamedTensorMap, attrs)\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Elu, EluGrad, EluGradInputs} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nexport const eluGradConfig: GradConfig = {\n  kernelName: Elu,\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [y] = saved;\n\n    const inputs: EluGradInputs = {dy, y};\n\n    return {x: () => ENGINE.runKernel(EluGrad, inputs as {} as NamedTensorMap)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Erf} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {exp} from '../ops/exp';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {square} from '../ops/square';\nimport {Tensor} from '../tensor';\n\nexport const erfGradConfig: GradConfig = {\n  kernelName: Erf,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    const a = mul(exp(neg(square(x))), 2 / Math.sqrt(Math.PI));\n    return {x: () => mul(dy, a)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {mul} from '../ops/mul';\nimport {Tensor} from '../tensor';\n\nexport const expGradConfig: GradConfig = {\n  kernelName: Exp,\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [y] = saved;\n    return {x: () => mul(dy, y)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {reshape} from '../ops/reshape';\nimport {Tensor} from '../tensor';\n\nexport const expandDimsGradConfig: GradConfig = {\n  kernelName: ExpandDims,\n  inputsToSave: ['input'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [input] = saved;\n    return {input: () => reshape(dy, input.shape)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {exp} from '../ops/exp';\nimport {mul} from '../ops/mul';\nimport {Tensor} from '../tensor';\n\nexport const expm1GradConfig: GradConfig = {\n  kernelName: Expm1,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => mul(dy, exp(x))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const floorGradConfig: GradConfig = {\n  kernelName: Floor,\n  gradFunc: (dy: Tensor) => {\n    return {x: () => zerosLike(dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {assertAndGetBroadcastShape, getReductionAxes} from '../ops/broadcast_util';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {reshape} from '../ops/reshape';\nimport {square} from '../ops/square';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const floorDivGradConfig: GradConfig = {\n  kernelName: FloorDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const res = div(dy, cast(b, 'float32'));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n    return {a: derA, b: derB};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {FusedBatchNorm, FusedBatchNormAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {getReductionAxes} from '../ops/broadcast_util';\nimport {mul} from '../ops/mul';\nimport {reshape} from '../ops/reshape';\nimport {rsqrt} from '../ops/rsqrt';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {sum} from '../ops/sum';\nimport {tile} from '../ops/tile';\nimport {Tensor} from '../tensor';\nimport {Rank, ShapeMap} from '../types';\n\nexport const fusedBatchNormGradConfig: GradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: <R extends Rank>(\n      dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {varianceEpsilon} = attrs as {} as FusedBatchNormAttrs;\n    const [x, mean, variance, scale] = saved;\n\n    const scaleValue = scale == null ? scalar(1) : scale;\n    const reductionAxes = getReductionAxes(mean.shape, x.shape);\n    const tileShape: number[] = [];\n    if (mean.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n      tileShape.push(1);\n    }\n\n    const xMinusMean = sub(x, mean);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(\n        mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance),\n        scalar(-0.5));\n\n    const derX = () => {\n      if (mean.rank === 1) {\n        return reshape(\n            mul(mul(dy,\n                    tile(\n                        reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]),\n                        tileShape)),\n                scaleValue),\n            x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n    const derMean = () => {\n      let meanDer =\n          mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n      return reshape(meanDer, mean.shape as ShapeMap[R]);\n    };\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n      return reshape(varianceDer, mean.shape as ShapeMap[R]);\n    };\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n      return reshape(scaleDer, mean.shape as ShapeMap[R]);\n    };\n    const derOffset = () => {\n      let offsetDer = dy;\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n      return reshape(offsetDer, mean.shape as ShapeMap[R]);\n    };\n\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GatherV2, GatherV2Attrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {getUndoAxesPermutation} from '../ops/axis_util';\nimport {reshape} from '../ops/reshape';\nimport {transpose} from '../ops/transpose';\nimport {unsortedSegmentSum} from '../ops/unsorted_segment_sum';\nimport {Tensor, Tensor1D} from '../tensor';\nimport {parseAxisParam} from '../util';\n\nexport const gatherGradConfig: GradConfig = {\n  kernelName: GatherV2,\n  inputsToSave: ['x', 'indices'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x, indices] = saved;\n    const {axis} = attrs as {} as GatherV2Attrs;\n\n    const parsedAxis = parseAxisParam(axis, x.shape)[0];\n\n    const derX = () => {\n      const paramsShape = x.shape;\n      const indicesSize = indices.size;\n\n      const outerShape = paramsShape.slice(0, parsedAxis);\n      const outerDims = outerShape.length;\n      const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\n      const innerDims = innerShape.length;\n\n      const outerAxesIndices = arrayRange(0, outerDims);\n      const innerAxesIndices =\n          arrayRange(outerDims + 1, outerDims + 1 + innerDims);\n\n      const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\n\n      const values = reshape(dy, valuesShape);\n      const reshapedIndices = reshape(indices, [indicesSize]);\n\n      const transposeDims =\n          arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\n      const valuesTranspose = transpose(values, transposeDims);\n      let paramsGrad = unsortedSegmentSum(\n          valuesTranspose, reshapedIndices as Tensor1D, x.shape[parsedAxis]);\n\n      const invertTransposeDims = getUndoAxesPermutation(transposeDims);\n      paramsGrad = transpose(paramsGrad, invertTransposeDims);\n\n      return paramsGrad;\n    };\n    return {x: derX, indices: () => indices};\n  }\n};\n\nfunction arrayRange(start: number, stop: number): number[] {\n  const result = [];\n  for (let i = start; i < stop; ++i) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction arrayConcat(arrays: number[][]): number[] {\n  const result = [];\n  for (let i = 0; i < arrays.length; ++i) {\n    for (let j = 0; j < arrays[i].length; ++j) {\n      result.push(arrays[i][j]);\n    }\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GreaterEqual} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const greaterEqualGradConfig: GradConfig = {\n  kernelName: GreaterEqual,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    return {a: () => zerosLike(a), b: () => zerosLike(b)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {Tensor} from '../tensor';\n\nexport const identityGradConfig: GradConfig = {\n  kernelName: Identity,\n  gradFunc: (dy: Tensor) => {\n    return {x: () => cast(dy, 'float32')};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const isFiniteGradConfig: GradConfig = {\n  kernelName: IsFinite,\n  gradFunc: (dy: Tensor) => {\n    // TODO(nsthorat): Let gradients be null for cases where we want to stop\n    // backpropgation.\n    return {x: () => zerosLike(dy)};\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const isInfGradConfig: GradConfig = {\n  kernelName: IsInf,\n  gradFunc: (dy: Tensor) => {\n    // TODO(nsthorat): Let gradients be null for cases where we want to stop\n    // backpropgation.\n    return {x: () => zerosLike(dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const isNanGradConfig: GradConfig = {\n  kernelName: IsNan,\n  gradFunc: (dy: Tensor) => {\n    // TODO(nsthorat): Let gradients be null for cases where we want to stop\n    // backpropgation.\n    return {x: () => zerosLike(dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {LeakyRelu, LeakyReluAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {greater} from '../ops/greater';\nimport {mul} from '../ops/mul';\nimport {where} from '../ops/where';\nimport {Tensor} from '../tensor';\n\nexport const leakyReluGradConfig: GradConfig = {\n  kernelName: LeakyRelu,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {alpha} = attrs as {} as LeakyReluAttrs;\n    const mask = greater(x, 0);\n\n    // Returns `gradients * (features > 0) + alpha * gradients * (features <=\n    // 0)`.\n    return {x: () => where(mask, dy, mul(dy, alpha))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Log1p} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {Tensor} from '../tensor';\n\nexport const log1pGradConfig: GradConfig = {\n  kernelName: Log1p,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => div(dy, add(x, 1))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Log} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {Tensor} from '../tensor';\n\nexport const logGradConfig: GradConfig = {\n  kernelName: Log,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => div(dy, cast(x, 'float32'))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {LogSoftmax, LogSoftmaxAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {exp} from '../ops/exp';\nimport {mul} from '../ops/mul';\nimport {sub} from '../ops/sub';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const logSoftmaxGradConfig: GradConfig = {\n  kernelName: LogSoftmax,\n  inputsToSave: [],\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [value] = saved;\n    const {axis} = attrs as {} as LogSoftmaxAttrs;\n    return {\n      logits: () => {\n        const keepDims = true;\n        const softmax = exp(value);\n        return sub(dy, mul(sum(dy, axis, keepDims), softmax));\n      }\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LRNGrad, LRNGradAttrs, LRNGradInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nimport {op} from './operation';\n\nfunction localResponseNormalizationBackprop_<T extends Tensor4D>(\n    x: T, y: T, dy: T, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5): T {\n  const inputs: LRNGradInputs = {x, y, dy};\n\n  const attrs: LRNGradAttrs = {depthRadius, bias, alpha, beta};\n\n  return ENGINE.runKernel(\n      LRNGrad, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const localResponseNormalizationBackprop =\n    op({localResponseNormalizationBackprop_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {LRN, LRNAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {localResponseNormalizationBackprop} from '../ops/local_response_normalization_backprop';\nimport {Tensor, Tensor4D} from '../tensor';\n\nexport const lrnGradConfig: GradConfig = {\n  kernelName: LRN,\n  inputsToSave: ['x'],\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x, y] = saved as [Tensor4D, Tensor4D];\n    const {depthRadius, bias, alpha, beta} = attrs as {} as LRNAttrs;\n\n    return {\n      x: () => localResponseNormalizationBackprop(\n          x, y, dy, depthRadius, bias, alpha, beta)\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as axis_util from '../ops/axis_util';\nimport {cast} from '../ops/cast';\nimport {equal} from '../ops/equal';\nimport {mul} from '../ops/mul';\nimport {reshape} from '../ops/reshape';\nimport {Tensor} from '../tensor';\n\n/**\n * Gradient helper function for the min and max operations.\n */\nexport function gradForMinAndMax<T extends Tensor>(\n    dy: T, y: T, xOrig: Tensor, origAxes: number[]) {\n  if (y.rank < xOrig.rank) {\n    y = reshape(y, axis_util.expandShapeToKeepDim(y.shape, origAxes)) as T;\n  }\n  if (dy.rank < xOrig.rank) {\n    dy = reshape(dy, axis_util.expandShapeToKeepDim(dy.shape, origAxes)) as T;\n  }\n  return {\n    x: () => {\n      const dx = mul(dy, cast(equal(xOrig, y), dy.dtype));\n      return dx;\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Max, MaxAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\nimport {gradForMinAndMax} from './min_max_grad_util';\n\nexport const maxGradConfig: GradConfig = {\n  kernelName: Max,\n  inputsToSave: ['x'],\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const maxAttrs: MaxAttrs = attrs as {} as MaxAttrs;\n    const {reductionIndices} = maxAttrs;\n    const x = saved[0];\n    const y = saved[1];\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    const maxGrad = gradForMinAndMax(dy, y, x, origAxes);\n    return {\n      x: () => {\n        return maxGrad['x']();\n      }\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Maximum} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {greaterEqual} from '../ops/greater_equal';\nimport {less} from '../ops/less';\nimport {mul} from '../ops/mul';\nimport {Tensor} from '../tensor';\n\nexport const maximumGradConfig: GradConfig = {\n  kernelName: Maximum,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const derA = () => mul(dy, cast(greaterEqual(a, b), 'float32'));\n    const derB = () => mul(dy, cast(less(a, b), 'float32'));\n    return {a: derA, b: derB};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {checkPadOnDimRoundingMode} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the backprop of a 3d max pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank 4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param output The original output image, of rank 5 of shape\n *     [batchSize, outDepth, outHeight, outWidth, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction maxPool3dGrad_<T extends Tensor4D|Tensor5D>(\n    dy: T|TensorLike, input: T|TensorLike, output: T|TensorLike,\n    filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $dy = convertToTensor(dy, 'dy', 'maxPool3dGrad');\n  const $input = convertToTensor(input, 'input', 'maxPool3dGrad');\n  const $output = convertToTensor(output, 'output', 'maxPool3dGrad');\n\n  let dy5D = $dy as Tensor5D;\n  let input5D = $input as Tensor5D;\n  let output5D = $output as Tensor5D;\n  let reshapedTo5D = false;\n\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(\n        $dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n    input5D = reshape($input, [\n      1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]\n    ]);\n    output5D = reshape($output, [\n      1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]\n    ]);\n  }\n\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ` +\n          `${dy5D.rank}.`);\n  util.assert(\n      input5D.rank === 5,\n      () => `Error in maxPool3dGrad: input must be rank 5 but got rank ` +\n          `${input5D.rank}.`);\n  util.assert(\n      output5D.rank === 5,\n      () => `Error in maxPool3dGrad: output must be rank 5 but got rank ` +\n          `${output5D.rank}.`);\n  checkPadOnDimRoundingMode('maxPool3dGrad', pad, dimRoundingMode);\n  const inputs:\n      MaxPool3DGradInputs = {dy: dy5D, input: input5D, output: output5D};\n  const attrs: MaxPool3DGradAttrs = {filterSize, strides, pad, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  MaxPool3DGrad, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n\n  return res;\n}\n\nexport const maxPool3dGrad = op({maxPool3dGrad_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPool3D, MaxPool3DAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {maxPool3dGrad} from '../ops/max_pool_3d_grad';\nimport {Tensor, Tensor5D} from '../tensor';\n\nexport const maxPool3DGradConfig: GradConfig = {\n  kernelName: MaxPool3D,\n  inputsToSave: ['x'],\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x, y] = saved as [Tensor5D, Tensor5D];\n    const {filterSize, strides, pad, dimRoundingMode} =\n        attrs as {} as MaxPool3DAttrs;\n\n    return {\n      x: () => maxPool3dGrad(\n          dy as Tensor5D, x, y, filterSize, strides, pad, dimRoundingMode)\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\n\n/**\n * Computes the backprop of a 2D max pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The original input image, of rank 4, of shape\n *     [batchSize, height, width, channels].\n * @param output The original output image, of rank 4, of shape\n *     [batchSize, outHeight, outWidth, channels].\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction maxPoolGrad_(\n    dy: Tensor4D|TensorLike, input: Tensor4D|TensorLike,\n    output: Tensor4D|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  const $dy = convertToTensor(dy, 'dy', 'maxPoolGrad');\n  const $input = convertToTensor(input, 'input', 'maxPoolGrad');\n  const $output = convertToTensor(output, 'output', 'maxPoolGrad');\n\n  util.assert(\n      $input.rank === $dy.rank,\n      () => `Rank of input (${$input.rank}) does not match rank of dy ` +\n          `(${$dy.rank})`);\n\n  util.assert(\n      $dy.rank === 4,\n      () => `Error in maxPoolGrad: dy must be rank 4 but got rank ` +\n          `${$dy.rank}.`);\n  util.assert(\n      $input.rank === 4,\n      () => `Error in maxPoolGrad: input must be rank 4 but got rank ` +\n          `${$input.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('maxPoolGrad', pad, dimRoundingMode);\n  const inputs: MaxPoolGradInputs = {dy: $dy, input: $input, output: $output};\n  const attrs: MaxPoolGradAttrs = {filterSize, strides, pad, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             MaxPoolGrad, inputs as {} as NamedTensorMap,\n             attrs as {} as NamedAttrMap) as Tensor4D;\n}\n\nexport const maxPoolGrad = op({maxPoolGrad_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPool, MaxPoolAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {maxPoolGrad} from '../ops/max_pool_grad';\nimport {Tensor, Tensor4D} from '../tensor';\n\nexport const maxPoolGradConfig: GradConfig = {\n  kernelName: MaxPool,\n  inputsToSave: ['x'],\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x, y] = saved as [Tensor4D, Tensor4D];\n    const {filterSize, strides, pad} = attrs as {} as MaxPoolAttrs;\n\n    return {\n      x: () => maxPoolGrad(dy as Tensor4D, x, y, filterSize, strides, pad)\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Mean, MeanAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {computeOutAndReduceShapes} from '../ops/axis_util';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {ones} from '../ops/ones';\nimport {reshape} from '../ops/reshape';\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\nexport const meanGradConfig: GradConfig = {\n  kernelName: Mean,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {axis} = attrs as {} as MeanAttrs;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const shapes = computeOutAndReduceShapes(x.shape, axes);\n    const reduceShape = shapes[1];\n    const reduceSize = util.sizeFromShape(reduceShape);\n\n    const derX = () => {\n      const expandedDyShape = x.shape.slice();\n      axes.forEach(axis => {\n        expandedDyShape[axis] = 1;\n      });\n      const expandedDy = reshape(dy, expandedDyShape);\n      const res = div(mul(expandedDy, ones(x.shape, 'float32')), reduceSize);\n      return res;\n    };\n\n    return {x: derX};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Min, MinAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\nimport {gradForMinAndMax} from './min_max_grad_util';\n\nexport const minGradConfig: GradConfig = {\n  kernelName: Min,\n  inputsToSave: ['x'],\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const minAttrs: MinAttrs = attrs as {} as MinAttrs;\n    const {axis} = minAttrs;\n    const [x, y] = saved;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    const minGrad = gradForMinAndMax(dy, y, x, origAxes);\n    return {\n      x: () => {\n        return minGrad['x']();\n      }\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Minimum} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {greater} from '../ops/greater';\nimport {lessEqual} from '../ops/less_equal';\nimport {mul} from '../ops/mul';\nimport {Tensor} from '../tensor';\n\nexport const minimumGradConfig: GradConfig = {\n  kernelName: Minimum,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const derA = () => mul(dy, cast(lessEqual(a, b), 'float32'));\n    const derB = () => mul(dy, cast(greater(a, b), 'float32'));\n    return {a: derA, b: derB};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MirrorPad, MirrorPadAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {slice} from '../ops/slice';\nimport {Tensor} from '../tensor';\n\nexport const mirrorPadGradConfig: GradConfig = {\n  kernelName: MirrorPad,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    // Pad introduces values around the original tensor, so the gradient\n    // slices the original shape out of the gradient.\n    const x = saved[0];\n    const {paddings} = attrs as unknown as MirrorPadAttrs;\n    const begin = paddings.map(p => p[0]);\n    return {x: () => slice(dy, begin, x.shape)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Mod} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {assertAndGetBroadcastShape, getReductionAxes} from '../ops/broadcast_util';\nimport {div} from '../ops/div';\nimport {floor} from '../ops/floor';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {reshape} from '../ops/reshape';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const modGradConfig: GradConfig = {\n  kernelName: Mod,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(dy, reduceAxes), a.shape);\n      }\n      return dy;\n    };\n    const derB = () => {\n      const res = mul(dy, neg(floor(div(a, b))));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), b.shape);\n      }\n      return res;\n    };\n    return {a: derA, b: derB};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Multiply} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {assertAndGetBroadcastShape, getReductionAxes} from '../ops/broadcast_util';\nimport {cast} from '../ops/cast';\nimport {mul} from '../ops/mul';\nimport {reshape} from '../ops/reshape';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const multiplyGradConfig: GradConfig = {\n  kernelName: Multiply,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const res = mul(dy, cast(b, 'float32'));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      const res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), b.shape);\n      }\n      return res;\n    };\n    return {a: derA, b: derB};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Neg} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {neg} from '../ops/neg';\nimport {Tensor} from '../tensor';\n\nexport const negGradConfig: GradConfig = {\n  kernelName: Neg,\n  gradFunc: (dy: Tensor) => {\n    return {x: () => neg(dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OneHot} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zeros} from '../ops/zeros';\nimport {Tensor} from '../tensor';\n\nexport const oneHotGradConfig: GradConfig = {\n  kernelName: OneHot,\n  inputsToSave: ['indices'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const indices = saved[0];\n    return {indices: () => zeros(indices.shape, 'float32')};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OnesLike} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const onesLikeGradConfig: GradConfig = {\n  kernelName: OnesLike,\n  gradFunc: (dy: Tensor) => {\n    return {x: () => zerosLike(dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Pack, PackAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {unstack} from '../ops/unstack';\nimport {Tensor} from '../tensor';\n\nexport const packGradConfig: GradConfig = {\n  kernelName: Pack,\n  saveAllInputs: true,\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {axis} = attrs as {} as PackAttrs;\n    const derTensors = unstack(dy, axis);\n    return derTensors.map(t => () => t) as {};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PadV2, PadV2Attrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {slice} from '../ops/slice';\nimport {Tensor} from '../tensor';\n\nexport const padV2GradConfig: GradConfig = {\n  kernelName: PadV2,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    // Pad introduces values around the original tensor, so the gradient\n    // slices the original shape out of the gradient.\n    const x = saved[0];\n    const {paddings} = attrs as unknown as PadV2Attrs;\n    const begin = paddings.map(p => p[0]);\n    return {x: () => slice(dy, begin, x.shape)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Pow} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport {cast} from '../ops/cast';\nimport {greater} from '../ops/greater';\nimport {log} from '../ops/log';\nimport {mul} from '../ops/mul';\nimport {pow} from '../ops/pow';\nimport {reshape} from '../ops/reshape';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {sum} from '../ops/sum';\nimport {where} from '../ops/where';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const powGradConfig: GradConfig = {\n  kernelName: Pow,\n  inputsToSave: ['a', 'b'],\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b, y] = saved;\n    const base = a;\n    const exp = b;\n    const outShape =\n        broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\n\n    const derBase = () => {\n      const expFloat = cast(exp, 'float32');\n      let res = mul(dy, mul(expFloat, pow(base, sub(expFloat, scalar(1)))));\n      const reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, base.shape);\n    };\n    const derExp = () => {\n      const condition = greater(base, 0);\n      const logBase = where(condition, log(base), zerosLike(base));\n      let res = mul(dy, mul(y, logBase));\n      const reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, exp.shape);\n    };\n    return {a: derBase, b: derExp};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Prelu} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {getReductionAxes} from '../ops/broadcast_util';\nimport {greater} from '../ops/greater';\nimport {mul} from '../ops/mul';\nimport {reshape} from '../ops/reshape';\nimport {sum} from '../ops/sum';\nimport {where} from '../ops/where';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const preluGradConfig: GradConfig = {\n  kernelName: Prelu,\n  inputsToSave: ['x', 'alpha'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x, alpha] = saved;\n    const mask = greater(x, 0);\n\n    return {\n      x: () => where(mask, dy, mul(dy, alpha)),\n      alpha: () => {\n        let res = where(mask, zerosLike(dy), mul(dy, x));\n        const reduceAxes = getReductionAxes(alpha.shape, dy.shape);\n        if (reduceAxes.length > 0) {\n          res = sum(res, reduceAxes);\n        }\n        return reshape(res, alpha.shape);\n      }\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2022 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '../base';\nimport {Prod, ProdAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {cumprod} from '../ops/cumprod';\nimport {mul} from '../ops/mul';\nimport {reshape} from '../ops/reshape';\nimport {transpose} from '../ops/transpose';\nimport {Tensor} from '../tensor';\n\n// Gradient for product operation on a single axis.\nfunction prodGradFn_(x: Tensor, dy: Tensor, axis: number): Tensor {\n  // The gradient tensor (dy) has a set of axes removed, so we create re-shaped\n  // versions (of size 1) for the removed axis; this supports broadcasting over\n  // those dimensions.\n  const expandedYShape = x.shape.slice();\n  expandedYShape[axis] = 1;\n\n  // The actual gradient computation.\n  const expandedDy = reshape(dy, expandedYShape);\n  const xCumProd = cumprod(x, axis, true, false);\n  const xCumRevProd = cumprod(x, axis, true, true);\n  const dx = mul(xCumProd, xCumRevProd);\n  return mul(expandedDy, dx);\n}\n\n// Support gradients when the product is done on many axes at once.\n// This done py pushing all the axes on which the product is applied into a\n// single axis.\nfunction prodsGradFn_(x: Tensor, dy: Tensor, axis: number[]): Tensor {\n  // Move all axes for doing prod over to the end of the tensor.\n  const xRank = x.shape.length;\n  const finalProdAxis = xRank - axis.length;\n  const xPermutation = backend_util.getAxesPermutation(axis, xRank);\n  let permutedX = x;\n  if (xPermutation != null) {\n    permutedX = transpose(x, xPermutation);\n  }\n\n  // Reshape all the prod dimensions into a single one, and do compute prod\n  // gradients on that.\n  const newShape = permutedX.shape.slice();\n  const removedShape = newShape.splice(xRank - axis.length, axis.length);\n  const endPartShape = removedShape.reduce((p, c) => p * c, 1);\n  newShape.push(endPartShape);\n  const reshapedPermutedX = permutedX.reshape(newShape);\n  let prodGrad = prodGradFn_(reshapedPermutedX, dy, finalProdAxis);\n\n  // Undo the re-shaping now we have the dx vector, and permute back to\n  // original axes order.\n  prodGrad = prodGrad.reshape(permutedX.shape);\n  if (xPermutation != null) {\n    const undoPermutation = backend_util.getUndoAxesPermutation(xPermutation);\n    prodGrad = transpose(prodGrad, undoPermutation);\n  }\n  return prodGrad;\n}\n\n// Running example:\n// [\n//   [\n//     [3.0, 4.0],\n//     [5.0, 6.0],\n//     [7.0, 8.0]\n//   ],\n//   [\n//     [3.0, 5.0],\n//     [0.0, 6.0],\n//     [5.0, 6.0]\n//   ]\n// ]\n//\nexport const prodGradConfig: GradConfig = {\n  kernelName: Prod,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor|Tensor[], saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {axis} = (attrs as {}) as ProdAttrs;\n    let axisArr = [] as number[];\n    if (axis === undefined || axis === null) {\n      axisArr = x.shape.map((_, i) => i);\n    } else if (typeof axis === 'number') {\n      axisArr = [axis];\n    } else {\n      axisArr = axis;\n    }\n    return {x: () => prodsGradFn_(x, dy as Tensor, axisArr)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {reshape} from '../ops/reshape';\nimport {square} from '../ops/square';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const divGradConfig: GradConfig = {\n  kernelName: RealDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape =\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const derA = () => {\n      const res = div(dy, cast(b, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n    return {a: derA, b: derB};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Reciprocal} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {div} from '../ops/div';\nimport {neg} from '../ops/neg';\nimport {square} from '../ops/square';\nimport {Tensor} from '../tensor';\n\nexport const reciprocalGradConfig: GradConfig = {\n  kernelName: Reciprocal,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => div(dy, neg(square(x)))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Relu6} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {lessEqual} from '../ops/less_equal';\nimport {mul} from '../ops/mul';\nimport {step} from '../ops/step';\nimport {Tensor} from '../tensor';\n\nexport const relu6GradConfig: GradConfig = {\n  kernelName: Relu6,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    const mask = mul(lessEqual(x, 6), step(x));\n\n    return {x: () => mul(dy, cast(mask, 'float32'))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Relu} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {mul} from '../ops/mul';\nimport {step} from '../ops/step';\nimport {Tensor} from '../tensor';\n\nexport const reluGradConfig: GradConfig = {\n  kernelName: Relu,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => mul(dy, cast(step(x), 'float32'))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Reshape} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {reshape} from '../ops/reshape';\nimport {Tensor} from '../tensor';\n\nexport const reshapeGradConfig: GradConfig = {\n  kernelName: Reshape,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => reshape(dy, x.shape)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {ResizeBilinear, ResizeBilinearGrad, ResizeBilinearGradInputs} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nexport const resizeBilinearGradConfig: GradConfig = {\n  kernelName: ResizeBilinear,\n  inputsToSave: ['images'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [images] = saved;\n\n    const inputs: ResizeBilinearGradInputs = {dy, images};\n    const imagesDer = () =>\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        ENGINE.runKernel(\n            ResizeBilinearGrad, inputs as {} as NamedTensorMap, attrs) as\n        Tensor4D;\n\n    return {images: imagesDer};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {ResizeNearestNeighbor, ResizeNearestNeighborGrad, ResizeNearestNeighborGradInputs} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nexport const resizeNearestNeighborGradConfig: GradConfig = {\n  kernelName: ResizeNearestNeighbor,\n  inputsToSave: ['images'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [images] = saved;\n\n    const inputs: ResizeNearestNeighborGradInputs = {dy, images};\n    const imagesDer = () =>\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        ENGINE.runKernel(\n            ResizeNearestNeighborGrad, inputs as {} as NamedTensorMap, attrs) as\n        Tensor4D;\n\n    return {images: imagesDer};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Reverse, ReverseAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {reverse} from '../ops/reverse';\nimport {Tensor} from '../tensor';\nimport {parseAxisParam} from '../util';\n\nexport const reverseGradConfig: GradConfig = {\n  kernelName: Reverse,\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {dims} = attrs as {} as ReverseAttrs;\n    const axes = parseAxisParam(dims, dy.shape);\n    return {x: () => reverse(dy, axes)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Round} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const roundGradConfig: GradConfig = {\n  kernelName: Round,\n  gradFunc: (dy: Tensor) => {\n    // TODO(nsthorat): Let gradients be null for cases where we want to stop\n    // backpropgation.\n    return {x: () => zerosLike(dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rsqrt} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {pow} from '../ops/pow';\nimport {Tensor} from '../tensor';\n\nexport const rsqrtGradConfig: GradConfig = {\n  kernelName: Rsqrt,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => neg(div(dy, mul(pow(x, 1.5), 2)))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Select} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {logicalNot} from '../ops/logical_not';\nimport {mul} from '../ops/mul';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const selectGradConfig: GradConfig = {\n  kernelName: Select,\n  inputsToSave: ['condition'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [condition] = saved;\n    return {\n      // TODO(julianoks): Return null for condition gradient\n      // when backprop supports it.\n      condition: () => cast(zerosLike(condition), 'float32'),\n      t: () => mul(dy, cast(condition, dy.dtype)),\n      e: () => mul(dy, cast(logicalNot(condition), dy.dtype))\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Selu} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {exp} from '../ops/exp';\nimport {greater} from '../ops/greater';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {SELU_SCALE, SELU_SCALEALPHA} from '../ops/selu_util';\nimport {where} from '../ops/where';\nimport {Tensor} from '../tensor';\n\nexport const seluGradConfig: GradConfig = {\n  kernelName: Selu,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {\n      x: () => {\n        const mask = greater(x, scalar(0));\n\n        const scaleAlpha = scalar(SELU_SCALEALPHA);\n        const scale = scalar(SELU_SCALE);\n\n        const greaterThanZeroDer = mul(dy, scale);\n        const lessEqualZeroDer =\n            mul(mul(dy, scaleAlpha), exp(cast(x, 'float32')));\n\n        return where(mask, greaterThanZeroDer, lessEqualZeroDer);\n      }\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Sigmoid} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {Tensor} from '../tensor';\n\nexport const sigmoidGradConfig: GradConfig = {\n  kernelName: Sigmoid,\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [y] = saved;\n\n    return {x: () => mul(dy, mul(y, sub(scalar(1), y)))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Sign} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const signGradConfig: GradConfig = {\n  kernelName: Sign,\n  gradFunc: (dy: Tensor) => {\n    return {x: () => zerosLike(dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Sin} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {cos} from '../ops/cos';\nimport {mul} from '../ops/mul';\nimport {Tensor} from '../tensor';\n\nexport const sinGradConfig: GradConfig = {\n  kernelName: Sin,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => mul(cos(cast(x, 'float32')), dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Sinh} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {cosh} from '../ops/cosh';\nimport {mul} from '../ops/mul';\nimport {Tensor} from '../tensor';\n\nexport const sinhGradConfig: GradConfig = {\n  kernelName: Sinh,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {x: () => mul(cosh(cast(x, 'float32')), dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Slice, SliceAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {pad} from '../ops/pad';\nimport {parseSliceParams} from '../ops/slice_util';\nimport {Tensor} from '../tensor';\n\nexport const sliceGradConfig: GradConfig = {\n  kernelName: Slice,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {begin, size} = attrs as {} as SliceAttrs;\n\n    const inputShape = x.shape;\n    const [begin_, size_] = parseSliceParams(x, begin, size);\n\n    // Create an Nx2 padding where the first column represents how many\n    // zeros are prepended (at start) for each dimension, and the second\n    // column indicates how many zeros are appended (at end).\n\n    // The number of zeros to append is the shape of the input\n    // elementwise-subtracted by both the begin vector and sizes vector.\n    const paddings: Array<[number, number]> = [];\n    for (let i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n    return {x: () => pad(dy, paddings)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Softmax, SoftmaxAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {mul} from '../ops/mul';\nimport {sub} from '../ops/sub';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const softmaxGradConfig: GradConfig = {\n  kernelName: Softmax,\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [y] = saved;\n    const {dim} = attrs as {} as SoftmaxAttrs;\n    const keepDims = true;\n\n    const dyTimesY = mul(dy, y);\n    return {\n      logits: () => sub(dyTimesY, mul(sum(dyTimesY, [dim], keepDims), y))\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Softplus} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {mul} from '../ops/mul';\nimport {sigmoid} from '../ops/sigmoid';\nimport {Tensor} from '../tensor';\n\nexport const softplusGradConfig: GradConfig = {\n  kernelName: Softplus,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {x: () => mul(dy, sigmoid(x))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {SpaceToBatchND, SpaceToBatchNDAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {batchToSpaceND} from '../ops/batch_to_space_nd';\nimport {Tensor} from '../tensor';\n\nexport const spaceToBatchNDGradConfig: GradConfig = {\n  kernelName: SpaceToBatchND,\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {blockShape, paddings} = attrs as {} as SpaceToBatchNDAttrs;\n    return {x: () => batchToSpaceND(dy, blockShape, paddings)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {SplitV, SplitVAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {concat} from '../ops/concat';\nimport {Tensor} from '../tensor';\n\nexport const splitVGradConfig: GradConfig = {\n  kernelName: SplitV,\n  gradFunc: (dy: Tensor[], saved: Tensor[], attrs: NamedAttrMap) => {\n    const {axis} = attrs as {} as SplitVAttrs;\n\n    return {x: () => concat(dy, axis)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Sqrt} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/sqrt';\nimport {Tensor} from '../tensor';\n\nexport const sqrtGradConfig: GradConfig = {\n  kernelName: Sqrt,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {x: () => div(dy, mul(sqrt(cast(x, 'float32')), 2))};\n  }\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cast} from '../ops/cast';\nimport {mul} from '../ops/mul';\nimport {Tensor} from '../tensor';\n\nexport const squareGradConfig: GradConfig = {\n  kernelName: Square,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => mul(dy, mul(cast(x, 'float32'), 2))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {SquaredDifference} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {Tensor} from '../tensor';\n\nexport const squaredDifferenceGradConfig: GradConfig = {\n  kernelName: SquaredDifference,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const two = scalar(2);\n    const derA = () => mul(dy, mul(two, sub(a, b)));\n    const derB = () => mul(dy, mul(two, sub(b, a)));\n    return {a: derA, b: derB};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Step} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const stepGradConfig: GradConfig = {\n  kernelName: Step,\n  gradFunc: (dy: Tensor) => {\n    // TODO(manrajgrover): Return null for gradients when backprop supports\n    // it.\n    return {x: () => zerosLike(dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Sub} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport {neg} from '../ops/neg';\nimport {reshape} from '../ops/reshape';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const subGradConfig: GradConfig = {\n  kernelName: Sub,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape =\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, a.shape);\n    };\n    const derB = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(neg(res), b.shape);\n    };\n\n    return {a: derA, b: derB};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Sum, SumAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {mul} from '../ops/mul';\nimport {ones} from '../ops/ones';\nimport {reshape} from '../ops/reshape';\nimport {Tensor} from '../tensor';\nimport {parseAxisParam} from '../util';\n\nexport const sumGradConfig: GradConfig = {\n  kernelName: Sum,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const expandedDyShape = x.shape.slice();\n    const {axis} = attrs as {} as SumAttrs;\n\n    const axes = parseAxisParam(axis, x.shape);\n    axes.forEach(axis => {\n      expandedDyShape[axis] = 1;\n    });\n    const expandedDy = reshape(dy, expandedDyShape);\n    const derX = mul(expandedDy, ones(x.shape, 'float32'));\n\n    return {x: () => derX};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tan} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {cos} from '../ops/cos';\nimport {div} from '../ops/div';\nimport {square} from '../ops/square';\nimport {Tensor} from '../tensor';\n\nexport const tanGradConfig: GradConfig = {\n  kernelName: Tan,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n\n    return {x: () => div(dy, square(cos(x)))};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tanh} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {Tensor} from '../tensor';\n\nexport const tanhGradConfig: GradConfig = {\n  kernelName: Tanh,\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [y] = saved;\n\n    return {x: () => mul(sub(scalar(1), square(y)), dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tile, TileAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {slice} from '../ops/slice';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const tileGradConfig: GradConfig = {\n  kernelName: Tile,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {reps} = attrs as unknown as TileAttrs;\n\n    const derX = () => {\n      let xGrad = zerosLike(x);\n      // TODO(cais): Maybe reduce memory footprint by avoiding repeated\n      // slicing.\n      if (x.rank === 1) {\n        for (let i = 0; i < reps[0]; ++i) {\n          xGrad = add(xGrad, slice(dy, [i * x.shape[0]], [x.shape[0]]));\n        }\n      } else if (x.rank === 2) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1]], [\n                          x.shape[0], x.shape[1]\n                        ]));\n          }\n        }\n      } else if (x.rank === 3) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              xGrad =\n                  add(xGrad,\n                      slice(\n                          dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]],\n                          [x.shape[0], x.shape[1], x.shape[2]]));\n            }\n          }\n        }\n      } else if (x.rank === 4) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              for (let l = 0; l < reps[3]; ++l) {\n                xGrad =\n                    add(xGrad,\n                        slice(\n                            dy,\n                            [\n                              i * x.shape[0], j * x.shape[1], k * x.shape[2],\n                              l * x.shape[3]\n                            ],\n                            [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\n              }\n            }\n          }\n        }\n      } else {\n        throw new Error(\n            `Gradient for tile operation is not implemented for rank-` +\n            `${x.rank} tensors yet.`);\n      }\n      return xGrad;\n    };\n    return {x: derX};\n  },\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Transpose, TransposeAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport * as axis_util from '../ops/axis_util';\nimport {transpose} from '../ops/transpose';\nimport {Tensor} from '../tensor';\n\nexport const transposeGradConfig: GradConfig = {\n  kernelName: Transpose,\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const transposeAttrs: TransposeAttrs = attrs as {} as TransposeAttrs;\n    const {perm} = transposeAttrs;\n    const undoPerm = axis_util.getUndoAxesPermutation(perm);\n    return {x: () => transpose(dy, undoPerm)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Unpack, UnpackAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {stack} from '../ops/stack';\nimport {Tensor} from '../tensor';\n\nexport const unpackGradConfig: GradConfig = {\n  kernelName: Unpack,\n  gradFunc: (dy: Tensor[], saved: Tensor[], attrs: NamedAttrMap) => {\n    const unpackAttrs: UnpackAttrs = attrs as {} as UnpackAttrs;\n    const {axis} = unpackAttrs;\n    return {value: () => stack(dy, axis)};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {UnsortedSegmentSum} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {expandDims} from '../ops/expand_dims';\nimport {gather} from '../ops/gather';\nimport {greaterEqual} from '../ops/greater_equal';\nimport {logicalAnd} from '../ops/logical_and';\nimport {maximum} from '../ops/maximum';\nimport {ones} from '../ops/ones';\nimport {scalar} from '../ops/scalar';\nimport {where} from '../ops/where';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor, Tensor1D} from '../tensor';\n\nexport const unsortedSegmentSumGradConfig: GradConfig = {\n  kernelName: UnsortedSegmentSum,\n  inputsToSave: ['segmentIds'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [segmentIds] = saved;\n\n    const derX = () => {\n      return gatherDropNegatives(dy, segmentIds as Tensor1D);\n    };\n    return {x: derX};\n  }\n};\n\nfunction gatherDropNegatives<T extends Tensor>(x: T, indices: Tensor1D) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  const zeroClippedIndices = maximum(indices, zerosLike(indices));\n  const gathered = gather(x, zeroClippedIndices as Tensor1D);\n  let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n  const numIters = gathered.rank - isPositive.rank;\n  for (let i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n  isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n  const zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {absGradConfig} from './gradients/Abs_grad';\nimport {acosGradConfig} from './gradients/Acos_grad';\nimport {acoshGradConfig} from './gradients/Acosh_grad';\nimport {addGradConfig} from './gradients/Add_grad';\nimport {addNGradConfig} from './gradients/AddN_grad';\nimport {argMaxGradConfig} from './gradients/ArgMax_grad';\nimport {argMinGradConfig} from './gradients/ArgMin_grad';\nimport {asinGradConfig} from './gradients/Asin_grad';\nimport {asinhGradConfig} from './gradients/Asinh_grad';\nimport {atan2GradConfig} from './gradients/Atan2_grad';\nimport {atanGradConfig} from './gradients/Atan_grad';\nimport {atanhGradConfig} from './gradients/Atanh_grad';\nimport {avgPool3DGradConfig} from './gradients/AvgPool3D_grad';\nimport {avgPoolGradConfig} from './gradients/AvgPool_grad';\nimport {batchMatMulGradConfig} from './gradients/BatchMatMul_grad';\nimport {batchToSpaceNDGradConfig} from './gradients/BatchToSpaceND_grad';\nimport {broadcastToGradConfig} from './gradients/BroadcastTo_grad';\nimport {castGradConfig} from './gradients/Cast_grad';\nimport {ceilGradConfig} from './gradients/Ceil_grad';\nimport {clipByValueGradConfig} from './gradients/ClipByValue_grad';\nimport {complexAbsGradConfig} from './gradients/ComplexAbs_grad';\nimport {concatGradConfig} from './gradients/Concat_grad';\nimport {conv2DGradConfig} from './gradients/Conv2D_grad';\nimport {conv2DBackpropInputGradConfig} from './gradients/Conv2DBackpropInput_grad';\nimport {conv3DGradConfig} from './gradients/Conv3D_grad';\nimport {cosGradConfig} from './gradients/Cos_grad';\nimport {coshGradConfig} from './gradients/Cosh_grad';\nimport {cumsumGradConfig} from './gradients/Cumsum_grad';\nimport {depthwiseConv2dNativeGradConfig} from './gradients/DepthwiseConv2dNative_grad';\nimport {dilation2dGradConfig} from './gradients/Dilation2D_grad';\nimport {eluGradConfig} from './gradients/Elu_grad';\nimport {erfGradConfig} from './gradients/Erf_grad';\nimport {expGradConfig} from './gradients/Exp_grad';\nimport {expandDimsGradConfig} from './gradients/ExpandDims_grad';\nimport {expm1GradConfig} from './gradients/Expm1_grad';\nimport {floorGradConfig} from './gradients/Floor_grad';\nimport {floorDivGradConfig} from './gradients/FloorDiv_grad';\nimport {fusedBatchNormGradConfig} from './gradients/FusedBatchNorm_grad';\nimport {gatherGradConfig} from './gradients/GatherV2_grad';\nimport {greaterEqualGradConfig} from './gradients/GreaterEqual_grad';\nimport {identityGradConfig} from './gradients/Identity_grad';\nimport {isFiniteGradConfig} from './gradients/IsFinite_grad';\nimport {isInfGradConfig} from './gradients/IsInf_grad';\nimport {isNanGradConfig} from './gradients/IsNan_grad';\nimport {leakyReluGradConfig} from './gradients/LeakyRelu_grad';\nimport {log1pGradConfig} from './gradients/Log1p_grad';\nimport {logGradConfig} from './gradients/Log_grad';\nimport {logSoftmaxGradConfig} from './gradients/LogSoftmax_grad';\nimport {lrnGradConfig} from './gradients/LRN_grad';\nimport {maxGradConfig} from './gradients/Max_grad';\nimport {maximumGradConfig} from './gradients/Maximum_grad';\nimport {maxPool3DGradConfig} from './gradients/MaxPool3D_grad';\nimport {maxPoolGradConfig} from './gradients/MaxPool_grad';\nimport {meanGradConfig} from './gradients/Mean_grad';\nimport {minGradConfig} from './gradients/Min_grad';\nimport {minimumGradConfig} from './gradients/Minimum_grad';\nimport {mirrorPadGradConfig} from './gradients/MirrorPad_grad';\nimport {modGradConfig} from './gradients/Mod_grad';\nimport {multiplyGradConfig} from './gradients/Multiply_grad';\nimport {negGradConfig} from './gradients/Neg_grad';\nimport {oneHotGradConfig} from './gradients/OneHot_grad';\nimport {onesLikeGradConfig} from './gradients/OnesLike_grad';\nimport {packGradConfig} from './gradients/Pack_grad';\nimport {padV2GradConfig} from './gradients/PadV2_grad';\nimport {powGradConfig} from './gradients/Pow_grad';\nimport {preluGradConfig} from './gradients/Prelu_grad';\nimport {prodGradConfig} from './gradients/Prod_grad';\nimport {divGradConfig} from './gradients/RealDiv_grad';\nimport {reciprocalGradConfig} from './gradients/Reciprocal_grad';\nimport {relu6GradConfig} from './gradients/Relu6_grad';\nimport {reluGradConfig} from './gradients/Relu_grad';\nimport {reshapeGradConfig} from './gradients/Reshape_grad';\nimport {resizeBilinearGradConfig} from './gradients/ResizeBilinear_grad';\nimport {resizeNearestNeighborGradConfig} from './gradients/ResizeNearestNeighbor_grad';\nimport {reverseGradConfig} from './gradients/Reverse_grad';\nimport {roundGradConfig} from './gradients/Round_grad';\nimport {rsqrtGradConfig} from './gradients/Rsqrt_grad';\nimport {selectGradConfig} from './gradients/Select_grad';\nimport {seluGradConfig} from './gradients/Selu_grad';\nimport {sigmoidGradConfig} from './gradients/Sigmoid_grad';\nimport {signGradConfig} from './gradients/Sign_grad';\nimport {sinGradConfig} from './gradients/Sin_grad';\nimport {sinhGradConfig} from './gradients/Sinh_grad';\nimport {sliceGradConfig} from './gradients/Slice_grad';\nimport {softmaxGradConfig} from './gradients/Softmax_grad';\nimport {softplusGradConfig} from './gradients/Softplus_grad';\nimport {spaceToBatchNDGradConfig} from './gradients/SpaceToBatchND_grad';\nimport {splitVGradConfig} from './gradients/SplitV_grad';\nimport {sqrtGradConfig} from './gradients/Sqrt_grad';\nimport {squareGradConfig} from './gradients/Square_grad';\nimport {squaredDifferenceGradConfig} from './gradients/SquaredDifference_grad';\nimport {stepGradConfig} from './gradients/Step_grad';\nimport {subGradConfig} from './gradients/Sub_grad';\nimport {sumGradConfig} from './gradients/Sum_grad';\nimport {tanGradConfig} from './gradients/Tan_grad';\nimport {tanhGradConfig} from './gradients/Tanh_grad';\nimport {tileGradConfig} from './gradients/Tile_grad';\nimport {transposeGradConfig} from './gradients/Transpose_grad';\nimport {unpackGradConfig} from './gradients/Unpack_grad';\nimport {unsortedSegmentSumGradConfig} from './gradients/UnsortedSegmentSum_grad';\nimport {zerosLikeGradConfig} from './gradients/ZerosLike_grad';\nimport {GradConfig} from './kernel_registry';\nimport {registerGradient} from './kernel_registry';\n\n// Export all kernel configs here so that the package can auto register them\nconst gradConfigs: GradConfig[] = [\n  absGradConfig,\n  acosGradConfig,\n  acoshGradConfig,\n  addGradConfig,\n  addNGradConfig,\n  argMaxGradConfig,\n  argMinGradConfig,\n  asinGradConfig,\n  asinhGradConfig,\n  atan2GradConfig,\n  atanGradConfig,\n  atanhGradConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulGradConfig,\n  batchToSpaceNDGradConfig,\n  broadcastToGradConfig,\n  castGradConfig,\n  ceilGradConfig,\n  clipByValueGradConfig,\n  complexAbsGradConfig,\n  concatGradConfig,\n  conv2DBackpropInputGradConfig,\n  conv2DGradConfig,\n  conv3DGradConfig,\n  cosGradConfig,\n  coshGradConfig,\n  cumsumGradConfig,\n  depthwiseConv2dNativeGradConfig,\n  dilation2dGradConfig,\n  divGradConfig,\n  eluGradConfig,\n  erfGradConfig,\n  expGradConfig,\n  expandDimsGradConfig,\n  expm1GradConfig,\n  floorDivGradConfig,\n  floorGradConfig,\n  fusedBatchNormGradConfig,\n  gatherGradConfig,\n  greaterEqualGradConfig,\n  identityGradConfig,\n  isFiniteGradConfig,\n  isInfGradConfig,\n  isNanGradConfig,\n  leakyReluGradConfig,\n  log1pGradConfig,\n  logGradConfig,\n  logSoftmaxGradConfig,\n  lrnGradConfig,\n  maxGradConfig,\n  maxGradConfig,\n  maximumGradConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  meanGradConfig,\n  minGradConfig,\n  minimumGradConfig,\n  mirrorPadGradConfig,\n  modGradConfig,\n  multiplyGradConfig,\n  negGradConfig,\n  oneHotGradConfig,\n  onesLikeGradConfig,\n  packGradConfig,\n  padV2GradConfig,\n  padV2GradConfig,\n  powGradConfig,\n  preluGradConfig,\n  prodGradConfig,\n  reciprocalGradConfig,\n  relu6GradConfig,\n  reluGradConfig,\n  reshapeGradConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborGradConfig,\n  reverseGradConfig,\n  roundGradConfig,\n  rsqrtGradConfig,\n  selectGradConfig,\n  seluGradConfig,\n  sigmoidGradConfig,\n  signGradConfig,\n  sinGradConfig,\n  sinhGradConfig,\n  sliceGradConfig,\n  softmaxGradConfig,\n  softplusGradConfig,\n  spaceToBatchNDGradConfig,\n  spaceToBatchNDGradConfig,\n  splitVGradConfig,\n  splitVGradConfig,\n  sqrtGradConfig,\n  squaredDifferenceGradConfig,\n  squareGradConfig,\n  stepGradConfig,\n  subGradConfig,\n  sumGradConfig,\n  tanGradConfig,\n  tanhGradConfig,\n  tileGradConfig,\n  transposeGradConfig,\n  unpackGradConfig,\n  unsortedSegmentSumGradConfig,\n  zerosLikeGradConfig\n];\n\nfor (const gradientConfig of gradConfigs) {\n  registerGradient(gradientConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ZerosLike} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const zerosLikeGradConfig: GradConfig = {\n  kernelName: ZerosLike,\n  gradFunc: (dy: Tensor) => {\n    return {x: () => zerosLike(dy)};\n  }\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Explicit error types.\n *\n * See the following link for more information about why the code includes\n * calls to setPrototypeOf:\n *\n * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n */\n// tslint:enable\n\n/**\n * Equivalent of Python's AttributeError.\n */\nexport class AttributeError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AttributeError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's RuntimeError.\n */\nexport class RuntimeError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, RuntimeError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's ValueError.\n */\nexport class ValueError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValueError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's NotImplementedError.\n */\nexport class NotImplementedError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, NotImplementedError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's AssertionError.\n */\nexport class AssertionError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AssertionError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's IndexError.\n */\nexport class IndexError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, IndexError.prototype);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\n\nexport class LruCache<T> {\n  private cache: Map<string, T>;\n  private maxEntries: number;\n\n  constructor(maxEntries?: number) {\n    this.maxEntries = maxEntries || 100;\n    this.cache = new Map<string, T>();\n  }\n\n  /**\n   * Get the entry for the key and mark it as used recently.\n   */\n  public get(key: string): T {\n    let entry: T;\n    if (this.cache.has(key)) {\n      entry = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, entry);\n    }\n    return entry;\n  }\n\n  /**\n   * Put the entry into the cache. If the key already existed, mark the key as\n   * used recently.\n   */\n  public put(key: string, value: T): void {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.maxEntries) {\n      const keyToDelete = this.cache.keys().next().value;\n      this.cache.delete(keyToDelete);\n    }\n    this.cache.set(key, value);\n  }\n\n  /**\n   * Get the MaxEntries of the cache.\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries;\n  }\n\n  /**\n   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n   * entries in the cache.\n   */\n  public setMaxEntries(maxEntries: number): void {\n    if (maxEntries < 0) {\n      throw new Error(\n          `The maxEntries of LRU caches must be at least 0, but got ${\n              maxEntries}.`);\n    }\n\n    if (this.maxEntries > maxEntries) {\n      for (let i = 0; i < this.maxEntries - maxEntries; i++) {\n        const keyToDelete = this.cache.keys().next().value;\n        this.cache.delete(keyToDelete);\n      }\n    }\n\n    this.maxEntries = maxEntries;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {DataType, fused, serialization, util} from '@tensorflow/tfjs-core';\n\nimport {AssertionError, ValueError} from '../errors';\n\n// tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value: any, numValues: number): any[] {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray: any[] = [];\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\n\nexport function assert(val: boolean, message?: string): void {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count<T>(array: T[], refernce: T) {\n  let counter = 0;\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n  return counter;\n}\n\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray<T>(xs: T[]): T|T[] {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\n\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x: any): any[] {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\n\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs: any|any[]): string {\n  const objectList = toList(objs);\n  let retVal = '';\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(\n          `Object ${obj} passed to objectListUid without an id`);\n    }\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name: string): string {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure =\n      intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n  return 'private' + insecure;\n}\n\nexport function toCamelCase(identifier: string): string {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  // Check for the underscore indicating snake_case\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {} as {[objName: string]: any};\n\nexport function serializeKerasObject(instance: serialization.Serializable):\n    serialization.ConfigDictValue {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n  const dict: serialization.ConfigDictValue = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config: serialization.ConfigDictValue):\n    void {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n    for (const field of fields) {\n      const value = config[field];\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n            typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value as serialization.ConfigDict);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(\n    identifier: string|serialization.ConfigDict,\n    moduleObjects = {} as {[objName: string]: any},\n    customObjects = {} as {[objName: string]: any},\n    printableModuleName = 'object', fastWeightInit = false): any {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(\n            `Unknown ${printableModuleName}: ${identifier}. ` +\n            `This may be due to one of the following reasons:\\n` +\n            `1. The ${printableModuleName} is defined in Python, in which ` +\n            `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n            `code.\\n` +\n            `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n            `but is not registered properly with ` +\n            `tf.serialization.registerClass().`);\n        // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(\n          `${printableModuleName}: Improper config format: ` +\n          `${JSON.stringify(config)}.\\n` +\n          `'className' and 'config' must set.`);\n    }\n    const className = config['className'] as string;\n    let cls, fromConfig;\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n    if (cls == null) {\n      throw new ValueError(\n          `Unknown ${printableModuleName}: ${className}. ` +\n          `This may be due to one of the following reasons:\\n` +\n          `1. The ${printableModuleName} is defined in Python, in which ` +\n          `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n          `code.\\n` +\n          `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n          `but is not registered properly with ` +\n          `tf.serialization.registerClass().`);\n      // TODO(cais): Add link to tutorial page on custom layers.\n    }\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {} as {[objName: string]: any};\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      }\n      // Add the customObjects to config\n      const nestedConfig = config['config'] as serialization.ConfigDict;\n      nestedConfig['customObjects'] = customObjectsCombined;\n\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj =\n          fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n      return returnObj;\n    }\n  }\n}\n\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a: number, b: number) {\n  return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a: number, b: number) {\n  return -1 * numberCompare(a, b);\n}\n\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype: string): DataType {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs: string[], ys: string[]): boolean {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique<T>(xs: T[]): T[] {\n  if (xs == null) {\n    return xs;\n  }\n  const out: T[] = [];\n  // TODO(cais): Maybe improve performance by sorting.\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n  return out;\n}\n\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj: {}): boolean {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(\n    values: string[], label: string, value: string): void {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${\n        values} or null/undefined.`);\n  }\n}\n\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(\n    x: any, expectedType: string, minLength = 0,\n    maxLength = Infinity): boolean {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return (\n      Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n      x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value: number|number[], name: string) {\n  if (Array.isArray(value)) {\n    util.assert(\n        value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach(\n        (v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(\n        Number.isInteger(value) && value > 0,\n        () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n  }\n}\n\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value: any): string {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce<T>(\n    f: (...args: Array<{}>) => T, waitMs: number,\n    nowFunc?: Function): (...args: Array<{}>) => T {\n  let lastTime = nowFunc != null ? nowFunc() : util.now();\n  let lastResult: T;\n  const f2 = (...args: Array<{}>) => {\n    const now = nowFunc != null ? nowFunc() : util.now();\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n    lastTime = now;\n    lastResult = f(...args);\n    return lastResult;\n  };\n  return f2;\n}\n\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName: string):\n    fused.Activation {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n  return null;\n}\n\ntype PossibleValues = Array<Array<boolean|string|number>>;\n\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues(...arrayOfValues: PossibleValues):\n    PossibleValues {\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n\n    return values\n        .map(value => {\n          return products.map((prevValue) => [...prevValue, value]);\n        })\n        .reduce((flattenedProduct, unflattenedProduct) => {\n          return flattenedProduct.concat(unflattenedProduct);\n        }, []);\n  }, [] as PossibleValues);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Utilities related to persistent state in the backend.\n */\n\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\n\nexport function getNextUniqueTensorId(): number {\n  return _nextUniqueTensorId++;\n}\n\nconst _uidPrefixes: {[prefix: string]: number} = {};\n\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\nexport function getUid(prefix = ''): string {\n  if (!(prefix in _uidPrefixes)) {\n    _uidPrefixes[prefix] = 0;\n  }\n  _uidPrefixes[prefix] += 1;\n  return prefix + _uidPrefixes[prefix].toString();\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// TODO(huan): add layer-specific input shape types (see: https://github.com/tensorflow/tfjs-layers/pull/492)\n/** @docalias (null | number)[] */\nexport type Shape = Array<null | number>;\n\n// The tfjs-core version of DataType must stay synced with this.\nexport type DataType = 'float32'|'int32'|'bool'|'complex64'|'string';\n\n// TODO(soergel): Move the CamelCase versions back out of keras_format\n// e.g. to src/common.ts.  Maybe even duplicate *all* of these to be pedantic?\n/** @docinline */\nexport type DataFormat = 'channelsFirst'|'channelsLast';\nexport const VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast'];\n\nexport type InterpolationFormat = 'nearest'|'bilinear';\nexport const VALID_INTERPOLATION_FORMAT_VALUES = ['nearest', 'bilinear'];\n// These constants have a snake vs. camel distinction.\nexport type DataFormatSerialization = 'channels_first'|'channels_last';\n\n/** @docinline */\nexport type PaddingMode = 'valid'|'same'|'causal';\nexport const VALID_PADDING_MODE_VALUES = ['valid', 'same', 'causal'];\n\n/** @docinline */\nexport type PoolMode = 'max'|'avg';\nexport const VALID_POOL_MODE_VALUES = ['max', 'avg'];\n\n/** @docinline */\nexport type BidirectionalMergeMode = 'sum'|'mul'|'concat'|'ave';\nexport const VALID_BIDIRECTIONAL_MERGE_MODES = ['sum', 'mul', 'concat', 'ave'];\n\n/** @docinline */\nexport type SampleWeightMode = 'temporal';\nexport const VALID_SAMPLE_WEIGHT_MODES = ['temporal'];\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Common functions for TensorFlow.js Layers.\n */\nimport {VALID_DATA_FORMAT_VALUES, VALID_INTERPOLATION_FORMAT_VALUES, VALID_PADDING_MODE_VALUES, VALID_POOL_MODE_VALUES} from './keras_format/common';\nimport {checkStringTypeUnionValue} from './utils/generic_utils';\n\n// A map from the requested scoped name of a Tensor to the number of Tensors\n// wanting that name so far.  This allows enforcing name uniqueness by appending\n// an incrementing index, e.g. scope/name, scope/name_1, scope/name_2, etc.\nconst nameMap: Map<string, number> = new Map<string, number>();\n\nexport function checkDataFormat(value?: string): void {\n  checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, 'DataFormat', value);\n}\n\nexport function checkInterpolationFormat(value?: string): void {\n  checkStringTypeUnionValue(\n      VALID_INTERPOLATION_FORMAT_VALUES, 'InterpolationFormat', value);\n}\n\nexport function checkPaddingMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, 'PaddingMode', value);\n}\n\nexport function checkPoolMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, 'PoolMode', value);\n}\n\nconst _nameScopeStack: string[] = [];\nconst _nameScopeDivider = '/';\n\n/**\n * Enter namescope, which can be nested.\n */\nexport function nameScope<T>(name: string, fn: () => T): T {\n  _nameScopeStack.push(name);\n  try {\n    const val: T = fn();\n    _nameScopeStack.pop();\n    return val;\n  } catch (e) {\n    _nameScopeStack.pop();\n    throw e;\n  }\n}\n\n/**\n * Get the current namescope as a flat, concatenated string.\n */\nfunction currentNameScopePrefix(): string {\n  if (_nameScopeStack.length === 0) {\n    return '';\n  } else {\n    return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;\n  }\n}\n\n/**\n * Get the name a Tensor (or Variable) would have if not uniqueified.\n * @param tensorName\n * @return Scoped name string.\n */\nexport function getScopedTensorName(tensorName: string): string {\n  if (!isValidTensorName(tensorName)) {\n    throw new Error('Not a valid tensor name: \\'' + tensorName + '\\'');\n  }\n  return currentNameScopePrefix() + tensorName;\n}\n\n/**\n * Get unique names for Tensors and Variables.\n * @param scopedName The fully-qualified name of the Tensor, i.e. as produced by\n *  `getScopedTensorName()`.\n * @return A unique version of the given fully scoped name.\n *   If this is the first time that the scoped name is seen in this session,\n *   then the given `scopedName` is returned unaltered.  If the same name is\n *   seen again (producing a collision), an incrementing suffix is added to the\n *   end of the name, so it takes the form 'scope/name_1', 'scope/name_2', etc.\n */\nexport function getUniqueTensorName(scopedName: string): string {\n  if (!isValidTensorName(scopedName)) {\n    throw new Error('Not a valid tensor name: \\'' + scopedName + '\\'');\n  }\n  if (!nameMap.has(scopedName)) {\n    nameMap.set(scopedName, 0);\n  }\n  const index = nameMap.get(scopedName);\n  nameMap.set(scopedName, nameMap.get(scopedName) + 1);\n\n  if (index > 0) {\n    const result = `${scopedName}_${index}`;\n    // Mark the composed name as used in case someone wants\n    // to call getUniqueTensorName(\"name_1\").\n    nameMap.set(result, 1);\n    return result;\n  } else {\n    return scopedName;\n  }\n}\n\nconst tensorNameRegex = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\\._\\/]*$/);\n\n/**\n * Determine whether a string is a valid tensor name.\n * @param name\n * @returns A Boolean indicating whether `name` is a valid tensor name.\n */\nexport function isValidTensorName(name: string): boolean {\n  return !!name.match(tensorNameRegex);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {backend} from '@tensorflow/tfjs-core';\nimport {DataFormat} from '../keras_format/common';\n\nlet _epsilon: number;\n\n/**\n * Returns the value of the fuzz factor used in numeric expressions.\n */\nexport function epsilon() {\n  if (_epsilon == null) {\n    _epsilon = backend().epsilon();\n  }\n  return _epsilon;\n}\n\n/**\n * Sets the value of the fuzz factor used in numeric expressions.\n * @param e New value of epsilon.\n */\nexport function setEpsilon(e: number) {\n  _epsilon = e;\n}\n\n/**\n * Returns the default image data format convention.\n */\nexport function imageDataFormat(): DataFormat {\n  return 'channelsLast';\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\n\nimport {ValueError} from '../errors';\n\nexport type ArrayTypes = Uint8Array|Int32Array|Float32Array;\n\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x: number): boolean {\n  return x === parseInt(x.toString(), 10);\n}\n\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(\n    array: number[]|ArrayTypes, begin?: number, end?: number): number {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array: number[]|Float32Array): number {\n  // same behavior as tf.min()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let min = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value < min) {\n      min = value;\n    }\n  }\n  return min;\n}\n\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array: number[]|Float32Array): number {\n  // same behavior as tf.max()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let max = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value > max) {\n      max = value;\n    }\n  }\n  return max;\n}\n\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array: number[]|Float32Array): number {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    sum += value;\n  }\n  return sum;\n}\n\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array: number[]|Float32Array): number {\n  return sum(array) / array.length;\n}\n\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array: number[]|Float32Array): number {\n  const meanValue = mean(array);\n  const demeaned = array.map((value: number) => value - meanValue);\n  let sumSquare = 0;\n  for (let i = 0; i < demeaned.length; i++) {\n    const value = demeaned[i];\n    sumSquare += value * value;\n  }\n  return sumSquare / array.length;\n}\n\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array: number[]|Float32Array): number {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin: number, end: number): number[] {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out: number[] = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * deeplearn.js backend.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {onesLike as coreOnesLike, scalar, Tensor, Tensor1D, tensor1d, Tensor2D, Tensor3D, Tensor4D, Tensor5D, tidy, where, zerosLike as coreZerosLike} from '@tensorflow/tfjs-core';\nimport {checkDataFormat} from '../common';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {HasShape} from '../types';\nimport * as math_utils from '../utils/math_utils';\n\nimport {imageDataFormat} from './common';\n\n// tslint:enable\n\n/* Setting and getting backend from deeplearn.js. */\n\n// Default deeplearn.js backend is WebGL (GPU).\nlet backend: 'cpu'|'webgl' = 'webgl';\n\nexport function setBackend(requestedBackend: 'cpu'|'webgl') {\n  tfc.setBackend(requestedBackend);\n  backend = requestedBackend;\n}\n\nexport function getBackend(): 'cpu'|'webgl' {\n  return backend;\n}\n\n/**\n * Indicates whether the backend is operating symbolically.\n *\n * This function will be used to determine how to interpret user code. If\n * it returns true, calls to the backend construct a symbolic graph; if\n * it returns false, calls to the backend execute immediately.\n */\nexport function isBackendSymbolic(): boolean {\n  return false;\n}\n\n/**\n * Get the number of elements in a Tensor.\n * @param x The Tensor.\n * @return Number of elements in `x`.\n */\nexport function countParams(x: HasShape): number {\n  const shape = x.shape;\n  if (shape.length > 0) {\n    return shape.reduce((a: number, b: number) => a * b);\n  } else {\n    // Scalar.\n    return 1;\n  }\n}\n\n/**\n * Casts a tensor to a different dtype and returns it.\n * @param x Input tensor.\n * @param dtype String: 'float32'|'int32'|'bool'.\n * @returns Tensor of the specified `dtype`.\n */\nexport function cast(x: Tensor, dtype: tfc.DataType): Tensor {\n  return tfc.cast(x, dtype);\n}\n\n/**\n * Adds a 1-sized dimension at index \"axis\".\n * @param x Input tensor.\n * @param axis Position where to add the new axis.\n * @returns Result of the dimension expansion.\n */\nexport function expandDims(x: Tensor, axis = -1): Tensor {\n  const outShape = x.shape.slice();\n  if (axis < 0) {\n    axis = outShape.length + axis + 1;\n  }\n  outShape.splice(axis, 0, 1);\n  return tfc.reshape(x, outShape);\n}\n\n/**\n * Repeats a 2D tensor.\n *\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\n * will have shape `[samples, 2, dim]`.\n *\n * @param x Input tensor.\n * @param n Integer, number of times to repeat.\n * @returns The result of the repeat operation.\n * @throws ValueError: If input tensor is not 2D.\n */\nexport function repeat(x: Tensor, n: number): Tensor {\n  return tidy(() => {\n    if (x.shape.length !== 2) {\n      throw new ValueError(\n          `repeat() expects a rank-2 tensor, but received a ` +\n          `rank-${x.shape.length} tensor.`);\n    }\n    const y = expandDims(x, 1);\n    return tile(y, [1, n, 1]);\n  });\n}\n\n/**\n * Flatten a Tensor into 1D.\n * @param x Input tensor.\n * @return The result of the flattening `x`.\n */\nexport function flatten(x: Tensor): Tensor {\n  const newShape = [math_utils.arrayProd(x.shape)];\n  return tfc.reshape(x, newShape);\n}\n\n/**\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\n * In other words, it flattens each data samples of a batch.\n *\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\n *   or higher.\n * @return The result of the flattening.\n */\nexport function batchFlatten(x: Tensor): Tensor {\n  if (x.rank <= 1) {\n    throw new ValueError(\n        `batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n  }\n  const newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n  return tfc.reshape(x, newShape);\n}\n\n/**\n * Do slicing along the first axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the first axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongFirstAxis(\n    array: Tensor, start: number, size: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        return tfc.slice2d(\n            array as Tensor2D, [start, 0], [size, array.shape[1]]);\n      case 3:\n        return tfc.slice3d(\n            array as Tensor3D, [start, 0, 0],\n            [size, array.shape[1], array.shape[2]]);\n      case 4:\n        return tfc.slice4d(\n            array as Tensor4D, [start, 0, 0, 0],\n            [size, array.shape[1], array.shape[2], array.shape[3]]);\n      case 5:\n        return tfc.slice(array as Tensor5D, [start, 0, 0, 0, 0], [\n          size, array.shape[1], array.shape[2], array.shape[3], array.shape[4]\n        ]);\n      case 6:\n        return tfc.slice(array, [start, 0, 0, 0, 0, 0], [\n          size, array.shape[1], array.shape[2], array.shape[3], array.shape[4],\n          array.shape[5]\n        ]);\n      default:\n        throw new ValueError(\n            `sliceAlongFirstAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Do slicing along the last axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the last axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongLastAxis(\n    array: Tensor, start: number, size: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        return tfc.slice2d(\n            array as Tensor2D, [0, start], [array.shape[0], size]);\n      case 3:\n        return tfc.slice3d(\n            array as Tensor3D, [0, 0, start],\n            [array.shape[0], array.shape[1], size]);\n      case 4:\n        return tfc.slice4d(\n            array as Tensor4D, [0, 0, 0, start],\n            [array.shape[0], array.shape[1], array.shape[2], size]);\n      default:\n        throw new ValueError(\n            `sliceAlongLastAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Do slicing along the sepcified axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size of the slice along the chosen axis.\n * @param choose an axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongAxis(\n    array: Tensor, start: number, size: number, axis: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      case 3:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return tfc.slice3d(\n                array as Tensor3D, [0, start, 0],\n                [array.shape[0], size, array.shape[2]]);\n          case 3:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      case 4:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return tfc.slice4d(\n                array as Tensor4D, [0, start, 0, 0],\n                [array.shape[0], size, array.shape[2], array.shape[3]]);\n          case 3:\n            return tfc.slice4d(\n                array as Tensor4D, [0, 0, start, 0],\n                [array.shape[0], array.shape[1], size, array.shape[3]]);\n          case 4:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      default:\n        throw new ValueError(\n            `sliceAlongLastAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Concatenates a list of tensors alongside the specified axis.\n * @param tensors `Array` of tensors to concatenate.\n * @param axis Concatenation axis.\n * @returns The result of the concatenation.\n */\nexport function concatenate(tensors: Tensor[], axis = -1): Tensor {\n  let rank: number;\n  if (axis < 0) {\n    rank = tensors[0].rank;\n    if (rank !== 0) {\n      axis = rank;\n    } else {\n      axis = 0;\n    }\n  }\n  if (axis === tensors[0].rank) {\n    // Porting Note: This is necessary because tfc.concat() requires axis to be\n    //   in the interval [-rank, rank).\n    axis = -1;\n  }\n  // Porting Note: Sparse concat is not supported yet.\n  return tfc.concat(tensors, axis);\n}\n\n/**\n * Concatenate two arrays along the first dimension.\n * @param a The 1st `tf.Tensor` to concatenate.\n * @param b The 2nd `tf.Tensor` to concatenate.\n * @returns Result of the concatenation.\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function concatAlongFirstAxis(a: Tensor, b: Tensor): Tensor {\n  switch (a.rank) {\n    case 1:\n      return tfc.concat1d([a as Tensor1D, b as Tensor1D]);\n    case 2:\n      return tfc.concat2d([a as Tensor2D, b as Tensor2D], 0);\n    case 3:\n      return tfc.concat3d([a as Tensor3D, b as Tensor3D], 0);\n    case 4:\n      return tfc.concat4d([a as Tensor4D, b as Tensor4D], 0);\n    default:\n      throw new ValueError(\n          `concatAlongFirstAxis() received an unsupported ` +\n          `tensor rank: ${a.rank}`);\n  }\n}\n\n/**\n * Creates a tensor by tiling `x` by `n`.\n * @param x A tensor.\n * @param n An Array of integers or a single integer. If an Array, the length\n *   must be the same as the number of dimensions in `x`. If a single integer,\n *   it will be treated as an Array of length 1.\n */\nexport function tile(x: Tensor, n: number|number[]): Tensor {\n  if (!Array.isArray(n)) {\n    n = [n];\n  }\n  if (x.rank !== n.length) {\n    throw new ValueError(\n        `The length of input n (${n.length}) does not match ` +\n        `the number of dimensions in input x (${x.rank})`);\n  }\n  return tfc.tile(x, n);\n}\n\n/* Creation of random tensors. */\n\n/**\n * Get a tensor with normal distribution of values.\n *\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @return The normal tensor.\n */\nexport function randomNormal(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: 'float32'|'int32',\n    seed?: number): Tensor {\n  return tfc.randomNormal(shape, mean, stddev, dtype, seed);\n}\n\n/* Linear Algebra */\n\n/**\n * Multiply two tensors and returns the result as a tensor.\n *\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\n * For tensors of higher ranks, it follows the Theano behavior,\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\n *\n * For N dimensions it is a sum product over the last axis of x and the\n * second-to-last of y:\n *\n * @param a A tensor of at least rank 2.\n * @param b A tensor of at least rank 2.\n * @param activation (optional) A string identifying the activation\n *   function.\n * @return Result of the dot operation.\n */\nexport function dot(\n    a: Tensor, b: Tensor, activation?: tfc.fused.Activation,\n    bias?: Tensor): Tensor {\n  if ((a.rank < 2) || (b.rank < 2)) {\n    throw new NotImplementedError(\n        `dot requires both inputs to be rank >= 2` +\n        ` but got x shape = ${a.shape} and y shape = ${b.shape}`);\n  }\n  if (b.rank >= 3) {\n    const xLastDim = a.shape.slice(-1)[0];\n    const ySecondLastDim = b.shape.slice(-2)[0];\n    if (xLastDim !== ySecondLastDim) {\n      throw new NotImplementedError(\n          `If rank y >= 3, then the second last dim` +\n          ` of y must equal the last dim of x but got x shape = ${\n              a.shape} and ` +\n          ` y shape = ${b.shape}`);\n    }\n  }\n  // Handle basic 2D x 2D case.\n  if ((a.rank === 2) && (b.rank === 2)) {\n    const transposeA = false;\n    const transposeB = false;\n    // tfc.fused.matMul only fuses certain activation functions. Unsupported\n    // activation functions are treated as 'linear' activations, which is\n    // equivalent to a no-op.\n    return tfc.fused.matMul({\n      a,\n      b: b as Tensor2D,\n      transposeA,\n      transposeB,\n      bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n      activation\n    });\n  } else {\n    // Reshape x into the analogous 2D Tensor.\n    const aFirstDims = a.shape.slice();  // Holds all but the last dim of x.\n    const aLastDim = aFirstDims.pop();\n    a = tfc.reshape(a, [-1, aLastDim]);\n\n    // Reshape y into the analogous 2D Tensor, and keep track of the\n    // required dimensions to reproduce the output shape.\n    const bShape = b.shape.slice();\n    const bLastDim = bShape.pop();\n    const ySecondLastDim = bShape.pop();\n    const yOtherDims = [...bShape, bLastDim];\n    // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n    // where r is the rank of y.\n    const perm = Array.from({length: b.rank}, (_, i) => {\n      if (i === 0) {\n        return b.rank - 2;\n      } else if (i <= b.rank - 2) {\n        return i - 1;\n      }\n      return i;\n    });\n    b = tfc.reshape(tfc.transpose(b, perm), [ySecondLastDim, -1]);\n\n    // Multiply x and y as 2D Tensors, and then reshape back to original.\n    const outputShape = [...aFirstDims, ...yOtherDims];\n    const transposeA = false;\n    const transposeB = false;\n    return tfc.reshape(\n        tfc.fused.matMul({\n          a,\n          b,\n          transposeA,\n          transposeB,\n          bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n          activation\n        }),\n        outputShape);\n  }\n}\n\n/**\n * Compute the sign Tensor of an input Tensor.\n *\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\n *\n * @param x Input `tf.Tensor`.\n * @return The sign `tf.Tensor`.\n */\nexport function sign(x: Tensor): Tensor {\n  // TODO(cais): Move to the core.\n  return tidy(() => {\n    const zerosLikeX = coreZerosLike(x);\n    const onesLikeX = coreOnesLike(x);\n    return where(\n        tfc.equal(x, zerosLikeX), zerosLikeX,\n        where(\n            tfc.greater(x, coreZerosLike(x)), onesLikeX,\n            tfc.mul(-1, onesLikeX)));\n  });\n}\n\n/**\n * Computes the one-hot representation of an integer tensor.\n * @param indices nD integer tensor of shape\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\n * @param numClasses Integer, number of classes to consider.\n * @returns (n + 1)D one hot representation of the input\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n */\nexport function oneHot(indices: Tensor, numClasses: number): Tensor {\n  return tidy(() => {\n    if (indices.rank !== 1) {\n      throw new Error(\n          'Only 1D one-hot tensors are supported in the ' +\n          'deeplearn backend, at present.');\n    }\n    indices = tfc.cast(indices, 'int32');\n    return tfc.cast(tfc.oneHot(indices as Tensor1D, numClasses), 'float32');\n  });\n}\n\n/* Elementary math functions. */\n\n/**\n * Retrieves the elements of indices `indices` in the tensor `reference`.\n * @param reference A tensor.\n * @param indices An integer tensor of indices or an `Array` of integers.\n * @param axis Axis along which to perform the gather operation.\n * @returns The result of the gathering as a tensor.\n */\nexport function gather(\n    reference: Tensor, indices: number[]|Tensor1D, axis?: number): Tensor {\n  return tidy(() => {\n    if (Array.isArray(indices)) {\n      indices = tensor1d(indices, 'int32');\n    } else {\n      indices = tfc.cast(indices, 'int32');\n    }\n    return tfc.gather(reference, indices, axis);\n  });\n}\n\n/**\n * Element-wise square.\n * @param x Input tensor.\n * @return element-wise x^2\n */\nexport function square(x: Tensor): Tensor {\n  return tfc.mul(x, x);\n}\n\n/**\n * Element-wise exponentiation.\n *\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic\n * conversion to tensor. Here we allow `a` to be either a number or a tensor.\n *\n * @param x The base tensor.\n * @param a The exponent, tensor or number. If a number, it is rounded to the\n *   nearest integer and converted to a tensor.\n * @returns A tensor of the same shape as `x`.\n */\nexport function pow(x: Tensor, a: Tensor|number): Tensor {\n  return tidy(() => {\n    if (typeof (a) === 'number') {\n      a = scalar(Math.round(a), 'int32');\n    }\n    if (a.dtype !== 'int32') {\n      throw new NotImplementedError(\n          `Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);\n    }\n    return tfc.pow(x, a);\n  });\n}\n\n/**\n * Reshapes bias tensor according to rank of x.\n */\nfunction reshapeBias(xRank: number, bias: Tensor, dataFormat: string) {\n  const biasShape = bias.shape;\n\n  if (bias.rank !== 1 && bias.rank !== xRank) {\n    throw new ValueError(\n        `Unexpected bias dimensions: ${bias.rank}` +\n        `; expected it to be 1 or ${xRank}`);\n  }\n\n  if (xRank === 5) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1, 1, 1]);\n      } else {\n        return tfc.reshape(\n            bias, [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, 1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 4) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1, 1]);\n      } else {\n        return tfc.reshape(bias, [1, biasShape[2], biasShape[0], biasShape[1]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 3) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1]);\n      } else {\n        return tfc.reshape(bias, [1, biasShape[1], biasShape[0]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank < 3) {\n    return bias;\n  }\n  throw new ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);\n}\n\n/* Neural-network operations. */\n\n/**\n * Add a bias to a tensor.\n *\n * @param x The tensor to add the bias to.\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\n * @return Result of the bias adding.\n * @throws ValueError: If the rank of `bias` is incorrect.\n */\nexport function biasAdd(\n    x: Tensor, bias: Tensor, dataFormat?: DataFormat): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n\n    return tfc.add(x, reshapeBias(x.rank, bias, dataFormat));\n  });\n}\n\n/**\n * Exponential linear unit (ELU).\n * @param x A tensor or variable to compute the activation function for.\n * @param alpha: A scalar, a scaling factor for the negative section.\n * @return Output of the ELU operation.\n */\nexport function elu(x: Tensor, alpha = 1): Tensor {\n  // TODO(cais): Add support for alpha values other than 1.\n  if (alpha !== 1) {\n    throw new NotImplementedError(\n        `Support for alpha values other than 1 (${alpha}) is not implemented ` +\n        `yet.`);\n  }\n  return tfc.elu(x);\n}\n\n/**\n * Softsign of a tensor.\n *\n * Defined as x / (abs(x) + 1), element-wise.\n *\n * @param x: Input.\n * @returns Output.\n */\nexport function softsign(x: Tensor): Tensor {\n  return tidy(() => tfc.div(x, tfc.add(tfc.abs(x), 1)));\n}\n\n/**\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\n *\n * @param x input tensor.\n * @param level fraction of the entries in the tensor that will be set to 0.\n * @param noiseShape shape of randomly generated keep/drop flags, must be\n *   broadcastable to the shape of `x`. Optional.\n * @param seed random seed to ensure determinism. Optional.\n * @returns Result of the dropout operation.\n */\nexport function dropout(\n    x: Tensor, level: number, noiseShape?: number[], seed?: number): Tensor {\n  return tidy(() => tfc.dropout(x, level, noiseShape, seed));\n}\n\n/**\n * Element-wise, segment-wise linear approximation of sigmoid.\n *\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n *\n * @param x Input tensor.\n * @returns Output tensor.\n */\nexport function hardSigmoid(x: Tensor): Tensor {\n  return tidy(() => {\n    const y = tfc.add(.5, tfc.mul(.2, x));\n    return tfc.clipByValue(y, 0, 1);\n  });\n}\n\n/**\n * Invoke `x` in the training phase, and `alt` otherwise.\n *\n * Porting Note: We do not create placeholder tensors for the `training`\n * boolean flag here, because there is no such thing in the TF.js imperative\n * backend.\n *\n * @param x The function to invoke iff `training` is `true`.\n * @param alt The function to invoke iff `training` is `false`.\n * @param training Boolean flag for whether training phase is active.\n * @returns The return value of `x()` if `training` is `true`, or the return\n *   value of `alt()` if `training` is `false`.\n */\nexport function inTrainPhase<T>(x: () => T, alt: () => T, training = false): T {\n  return training ? x() : alt();\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {BaseSerialization} from './types';\n\n// TODO(soergel): Move the CamelCase versions back out of keras_format\n// e.g. to src/common.ts.  Maybe even duplicate *all* of these to be pedantic?\n/** @docinline */\nexport type FanMode = 'fanIn'|'fanOut'|'fanAvg';\nexport const VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg'];\n\n// These constants have a snake vs. camel distinction.\nexport type FanModeSerialization = 'fan_in'|'fan_out'|'fan_avg';\n\n/** @docinline */\nexport type Distribution = 'normal'|'uniform'|'truncatedNormal';\nexport const VALID_DISTRIBUTION_VALUES =\n    ['normal', 'uniform', 'truncatedNormal'];\n// These constants have a snake vs. camel distinction.\nexport type DistributionSerialization = 'normal'|'uniform'|'truncated_normal';\n\nexport type ZerosSerialization = BaseSerialization<'Zeros', {}>;\n\nexport type OnesSerialization = BaseSerialization<'Ones', {}>;\n\nexport type ConstantConfig = {\n  value: number;\n};\n\nexport type ConstantSerialization =\n    BaseSerialization<'Constant', ConstantConfig>;\n\nexport type RandomNormalConfig = {\n  mean?: number;\n  stddev?: number;\n  seed?: number;\n};\n\nexport type RandomNormalSerialization =\n    BaseSerialization<'RandomNormal', RandomNormalConfig>;\n\nexport type RandomUniformConfig = {\n  minval?: number;\n  maxval?: number;\n  seed?: number;\n};\n\nexport type RandomUniformSerialization =\n    BaseSerialization<'RandomUniform', RandomUniformConfig>;\n\nexport type TruncatedNormalConfig = {\n  mean?: number;\n  stddev?: number;\n  seed?: number;\n};\n\nexport type TruncatedNormalSerialization =\n    BaseSerialization<'TruncatedNormal', TruncatedNormalConfig>;\n\nexport type VarianceScalingConfig = {\n  scale?: number;\n\n  mode?: FanModeSerialization;\n  distribution?: DistributionSerialization;\n  seed?: number;\n};\n\nexport type VarianceScalingSerialization =\n    BaseSerialization<'VarianceScaling', VarianceScalingConfig>;\n\nexport type OrthogonalConfig = {\n  seed?: number;\n  gain?: number;\n};\n\nexport type OrthogonalSerialization =\n    BaseSerialization<'Orthogonal', OrthogonalConfig>;\n\nexport type IdentityConfig = {\n  gain?: number;\n};\n\nexport type IdentitySerialization =\n    BaseSerialization<'Identity', IdentityConfig>;\n\n// Update initializerClassNames below in concert with this.\nexport type InitializerSerialization = ZerosSerialization|OnesSerialization|\n    ConstantSerialization|RandomUniformSerialization|RandomNormalSerialization|\n    TruncatedNormalSerialization|IdentitySerialization|\n    VarianceScalingSerialization|OrthogonalSerialization;\n\nexport type InitializerClassName = InitializerSerialization['class_name'];\n\n// We can't easily extract a string[] from the string union type, but we can\n// recapitulate the list, enforcing at compile time that the values are valid\n// and that we have the right number of them.\n\n/**\n * A string array of valid Initializer class names.\n *\n * This is guaranteed to match the `InitializerClassName` union type.\n */\nexport const initializerClassNames: InitializerClassName[] = [\n  'Zeros', 'Ones', 'Constant', 'RandomNormal', 'RandomUniform',\n  'TruncatedNormal', 'VarianceScaling', 'Orthogonal', 'Identity'\n];\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType, eye, linalg, mul, ones, randomUniform, scalar, serialization, Tensor, Tensor2D, tidy, transpose, truncatedNormal, zeros} from '@tensorflow/tfjs-core';\n\nimport * as K from './backend/tfjs_backend';\nimport {checkDataFormat} from './common';\nimport {NotImplementedError, ValueError} from './errors';\nimport {DataFormat, Shape} from './keras_format/common';\nimport {Distribution, FanMode, VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES} from './keras_format/initializer_config';\nimport {checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\nimport {arrayProd} from './utils/math_utils';\n\nexport function checkFanMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\n\nexport function checkDistribution(value?: string): void {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport abstract class Initializer extends serialization.Serializable {\n  public fromConfigUsesCustomObjects(): boolean {\n    return false;\n  }\n  /**\n   * Generate an initial value.\n   * @param shape\n   * @param dtype\n   * @return The init value.\n   */\n  abstract apply(shape: Shape, dtype?: DataType): Tensor;\n\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport class Zeros extends Initializer {\n  /** @nocollapse */\n  static className = 'Zeros';\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return zeros(shape, dtype);\n  }\n}\nserialization.registerClass(Zeros);\n\nexport class Ones extends Initializer {\n  /** @nocollapse */\n  static className = 'Ones';\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return ones(shape, dtype);\n  }\n}\nserialization.registerClass(Ones);\n\nexport interface ConstantArgs {\n  /** The value for each element in the variable. */\n  value: number;\n}\n\nexport class Constant extends Initializer {\n  /** @nocollapse */\n  static className = 'Constant';\n  private value: number;\n  constructor(args: ConstantArgs) {\n    super();\n    if (typeof args !== 'object') {\n      throw new ValueError(\n          `Expected argument of type ConstantConfig but got ${args}`);\n    }\n    if (args.value === undefined) {\n      throw new ValueError(`config must have value set but got ${args}`);\n    }\n    this.value = args.value;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      value: this.value,\n    };\n  }\n}\nserialization.registerClass(Constant);\n\nexport interface RandomUniformArgs {\n  /** Lower bound of the range of random values to generate. */\n  minval?: number;\n  /** Upper bound of the range of random values to generate. */\n  maxval?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class RandomUniform extends Initializer {\n  /** @nocollapse */\n  static className = 'RandomUniform';\n  readonly DEFAULT_MINVAL = -0.05;\n  readonly DEFAULT_MAXVAL = 0.05;\n  private minval: number;\n  private maxval: number;\n  private seed: number;\n\n  constructor(args: RandomUniformArgs) {\n    super();\n    this.minval = args.minval || this.DEFAULT_MINVAL;\n    this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return randomUniform(shape, this.minval, this.maxval, dtype);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {minval: this.minval, maxval: this.maxval, seed: this.seed};\n  }\n}\nserialization.registerClass(RandomUniform);\n\nexport interface RandomNormalArgs {\n  /** Mean of the random values to generate. */\n  mean?: number;\n  /** Standard deviation of the random values to generate. */\n  stddev?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class RandomNormal extends Initializer {\n  /** @nocollapse */\n  static className = 'RandomNormal';\n  readonly DEFAULT_MEAN = 0.;\n  readonly DEFAULT_STDDEV = 0.05;\n  private mean: number;\n  private stddev: number;\n  private seed: number;\n\n  constructor(args: RandomNormalArgs) {\n    super();\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\n          `randomNormal does not support dType ${dtype}.`);\n    }\n\n    return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {mean: this.mean, stddev: this.stddev, seed: this.seed};\n  }\n}\nserialization.registerClass(RandomNormal);\n\nexport interface TruncatedNormalArgs {\n  /** Mean of the random values to generate. */\n  mean?: number;\n  /** Standard deviation of the random values to generate. */\n  stddev?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class TruncatedNormal extends Initializer {\n  /** @nocollapse */\n  static className = 'TruncatedNormal';\n\n  readonly DEFAULT_MEAN = 0.;\n  readonly DEFAULT_STDDEV = 0.05;\n  private mean: number;\n  private stddev: number;\n  private seed: number;\n\n  constructor(args: TruncatedNormalArgs) {\n    super();\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\n          `truncatedNormal does not support dType ${dtype}.`);\n    }\n    return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {mean: this.mean, stddev: this.stddev, seed: this.seed};\n  }\n}\nserialization.registerClass(TruncatedNormal);\n\nexport interface IdentityArgs {\n  /**\n   * Multiplicative factor to apply to the identity matrix.\n   */\n  gain?: number;\n}\n\nexport class Identity extends Initializer {\n  /** @nocollapse */\n  static className = 'Identity';\n  private gain: number;\n  constructor(args: IdentityArgs) {\n    super();\n    this.gain = args.gain != null ? args.gain : 1.0;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => {\n      if (shape.length !== 2 || shape[0] !== shape[1]) {\n        throw new ValueError(\n            'Identity matrix initializer can only be used for' +\n            ' 2D square matrices.');\n      } else {\n        return mul(this.gain, eye(shape[0]));\n      }\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {gain: this.gain};\n  }\n}\nserialization.registerClass(Identity);\n\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(\n    shape: Shape, dataFormat: DataFormat = 'channelsLast'): number[] {\n  let fanIn: number;\n  let fanOut: number;\n  checkDataFormat(dataFormat);\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      const receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * receptiveFieldSize;\n    }\n  } else {\n    const shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n\n  return [fanIn, fanOut];\n}\n\nexport interface VarianceScalingArgs {\n  /** Scaling factor (positive float). */\n  scale?: number;\n\n  /** Fanning mode for inputs and outputs. */\n  mode?: FanMode;\n\n  /** Probabilistic distribution of the values. */\n  distribution?: Distribution;\n\n  /** Random number generator seed. */\n  seed?: number;\n}\n\nexport class VarianceScaling extends Initializer {\n  /** @nocollapse */\n  static className = 'VarianceScaling';\n  private scale: number;\n  private mode: FanMode;\n  private distribution: Distribution;\n  private seed: number;\n\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  constructor(args: VarianceScalingArgs) {\n    super();\n    if (args.scale < 0.0) {\n      throw new ValueError(\n          `scale must be a positive float. Got: ${args.scale}`);\n    }\n    this.scale = args.scale == null ? 1.0 : args.scale;\n    this.mode = args.mode == null ? 'fanIn' : args.mode;\n    checkFanMode(this.mode);\n    this.distribution =\n        args.distribution == null ? 'normal' : args.distribution;\n    checkDistribution(this.distribution);\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    const fans = computeFans(shape);\n    const fanIn = fans[0];\n    const fanOut = fans[1];\n    let scale = this.scale;\n    if (this.mode === 'fanIn') {\n      scale /= Math.max(1, fanIn);\n    } else if (this.mode === 'fanOut') {\n      scale /= Math.max(1, fanOut);\n    } else {\n      scale /= Math.max(1, (fanIn + fanOut) / 2);\n    }\n\n    if (this.distribution === 'normal') {\n      const stddev = Math.sqrt(scale);\n      dtype = dtype || 'float32';\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\n            `${this.getClassName()} does not support dType ${dtype}.`);\n      }\n      return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n    } else {\n      const limit = Math.sqrt(3 * scale);\n      return randomUniform(shape, -limit, limit, dtype);\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      scale: this.scale,\n      mode: this.mode,\n      distribution: this.distribution,\n      seed: this.seed\n    };\n  }\n}\nserialization.registerClass(VarianceScaling);\n\nexport interface SeedOnlyInitializerArgs {\n  /** Random number generator seed. */\n  seed?: number;\n}\n\nexport class GlorotUniform extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'GlorotUniform';\n\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, GlorotUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(GlorotUniform);\n\nexport class GlorotNormal extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'GlorotNormal';\n\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, GlorotNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(GlorotNormal);\n\nexport class HeNormal extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'HeNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, HeNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(HeNormal);\n\nexport class HeUniform extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'HeUniform';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, HeUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(HeUniform);\n\nexport class LeCunNormal extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'LeCunNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, LeCunNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(LeCunNormal);\n\nexport class LeCunUniform extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'LeCunNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, LeCunUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(LeCunUniform);\n\nexport interface OrthogonalArgs extends SeedOnlyInitializerArgs {\n  /**\n   * Multiplicative factor to apply to the orthogonal matrix. Defaults to 1.\n   */\n  gain?: number;\n}\n\nexport class Orthogonal extends Initializer {\n  /** @nocollapse */\n  static className = 'Orthogonal';\n  readonly DEFAULT_GAIN = 1;\n  protected readonly gain: number;\n  protected readonly seed: number;\n\n  constructor(args?: OrthogonalArgs) {\n    super();\n    this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n    this.seed = args.seed;\n\n    if (this.seed != null) {\n      throw new NotImplementedError(\n          'Random seed is not implemented for Orthogonal Initializer yet.');\n    }\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => {\n      if (shape.length < 2) {\n        throw new NotImplementedError('Shape must be at least 2D.');\n      }\n      if (shape[0] * shape[1] > 2000) {\n        console.warn(\n            `Orthogonal initializer is being called on a matrix with more ` +\n            `than 2000 (${shape[0] * shape[1]}) elements: ` +\n            `Slowness may result.`);\n      }\n\n      // TODO(cais): Add seed support.\n      const normalizedShape =\n          shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n      const a = K.randomNormal(normalizedShape, 0, 1, 'float32') as Tensor2D;\n      let q = linalg.gramSchmidt(a) as Tensor2D;\n      if (shape[0] > shape[1]) {\n        q = transpose(q);\n      }\n      return mul(this.gain, q);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      gain: this.gain,\n      seed: this.seed,\n    };\n  }\n}\nserialization.registerClass(Orthogonal);\n\n/** @docinline */\nexport type InitializerIdentifier =\n    'constant'|'glorotNormal'|'glorotUniform'|'heNormal'|'heUniform'|'identity'|\n    'leCunNormal'|'leCunUniform'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in InitializerIdentifier]: string} = {\n      'constant': 'Constant',\n      'glorotNormal': 'GlorotNormal',\n      'glorotUniform': 'GlorotUniform',\n      'heNormal': 'HeNormal',\n      'heUniform': 'HeUniform',\n      'identity': 'Identity',\n      'leCunNormal': 'LeCunNormal',\n      'leCunUniform': 'LeCunUniform',\n      'ones': 'Ones',\n      'orthogonal': 'Orthogonal',\n      'randomNormal': 'RandomNormal',\n      'randomUniform': 'RandomUniform',\n      'truncatedNormal': 'TruncatedNormal',\n      'varianceScaling': 'VarianceScaling',\n      'zeros': 'Zeros'\n    };\n\nfunction deserializeInitializer(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Initializer {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'initializer');\n}\n\nexport function serializeInitializer(initializer: Initializer):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(initializer);\n}\n\nexport function getInitializer(identifier: InitializerIdentifier|Initializer|\n                               serialization.ConfigDict): Initializer {\n  if (typeof identifier === 'string') {\n    const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n    if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'HeUniform') {\n      return new HeUniform();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else if (className === 'LeCunUniform') {\n      return new LeCunUniform();\n    } else {\n      const config: serialization.ConfigDict = {};\n      config['className'] = className;\n      config['config'] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\nimport {ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\n// tslint:enable\n\n/**\n * Determine whether the input is an Array of Shapes.\n */\nexport function isArrayOfShapes(x: Shape|Shape[]): boolean {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\nexport function normalizeShapeList(x: Shape|Shape[]): Shape[] {\n  if (x.length === 0) {\n    return [];\n  }\n  if (!Array.isArray(x[0])) {\n    return [x] as Shape[];\n  }\n  return x as Shape[];\n}\n\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\nexport function getExactlyOneTensor(xs: Tensor|Tensor[]): Tensor {\n  let x: Tensor;\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n  return x;\n}\n\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\nexport function getExactlyOneShape(shapes: Shape|Shape[]): Shape {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes as Shape[];\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes as Shape;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {LayerVariable} from '../variables';\n\n/**\n * Count the elements in an Array of LayerVariables.\n *\n * @param weights: The LayerVariables of which the constituent numbers are to\n *   be counted.\n * @returns A count of the elements in all the LayerVariables\n */\nexport function countParamsInWeights(weights: LayerVariable[]): number {\n  let count = 0;\n  for (const weight of weights) {\n    if (weight.shape.length === 0) {\n      count += 1;\n    } else {\n      count += weight.shape.reduce((a, b) => a * b);\n    }\n  }\n  return count;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, Tensor, variableGrads} from '@tensorflow/tfjs-core';\n\nimport {getNextUniqueTensorId} from './backend/state';\nimport {getScopedTensorName, getUniqueTensorName} from './common';\nimport {Constraint} from './constraints';\nimport {NotImplementedError} from './errors';\nimport {Shape} from './keras_format/common';\nimport {HasShape} from './types';\n\nconst DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\n\n/**\n * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a\n * dtype and shape, but its value is mutable.  The value is itself represented\n * as a`tf.Tensor`, and can be read with the `read()` method and updated with\n * the `write()` method.\n */\nexport class LayerVariable {\n  readonly dtype: DataType;\n  readonly shape: Shape;\n\n  readonly id: number;\n  // The fully scoped name of this Variable, including a unique suffix if needed\n  readonly name: string;\n  // The originally requested fully scoped name of this Variable, not including\n  // any unique suffix.  This may be needed when restoring weights because this\n  // original name is used as a key.\n  readonly originalName: string;\n  private trainable_: boolean;\n\n  protected readonly val: tfc.Variable;\n  readonly constraint: Constraint;\n  /**\n   * Construct Variable from a `tf.Tensor`.\n   *\n   * If not explicitly named, the Variable will be given a name with the\n   * prefix 'Variable'. Variable names are unique. In the case of name\n   * collision, suffixies '_<num>' will be added to the name.\n   *\n   * @param val Initial value of the Variable.\n   * @param name Name of the variable. If `null` or `undefined` is provided, it\n   *   will default a name with the prefix 'Variable'.\n   * @param constraint Optional, projection function to be applied to the\n   * variable after optimize updates\n   * @throws ValueError if `name` is `null` or `undefined`.\n   */\n  constructor(\n      val: Tensor, dtype: DataType = 'float32',\n      name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true,\n      constraint: Constraint = null) {\n    this.dtype = dtype == null ? 'float32' : dtype;\n    this.shape = val.shape;\n    this.id = getNextUniqueTensorId();\n\n    name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n    this.originalName = getScopedTensorName(name);\n    this.name = getUniqueTensorName(this.originalName);\n\n    this.trainable_ = trainable;\n    this.constraint = constraint;\n\n    this.val = tfc.variable(val, this.trainable_, this.name, this.dtype);\n  }\n\n  /**\n   * Get a snapshot of the Variable's value.\n   *\n   * The returned value is a snapshot of the Variable's value at the time of\n   * the invocation. Future mutations in the value of the tensor will only\n   * be reflected by future calls to this method.\n   */\n  read(): Tensor {\n    this.assertNotDisposed();\n    return this.val;\n  }\n\n  /**\n   * Update the value of the Variable.\n   *\n   * @param newVal: The new value to update to. Must be consistent with the\n   *   dtype and shape of the Variable.\n   * @return This Variable.\n   */\n  write(newVal: Tensor) {\n    // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.\n    this.assertNotDisposed();\n    checkShapesMatch(this.val, newVal);\n    // Skip updating if this is the exact same tensor.\n    if (this.val.id !== newVal.id) {\n      this.val.assign(newVal);\n      if (this.constraint != null) {\n        this.val.assign(this.constraint.apply(this.val));\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Dispose this LayersVariable instance from memory.\n   */\n  dispose(): void {\n    this.assertNotDisposed();\n    this.val.dispose();\n  }\n\n  protected assertNotDisposed(): void {\n    if (this.val.isDisposed) {\n      throw new Error(`LayersVariable ${this.name} is already disposed.`);\n    }\n  }\n\n  get trainable(): boolean {\n    return this.trainable_;\n  }\n\n  set trainable(trainable: boolean) {\n    this.trainable_ = trainable;\n    this.val.trainable = trainable;\n  }\n}\n\nfunction checkShapesMatch(x: HasShape, y: HasShape): void {\n  if (x.shape.toString() !== y.shape.toString()) {\n    throw new Error(\n        'Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' +\n        JSON.stringify(y.shape));\n  }\n}\n\n/**\n * Create a Variable.\n * @param x The initial value of the `Variable`.\n * @param dtype optional, the type of the variable.\n * @param name optional, the name of the variable, default provided by\n * Variable.\n * @param constraint optional, a constraint to be applied after every update.\n * @return The newly instantiated `Variable`.\n */\nexport function variable(\n    x: Tensor, dtype?: DataType, name?: string,\n    constraint?: Constraint): LayerVariable {\n  return new LayerVariable(x, dtype, name, true, constraint);\n}\n\n/**\n * Instantiates an all-zeros Variable and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-zero Variable.\n */\nexport function zerosVariable(\n    shape: Shape, dtype?: DataType, name?: string): LayerVariable {\n  // TODO(cais): Implement logic for dtype.\n  return new LayerVariable(tfc.zeros(shape), dtype, name);\n}\n\n/**\n * Instantiates an all-zeros tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function zerosLike(\n    x: Tensor, dtype?: DataType, name?: string): LayerVariable {\n  return new LayerVariable(tfc.zerosLike(x), dtype, name);\n}\n\n/**\n * Instantiates an all-ones tensor and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-ones Variable.\n */\nexport function onesVariable(\n    shape: Shape, dtype?: DataType, name?: string): LayerVariable {\n  // TODO(cais): Implement logic for dtype.\n  const allocated = tfc.ones(shape);\n  return new LayerVariable(allocated, dtype, name);\n}\n\n/**\n * Instantiates an all-ones tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function onesLike(\n    x: Tensor, dtype?: DataType, name?: string): LayerVariable {\n  const allocated = tfc.onesLike(x);\n  return new LayerVariable(allocated, dtype, name);\n}\n\n/**\n * Instantiate an identity matrix and returns it, as a Variable\n *\n * @param size Number of rows/columns.\n * @param dtype Data type of returned Variable.\n * @param name Name of returned Variable.\n * @return A Variable, an identity matrix.\n */\nexport function eyeVariable(\n    size: number, dtype?: DataType, name?: string): LayerVariable {\n  return new LayerVariable(tfc.eye(size), dtype, name);\n}\n\n/**\n * Get a Variable with uniform distribution of values.\n * @param shape Shape of the tensor.\n * @param minval Lower bound of the uniform distribution.\n * @param maxval Upper bound of the uniform distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The uniform-random Variable.\n */\nexport function randomUniformVariable(\n    shape: Shape, minval: number, maxval: number, dtype?: DataType,\n    seed?: number, name = 'randomUniform'): LayerVariable {\n  return new LayerVariable(\n      tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);\n}\n\n/**\n * Get a Variable with truncated-normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function truncatedNormalVariable(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: DataType, seed?: number,\n    name = 'truncatedNormal'): LayerVariable {\n  // TODO(cais): Implement logic for dtype and seed once they are supported\n  // by deeplearn.js.\n  dtype = dtype || 'float32';\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(\n        `randomNormal does not support dType ${dtype}.`);\n  }\n  return new LayerVariable(\n      tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Get a Variable with normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function randomNormalVariable(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: DataType, seed?: number,\n    name = 'randomNormal'): LayerVariable {\n  dtype = dtype || 'float32';\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(\n        `randomNormalVariable does not support dType ${dtype}.`);\n  }\n  return new LayerVariable(\n      tfc.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n\n/**\n * Update the value of a Variable.\n * @param x The Variable to be updated.\n * @param xNew The new value to update to.\n * @return The Variable updated.\n */\nexport function update(x: LayerVariable, xNew: Tensor): LayerVariable {\n  return x.write(xNew);\n}\n\n/**\n * Update the value of a Variable by adding an increment.\n * @param x The Variable to be updated.\n * @param increment The incrment to add to `x`.\n * @return The Variable updated.\n */\nexport function updateAdd(x: LayerVariable, increment: Tensor): LayerVariable {\n  return x.write(tfc.add(x.read(), increment));\n}\n\n/**\n * Update the value of a Variable by subtracting a decrement.\n * @param x The Variable to be updated.\n * @param decrement The decrement to subtract from `x`.\n * @return The Variable updated.\n */\nexport function updateSub(x: LayerVariable, decrement: Tensor): LayerVariable {\n  return x.write(tfc.sub(x.read(), decrement));\n}\n\n/**\n * Get the values of an array of Variables.\n *\n * @param tensors An `Array` of `Variable`s to get the values of.\n * @return The values of the inputs, as an `Array` of`tf.Tensor`s.\n */\nexport function batchGetValue(xs: LayerVariable[]): Tensor[] {\n  return xs.map(x => x.read());\n}\n\n/**\n * Update the value of multiple Variables at once.\n *\n * @param variablesAndValues An `Array`, each element is of type\n *   [Variable, Tensor]. The first item is the\n *   `Variable` of which the value is to be updated. The second item\n *   carries the new value.\n */\nexport function batchSetValue(\n    variablesAndValues: Array<[LayerVariable, Tensor]>): void {\n  variablesAndValues.forEach(variableAndValue => {\n    const variable: LayerVariable = variableAndValue[0];\n    variable.write(variableAndValue[1]);\n  });\n}\n\n/**\n * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.\n * @param lossFn A function which returns a Scalar to be used as the function\n *   value (i.e., numerator) for differentiation.\n * @param variables List of variables to be used as the independent variables\n *   (i.e., denominator) for differentiation.\n * @returns An Array of gradients tensors.\n */\nexport function gradients(\n    lossFn: () => tfc.Scalar, variables: LayerVariable[]): Tensor[] {\n  // TODO(cais): The return type signature can be simplified if deeplearn makes\n  //   the corresponding type public.\n  const variableList =\n      variables.map(variable => variable.read() as tfc.Variable);\n  const valudAndGrads = variableGrads(lossFn, variableList);\n  return variables.map(variable => valudAndGrads.grads[variable.name]);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/engine/topology.py */\n\nimport {DataType, Scalar, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {getNextUniqueTensorId, getUid} from '../backend/state';\nimport {getScopedTensorName, getUniqueTensorName, nameScope} from '../common';\nimport {Constraint} from '../constraints';\nimport {AttributeError, NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {getInitializer, Initializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {Regularizer} from '../regularizers';\nimport {Kwargs, RegularizerFn} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as types_utils from '../utils/types_utils';\nimport * as variable_utils from '../utils/variable_utils';\nimport {batchGetValue, batchSetValue, LayerVariable} from '../variables';\n\n// TODO(michaelterry): This is a stub until it's defined.\nexport type Op = (x: LayerVariable) => LayerVariable;\n\n/**\n * Constructor arguments for InputSpec.\n */\nexport interface InputSpecArgs {\n  /** Expected datatype of the input. */\n  dtype?: DataType;\n  /** Expected shape of the input (may include null for unchecked axes). */\n  shape?: Shape;\n  /** Expected rank of the input. */\n  ndim?: number;\n  /** Maximum rank of the input. */\n  maxNDim?: number;\n  /** Minimum rank of the input. */\n  minNDim?: number;\n  /** Dictionary mapping integer axes to a specific dimension value. */\n  axes?: {[axis: number]: number};\n}\n\n/**\n * Specifies the ndim, dtype and shape of every input to a layer.\n *\n * Every layer should expose (if appropriate) an `inputSpec` attribute:\n * a list of instances of InputSpec (one per input tensor).\n *\n * A null entry in a shape is compatible with any dimension,\n * a null shape is compatible with any shape.\n */\nexport class InputSpec {\n  /** Expected datatype of the input. */\n  dtype?: DataType;\n  /** Expected shape of the input (may include null for unchecked axes). */\n  shape?: Shape;\n  /** Expected rank of the input. */\n  ndim?: number;\n  /** Maximum rank of the input. */\n  maxNDim?: number;\n  /** Minimum rank of the input. */\n  minNDim?: number;\n  /** Dictionary mapping integer axes to a specific dimension value. */\n  axes?: {[axis: number]: number};\n\n  constructor(args: InputSpecArgs) {\n    this.dtype = args.dtype;\n    this.shape = args.shape;\n    /*\n      TODO(michaelterry): Could throw error if ndim and shape are both defined\n        (then backport).\n    */\n    if (args.shape != null) {\n      this.ndim = args.shape.length;\n    } else {\n      this.ndim = args.ndim;\n    }\n    this.maxNDim = args.maxNDim;\n    this.minNDim = args.minNDim;\n    this.axes = args.axes || {};\n  }\n}\n\n/**\n * `tf.SymbolicTensor` is a placeholder for a Tensor without any concrete value.\n *\n * They are most often encountered when building a graph of `Layer`s for a\n * `tf.LayersModel` and the input data's shape, but not values are known.\n *\n * @doc {heading: 'Models', 'subheading': 'Classes'}\n */\nexport class SymbolicTensor {\n  /* A unique ID for the tensor to be able to differentiate tensors. */\n  readonly id: number;\n  // The fully scoped name of this Variable, including a unique suffix if needed\n  readonly name: string;\n  // The originally requested fully scoped name of this Variable, not including\n  // any unique suffix.  This may be needed when restoring weights because this\n  // original name is used as a key.\n  readonly originalName?: string;\n  /**\n   * Rank/dimensionality of the tensor.\n   */\n  readonly rank: number;\n  /**\n   * Replacement for _keras_history.\n   */\n  nodeIndex: number;\n  /**\n   * Replacement for _keras_history.\n   */\n  tensorIndex: number;\n\n  /**\n   *\n   * @param dtype\n   * @param shape\n   * @param sourceLayer The Layer that produced this symbolic tensor.\n   * @param inputs The inputs passed to sourceLayer's __call__() method.\n   * @param nodeIndex\n   * @param tensorIndex\n   * @param callArgs The keyword arguments passed to the __call__() method.\n   * @param name\n   * @param outputTensorIndex The index of this tensor in the list of outputs\n   *   returned by apply().\n   */\n  constructor(\n      readonly dtype: DataType, readonly shape: Shape,\n      public sourceLayer: Layer, readonly inputs: SymbolicTensor[],\n      readonly callArgs: Kwargs, name?: string,\n      readonly outputTensorIndex?: number) {\n    this.id = getNextUniqueTensorId();\n    if (name != null) {\n      this.originalName = getScopedTensorName(name);\n      this.name = getUniqueTensorName(this.originalName);\n    }\n    this.rank = shape.length;\n  }\n}\n\n/**\n * Constructor arguments for Node.\n */\nexport interface NodeArgs {\n  /**\n   * The layer that takes `inputTensors` and turns them into `outputTensors`.\n   * (the node gets created when the `call` method of the layer is called).\n   */\n  outboundLayer: Layer;\n  /**\n   * A list of layers, the same length as `inputTensors`, the layers from where\n   * `inputTensors` originate.\n   */\n  inboundLayers: Layer[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `nodeIndices[i]` is\n   * the origin node of `inputTensors[i]` (necessary since each inbound layer\n   * might have several nodes, e.g. if the layer is being shared with a\n   * different data stream).\n   */\n  nodeIndices: number[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `tensorIndices[i]`\n   * is the index of `inputTensors[i]` within the output of the inbound layer\n   * (necessary since each inbound layer might have multiple tensor outputs,\n   * with each one being independently manipulable).\n   */\n  tensorIndices: number[];\n  /** List of input tensors. */\n  inputTensors: SymbolicTensor[];\n  /** List of output tensors. */\n  outputTensors: SymbolicTensor[];\n  /** List of input masks (a mask can be a tensor, or null). */\n  inputMasks: Tensor[];\n  /** List of output masks (a mask can be a tensor, or null). */\n  outputMasks: Tensor[];\n  /** List of input shape tuples. */\n  inputShapes: Shape|Shape[];\n  /** List of output shape tuples. */\n  outputShapes: Shape|Shape[];\n}\n\n/**\n * The type of the return value of Layer.dispose() and Container.dispose().\n */\nexport interface DisposeResult {\n  /**\n   * Reference count after the dispose call.\n   */\n  refCountAfterDispose: number;\n\n  /**\n   * Number of variables dispose in this dispose call.\n   */\n  numDisposedVariables: number;\n}\n\nlet _nextNodeID = 0;\n\n/**\n * A `Node` describes the connectivity between two layers.\n *\n * Each time a layer is connected to some new input,\n * a node is added to `layer.inboundNodes`.\n *\n * Each time the output of a layer is used by another layer,\n * a node is added to `layer.outboundNodes`.\n *\n * `nodeIndices` and `tensorIndices` are basically fine-grained coordinates\n * describing the origin of the `inputTensors`, verifying the following:\n *\n * `inputTensors[i] ==\n * inboundLayers[i].inboundNodes[nodeIndices[i]].outputTensors[\n *   tensorIndices[i]]`\n *\n * A node from layer A to layer B is added to:\n *     A.outboundNodes\n *     B.inboundNodes\n */\nexport class Node {\n  /**\n   * The layer that takes `inputTensors` and turns them into `outputTensors`\n   * (the node gets created when the `call` method of the layer is called).\n   */\n  outboundLayer: Layer;\n  /**\n   * A list of layers, the same length as `inputTensors`, the layers from where\n   * `inputTensors` originate.\n   */\n  inboundLayers: Layer[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `nodeIndices[i]` is\n   * the origin node of `inputTensors[i]` (necessary since each inbound layer\n   * might have several nodes, e.g. if the layer is being shared with a\n   * different data stream).\n   */\n  nodeIndices: number[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `tensorIndices[i]`\n   * is the index of `inputTensors[i]` within the output of the inbound layer\n   * (necessary since each inbound layer might have multiple tensor outputs,\n   * with each one being independently manipulable).\n   */\n  tensorIndices: number[];\n  /** List of input tensors. */\n  inputTensors: SymbolicTensor[];\n  /** List of output tensors. */\n  outputTensors: SymbolicTensor[];\n  /** List of input masks (a mask can be a tensor, or null). */\n  inputMasks: Tensor[];\n  /** List of output masks (a mask can be a tensor, or null). */\n  outputMasks: Tensor[];\n  /** List of input shape tuples. */\n  inputShapes: Shape|Shape[];\n  /** List of output shape tuples. */\n  outputShapes: Shape|Shape[];\n\n  readonly id: number;\n\n  constructor(\n      args: NodeArgs,\n      // TODO(michaelterry): Define actual type for this.\n      public callArgs?: Kwargs) {\n    this.id = _nextNodeID++;\n    /*\n      Layer instance (NOT a list).\n      this is the layer that takes a list of input tensors\n      and turns them into a list of output tensors.\n      the current node will be added to\n      the inboundNodes of outboundLayer.\n    */\n    this.outboundLayer = args.outboundLayer;\n\n    /*\n        The following 3 properties describe where\n        the input tensors come from: which layers,\n        and for each layer, which node and which\n        tensor output of each node.\n    */\n\n    // List of layer instances.\n    this.inboundLayers = args.inboundLayers;\n    // List of integers, 1:1 mapping with inboundLayers.\n    this.nodeIndices = args.nodeIndices;\n    // List of integers, 1:1 mapping with inboundLayers.\n    this.tensorIndices = args.tensorIndices;\n\n    /*\n        Following 2 properties:\n        tensor inputs and outputs of outboundLayer.\n    */\n\n    // List of tensors. 1:1 mapping with inboundLayers.\n    this.inputTensors = args.inputTensors;\n    // List of tensors, created by outboundLayer.call().\n    this.outputTensors = args.outputTensors;\n\n    /*\n        Following 2 properties: input and output masks.\n        List of tensors, 1:1 mapping with inputTensor.\n    */\n    this.inputMasks = args.inputMasks;\n    // List of tensors, created by outboundLayer.computeMask().\n    this.outputMasks = args.outputMasks;\n\n    // Following 2 properties: input and output shapes.\n\n    // List of shape tuples, shapes of inputTensors.\n    this.inputShapes = args.inputShapes;\n    // List of shape tuples, shapes of outputTensors.\n    this.outputShapes = args.outputShapes;\n\n    // Add nodes to all layers involved.\n    for (const layer of args.inboundLayers) {\n      if (layer != null) {\n        layer.outboundNodes.push(this);\n      }\n    }\n    args.outboundLayer.inboundNodes.push(this);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const inboundNames: string[] = [];\n    for (const layer of this.inboundLayers) {\n      if (layer != null) {\n        inboundNames.push(layer.name);\n      } else {\n        inboundNames.push(null);\n      }\n    }\n    return {\n      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,\n      inboundLayers: inboundNames,\n      nodeIndices: this.nodeIndices,\n      tensorIndices: this.tensorIndices\n    };\n  }\n}\n\n/** Constructor arguments for Layer. */\nexport declare interface LayerArgs {\n  /**\n   * If defined, will be used to create an input layer to insert before this\n   * layer. If both `inputShape` and `batchInputShape` are defined,\n   * `batchInputShape` will be used. This argument is only applicable to input\n   * layers (the first layer of a model).\n   */\n  inputShape?: Shape;\n  /**\n   * If defined, will be used to create an input layer to insert before this\n   * layer. If both `inputShape` and `batchInputShape` are defined,\n   * `batchInputShape` will be used. This argument is only applicable to input\n   * layers (the first layer of a model).\n   */\n  batchInputShape?: Shape;\n  /**\n   * If `inputShape` is specified and `batchInputShape` is *not* specified,\n   * `batchSize` is used to construct the `batchInputShape`: `[batchSize,\n   * ...inputShape]`\n   */\n  batchSize?: number;\n  /**\n   * The data-type for this layer. Defaults to 'float32'.\n   * This argument is only applicable to input layers (the first layer of a\n   * model).\n   */\n  dtype?: DataType;\n  /** Name for this layer. */\n  name?: string;\n  /**\n   * Whether the weights of this layer are updatable by `fit`.\n   * Defaults to true.\n   */\n  trainable?: boolean;\n  /**\n   * Initial weight values of the layer.\n   */\n  weights?: Tensor[];\n  /** Legacy support. Do not use for new code. */\n  inputDType?: DataType;\n}\n\n// If necessary, add `output` arguments to the CallHook function.\n// This is currently used for testing only, but may be used for debugger-related\n// purposes in the future.\nexport type CallHook = (inputs: Tensor|Tensor[], kwargs: Kwargs) => void;\n\nlet _nextLayerID = 0;\n\n/**\n * A layer is a grouping of operations and weights that can be composed to\n * create a `tf.LayersModel`.\n *\n * Layers are constructed by using the functions under the\n * [tf.layers](#Layers-Basic) namespace.\n *\n * @doc {heading: 'Layers', subheading: 'Classes', namespace: 'layers'}\n */\nexport abstract class Layer extends serialization.Serializable {\n  /** Name for this layer. Must be unique within a model. */\n  name: string;\n  /**\n   * List of InputSpec class instances.\n   *\n   * Each entry describes one required input:\n   * - ndim\n   * - dtype\n   * A layer with `n` input tensors must have an `inputSpec` of length `n`.\n   */\n  inputSpec: InputSpec[];\n  supportsMasking: boolean;\n  /** Whether the layer weights will be updated during training. */\n  protected trainable_: boolean;\n  batchInputShape: Shape;\n  dtype: DataType;\n  initialWeights: Tensor[];\n\n  inboundNodes: Node[];\n  outboundNodes: Node[];\n\n  activityRegularizer: Regularizer;\n\n  protected _trainableWeights: LayerVariable[];\n  private _nonTrainableWeights: LayerVariable[];\n  private _losses: RegularizerFn[];\n  // TODO(cais): _updates is currently unused.\n  private _updates: Tensor[];\n  private _built: boolean;\n  private _callHook: CallHook = null;\n\n  private _addedWeightNames: string[] = [];\n\n  readonly id: number;\n\n  // Porting Notes: PyKeras does not have this property in this base Layer\n  //   class. Instead lets Layer subclass set it dynamically and checks the\n  //   value with `hasattr`. In tfjs-layers, we let this be a member of this\n  //   base class.\n  protected _stateful = false;\n\n  protected _refCount: number|null;\n\n  // A flag for whether fast (i.e., all-zero) weight initialization is to\n  // be used during `build()` call. This speeds up weight initialization\n  // by saving unnecessary calls to expensive initializers in cases where\n  // the initialized values will be overwritten by loaded weight values\n  // during model loading.\n  private fastWeightInitDuringBuild: boolean;\n\n  constructor(args: LayerArgs = {}) {\n    super();\n    this.id = _nextLayerID++;\n\n    this.activityRegularizer = null;\n\n    this.inputSpec = null;\n    this.supportsMasking = false;\n\n    // These properties will be set upon call of this.build()\n    this._trainableWeights = [];\n    this._nonTrainableWeights = [];\n    this._losses = [];\n    this._updates = [];\n    this._built = false;\n\n    /*\n      These lists will be filled via successive calls\n      to this.addInboundNode().\n     */\n    this.inboundNodes = [];\n    this.outboundNodes = [];\n\n    let name = args.name;\n    if (!name) {\n      const prefix = this.getClassName();\n      name = generic_utils.toSnakeCase(prefix) + '_' + getUid(prefix);\n    }\n    this.name = name;\n\n    this.trainable_ = args.trainable == null ? true : args.trainable;\n\n    if (args.inputShape != null || args.batchInputShape != null) {\n      /*\n        In this case we will later create an input layer\n        to insert before the current layer\n       */\n      let batchInputShape: Shape;\n      if (args.batchInputShape != null) {\n        batchInputShape = args.batchInputShape;\n      } else if (args.inputShape != null) {\n        let batchSize: number = null;\n        if (args.batchSize != null) {\n          batchSize = args.batchSize;\n        }\n        batchInputShape = [batchSize].concat(args.inputShape);\n      }\n      this.batchInputShape = batchInputShape;\n\n      // Set dtype.\n      let dtype = args.dtype;\n      if (dtype == null) {\n        dtype = args.inputDType;\n      }\n      if (dtype == null) {\n        dtype = 'float32';\n      }\n      this.dtype = dtype;\n    }\n\n    if (args.weights != null) {\n      this.initialWeights = args.weights;\n    } else {\n      this.initialWeights = null;\n    }\n\n    // The value of `_refCount` is initialized to null. When the layer is used\n    // in a symbolic way for the first time, it will be set to 1.\n    this._refCount = null;\n\n    this.fastWeightInitDuringBuild = false;\n  }\n\n  /**\n   * Converts a layer and its index to a unique (immutable type) name.\n   * This function is used internally with `this.containerNodes`.\n   * @param layer The layer.\n   * @param nodeIndex The layer's position (e.g. via enumerate) in a list of\n   *   nodes.\n   *\n   * @returns The unique name.\n   */\n  protected static nodeKey(layer: Layer, nodeIndex: number) {\n    return layer.name + '_ib-' + nodeIndex.toString();\n  }\n\n  /**\n   * Returns this.inboundNode at index nodeIndex.\n   *\n   * Porting note: This is a replacement for _get_node_attribute_at_index()\n   * @param nodeIndex\n   * @param attrName The name of the attribute related to request for this node.\n   */\n  private getNodeAtIndex(nodeIndex: number, attrName: string): Node {\n    if (this.inboundNodes.length === 0) {\n      throw new RuntimeError(\n          'The layer has never been called ' +\n          `and thus has no defined ${attrName}.`);\n    }\n    if (this.inboundNodes.length <= nodeIndex) {\n      throw new ValueError(\n          `Asked to get ${attrName} at node ${nodeIndex}, ` +\n          `but the layer has only ${this.inboundNodes.length} inbound nodes.`);\n    }\n    return this.inboundNodes[nodeIndex];\n  }\n\n  /**\n   * Retrieves the input tensor(s) of a layer at a given node.\n   *\n   * @param nodeIndex Integer, index of the node from which to retrieve the\n   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n   *   was called.\n   *\n   * @return A tensor (or list of tensors if the layer has multiple inputs).\n   */\n  getInputAt(nodeIndex: number): SymbolicTensor|SymbolicTensor[] {\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(nodeIndex, 'input').inputTensors);\n  }\n\n  /**\n   * Retrieves the output tensor(s) of a layer at a given node.\n   *\n   * @param nodeIndex Integer, index of the node from which to retrieve the\n   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n   *   was called.\n   *\n   * @return A tensor (or list of tensors if the layer has multiple outputs).\n   */\n  getOutputAt(nodeIndex: number): SymbolicTensor|SymbolicTensor[] {\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(nodeIndex, 'output').outputTensors);\n  }\n\n  // Properties\n\n  /**\n   * Retrieves the input tensor(s) of a layer.\n   *\n   * Only applicable if the layer has exactly one inbound node,\n   * i.e. if it is connected to one incoming layer.\n   *\n   * @return Input tensor or list of input tensors.\n   *\n   * @exception AttributeError if the layer is connected to more than one\n   *   incoming layers.\n   */\n  get input(): SymbolicTensor|SymbolicTensor[] {\n    if (this.inboundNodes.length > 1) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has multiple inbound nodes, ' +\n          'hence the notion of \"layer input\" ' +\n          'is ill-defined. ' +\n          'Use `getInputAt(nodeIndex)` instead.');\n    } else if (this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' is not connected, no input to return.');\n    }\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(0, 'input').inputTensors);\n  }\n\n  /**\n   * Retrieves the output tensor(s) of a layer.\n   *\n   * Only applicable if the layer has exactly one inbound node,\n   * i.e. if it is connected to one incoming layer.\n   *\n   * @return Output tensor or list of output tensors.\n   *\n   * @exception AttributeError if the layer is connected to more than one\n   *   incoming layers.\n   */\n  get output(): SymbolicTensor|SymbolicTensor[] {\n    if (this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has no inbound nodes.');\n    }\n    if (this.inboundNodes.length > 1) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has multiple inbound nodes, ' +\n          'hence the notion of \"layer output\" ' +\n          'is ill-defined. ' +\n          'Use `getOutputAt(nodeIndex)` instead.');\n    }\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(0, 'output').outputTensors);\n  }\n\n  get losses(): RegularizerFn[] {\n    return this._losses;\n  }\n\n  /**\n   * Retrieves the Layer's current loss values.\n   *\n   * Used for regularizers during training.\n   */\n  calculateLosses(): Scalar[] {\n    // Porting Node: This is an augmentation to Layer.loss in PyKeras.\n    //   In PyKeras, Layer.loss returns symbolic tensors. Here a concrete\n    //   Tensor (specifically Scalar) values are returned. This is due to the\n    //   imperative backend.\n    return this.losses.map(lossFn => lossFn());\n  }\n\n  get updates(): Tensor[] {\n    return this._updates;\n  }\n\n  get built(): boolean {\n    return this._built;\n  }\n\n  set built(built: boolean) {\n    this._built = built;\n  }\n\n  get trainable(): boolean {\n    return this.trainable_;\n  }\n\n  set trainable(trainable: boolean) {\n    this._trainableWeights.forEach(w => w.trainable = trainable);\n    this.trainable_ = trainable;\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    if (this.trainable_) {\n      return this._trainableWeights.filter(w => w.trainable);\n    } else {\n      return [];\n    }\n  }\n\n  set trainableWeights(weights: LayerVariable[]) {\n    this._trainableWeights = weights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    if (this.trainable) {\n      return this._trainableWeights.filter(w => !w.trainable)\n          .concat(this._nonTrainableWeights);\n    } else {\n      return this._trainableWeights.concat(this._nonTrainableWeights);\n    }\n  }\n\n  set nonTrainableWeights(weights: LayerVariable[]) {\n    this._nonTrainableWeights = weights;\n  }\n\n  /**\n   * The concatenation of the lists trainableWeights and nonTrainableWeights\n   * (in this order).\n   */\n  get weights(): LayerVariable[] {\n    return this.trainableWeights.concat(this.nonTrainableWeights);\n  }\n\n  get stateful(): boolean {\n    return this._stateful;\n  }\n\n  /**\n   * Reset the states of the layer.\n   *\n   * This method of the base Layer class is essentially a no-op.\n   * Subclasses that are stateful (e.g., stateful RNNs) should override this\n   * method.\n   */\n  resetStates(): void {\n    if (!this.stateful) {\n      throw new Error(\n          'Cannot call the resetStates() method of a non-stateful Layer ' +\n          'object.');\n    }\n  }\n\n  /**\n   * Checks compatibility between the layer and provided inputs.\n   *\n   * This checks that the tensor(s) `input`\n   * verify the input assumptions of the layer\n   * (if any). If not, exceptions are raised.\n   *\n   * @param inputs Input tensor or list of input tensors.\n   *\n   * @exception ValueError in case of mismatch between\n   *   the provided inputs and the expectations of the layer.\n   */\n  protected assertInputCompatibility(inputs: Tensor|Tensor[]|SymbolicTensor|\n                                     SymbolicTensor[]): void {\n    inputs = generic_utils.toList(inputs);\n    if (this.inputSpec == null || this.inputSpec.length === 0) {\n      return;\n    }\n    const inputSpec = generic_utils.toList(this.inputSpec);\n    if (inputs.length !== inputSpec.length) {\n      throw new ValueError(\n          `Layer ${this.name} expects ${inputSpec.length} inputs, ` +\n          `but it received ${inputs.length} input tensors. ` +\n          `Input received: ${inputs}`);\n    }\n    for (let inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n      const x = inputs[inputIndex];\n      const spec: InputSpec = inputSpec[inputIndex];\n      if (spec == null) {\n        continue;\n      }\n\n      // Check ndim.\n      const ndim = x.rank;\n      if (spec.ndim != null) {\n        if (ndim !== spec.ndim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}: ` +\n              `expected ndim=${spec.ndim}, found ndim=${ndim}`);\n        }\n      }\n      if (spec.maxNDim != null) {\n        if (ndim > spec.maxNDim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}` +\n              `: expected max_ndim=${spec.maxNDim}, found ndim=${ndim}`);\n        }\n      }\n      if (spec.minNDim != null) {\n        if (ndim < spec.minNDim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}` +\n              `: expected min_ndim=${spec.minNDim}, found ndim=${ndim}.`);\n        }\n      }\n\n      // Check dtype.\n      if (spec.dtype != null) {\n        if (x.dtype !== spec.dtype) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name} ` +\n              `: expected dtype=${spec.dtype}, found dtype=${x.dtype}.`);\n        }\n      }\n\n      // Check specific shape axes.\n      if (spec.axes) {\n        const xShape = x.shape;\n        for (const key in spec.axes) {\n          const axis = Number(key);\n          const value = spec.axes[key];\n          // Perform Python-style slicing in case axis < 0;\n          // TODO(cais): Use https://github.com/alvivi/typescript-underscore to\n          // ensure type safety through Underscore calls.\n          const xShapeAtAxis =\n              axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];\n          if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {\n            throw new ValueError(\n                `Input ${inputIndex} is incompatible with layer ` +\n                `${this.name}: expected axis ${axis} of input shape to ` +\n                `have value ${value} but got shape ${xShape}.`);\n          }\n        }\n      }\n\n      // Check shape.\n      if (spec.shape != null) {\n        for (let i = 0; i < spec.shape.length; ++i) {\n          const specDim = spec.shape[i];\n          const dim = x.shape[i];\n          if (specDim != null && dim != null) {\n            if (specDim !== dim) {\n              throw new ValueError(\n                  `Input ${inputIndex} is incompatible with layer ` +\n                  `${this.name}: expected shape=${spec.shape}, ` +\n                  `found shape=${x.shape}.`);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * This is where the layer's logic lives.\n   *\n   * @param inputs Input tensor, or list/tuple of input tensors.\n   * @param kwargs Additional keyword arguments.\n   *\n   * @return A tensor or list/tuple of tensors.\n   */\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return inputs;\n  }\n\n  protected invokeCallHook(inputs: Tensor|Tensor[], kwargs: Kwargs) {\n    if (this._callHook != null) {\n      this._callHook(inputs, kwargs);\n    }\n  }\n\n  /**\n   * Set call hook.\n   * This is currently used for testing only.\n   * @param callHook\n   */\n  setCallHook(callHook: CallHook) {\n    this._callHook = callHook;\n  }\n\n  /**\n   * Clear call hook.\n   * This is currently used for testing only.\n   */\n  clearCallHook() {\n    this._callHook = null;\n  }\n\n  /**\n   * Builds or executes a `Layer`'s logic.\n   *\n   * When called with `tf.Tensor`(s), execute the `Layer`'s computation and\n   * return Tensor(s). For example:\n   *\n   * ```js\n   * const denseLayer = tf.layers.dense({\n   *   units: 1,\n   *   kernelInitializer: 'zeros',\n   *   useBias: false\n   * });\n   *\n   * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete\n   * // numeric values).\n   * const input = tf.ones([2, 2]);\n   * const output = denseLayer.apply(input);\n   *\n   * // The output's value is expected to be [[0], [0]], due to the fact that\n   * // the dense layer has a kernel initialized to all-zeros and does not have\n   * // a bias.\n   * output.print();\n   * ```\n   *\n   * When called with `tf.SymbolicTensor`(s), this will prepare the layer for\n   * future execution.  This entails internal book-keeping on shapes of\n   * expected Tensors, wiring layers together, and initializing weights.\n   *\n   * Calling `apply` with `tf.SymbolicTensor`s are typically used during the\n   * building of non-`tf.Sequential` models. For example:\n   *\n   * ```js\n   * const flattenLayer = tf.layers.flatten();\n   * const denseLayer = tf.layers.dense({units: 1});\n   *\n   * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().\n   * const input = tf.input({shape: [2, 2]});\n   * const output1 = flattenLayer.apply(input);\n   *\n   * // output1.shape is [null, 4]. The first dimension is the undetermined\n   * // batch size. The second dimension comes from flattening the [2, 2]\n   * // shape.\n   * console.log(JSON.stringify(output1.shape));\n   *\n   * // The output SymbolicTensor of the flatten layer can be used to call\n   * // the apply() of the dense layer:\n   * const output2 = denseLayer.apply(output1);\n   *\n   * // output2.shape is [null, 1]. The first dimension is the undetermined\n   * // batch size. The second dimension matches the number of units of the\n   * // dense layer.\n   * console.log(JSON.stringify(output2.shape));\n   *\n   * // The input and output can be used to construct a model that consists\n   * // of the flatten and dense layers.\n   * const model = tf.model({inputs: input, outputs: output2});\n   * ```\n   *\n   * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.\n   * @param kwargs Additional keyword arguments to be passed to `call()`.\n   *\n   * @return Output of the layer's `call` method.\n   *\n   * @exception ValueError error in case the layer is missing shape information\n   *   for its `build` call.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  // Porting Note: This is a replacement for __call__() in Python.\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    kwargs = kwargs || {};\n\n    this.assertNotDisposed();\n\n    // Ensure inputs are all the same type.\n    const inputsList = generic_utils.toList(inputs);\n\n    let allAreSymbolic = true;\n    for (const input of inputsList) {\n      if (!(input instanceof SymbolicTensor)) {\n        allAreSymbolic = false;\n        break;\n      }\n    }\n    let noneAreSymbolic = true;\n    for (const input of inputsList) {\n      if (input instanceof SymbolicTensor) {\n        noneAreSymbolic = false;\n        break;\n      }\n    }\n\n    if (allAreSymbolic === noneAreSymbolic) {\n      throw new ValueError(\n          'Arguments to apply() must be all ' +\n          'SymbolicTensors or all Tensors');\n    }\n\n    // TODO(michaelterry): nameScope() may not be necessary.\n    return nameScope(this.name, () => {\n      // Handle laying building (weight creating, input spec locking).\n      if (!this.built) {\n        /*\n          Throw exceptions in case the input is not compatible\n          with the inputSpec specified in the layer constructor.\n         */\n        this.assertInputCompatibility(inputs);\n\n        // Collect input shapes to build layer.\n        const inputShapes: Shape[] = [];\n        for (const xElem of generic_utils.toList(inputs)) {\n          inputShapes.push(xElem.shape);\n        }\n        this.build(generic_utils.singletonOrArray(inputShapes));\n        this.built = true;\n\n        // Load weights that were specified at layer instantiation.\n        if (this.initialWeights) {\n          this.setWeights(this.initialWeights);\n        }\n\n        if (this._refCount === null && noneAreSymbolic) {\n          // The first use of this layer is a non-symbolic call, set ref count\n          // to 1 so the Layer can be properly disposed if its dispose() method\n          // is called.\n          this._refCount = 1;\n        }\n      }\n\n      /*\n        Throw exceptions in case the input is not compatible\n        with the inputSpec set at build time.\n      */\n      this.assertInputCompatibility(inputs);\n\n      // Handle mask propagation.\n      // TODO(michaelterry): Mask propagation not currently implemented.\n\n      // Actually call the layer, collecting output(s), mask(s), and shape(s).\n      if (noneAreSymbolic) {\n        let output = this.call(inputs as Tensor | Tensor[], kwargs);\n        // TODO(michaelterry): Compute the outputMask\n\n        // If the layer returns tensors from its inputs, unmodified,\n        // we copy them to avoid loss of tensor metadata.\n        const outputList: Tensor[] = generic_utils.toList(output);\n        const outputListCopy: Tensor[] = [];\n        // TODO(michaelterry): This copying may not be necessary given our eager\n        // backend.\n        for (let x of outputList) {\n          if (inputsList.indexOf(x) !== -1) {\n            x = x.clone();\n          }\n          outputListCopy.push(x);\n        }\n        output = generic_utils.singletonOrArray(outputListCopy);\n\n        if (this.activityRegularizer != null) {\n          throw new NotImplementedError(\n              'Layer invocation in the presence of activity ' +\n              'regularizer(s) is not supported yet.');\n        }\n\n        // TODO(michaelterry): Call addInboundNode()?\n        return output;\n      } else {\n        const inputShape = collectInputShape(inputs);\n        const outputShape = this.computeOutputShape(inputShape);\n        let output: SymbolicTensor|SymbolicTensor[];\n        const outputDType = guessOutputDType(inputs);\n        this.warnOnIncompatibleInputShape(\n            Array.isArray(inputs) ? inputShape[0] as Shape :\n                                    inputShape as Shape);\n\n        if (outputShape != null && outputShape.length > 0 &&\n            Array.isArray(outputShape[0])) {\n          // We have multiple output shapes. Create multiple output tensors.\n          output = (outputShape as Shape[])\n                       .map(\n                           (shape, index) => new SymbolicTensor(\n                               outputDType, shape, this,\n                               generic_utils.toList(inputs), kwargs, this.name,\n                               index));\n        } else {\n          output = new SymbolicTensor(\n              outputDType, outputShape as Shape, this,\n              generic_utils.toList(inputs), kwargs, this.name);\n        }\n\n        /*\n          Add an inbound node to the layer, so that it keeps track\n          of the call and of all new variables created during the call.\n          This also updates the layer history of the output tensor(s).\n          If the input tensor(s) had no previous history,\n          this does nothing.\n        */\n        this.addInboundNode(\n            inputs as SymbolicTensor | SymbolicTensor[], output, null, null,\n            inputShape, outputShape, kwargs);\n        this._refCount++;\n\n        if (this.activityRegularizer != null) {\n          throw new NotImplementedError(\n              'Layer invocation in the presence of activity ' +\n              'regularizer(s) is not supported yet.');\n        }\n\n        return output;\n      }\n    });\n  }\n\n  /**\n   * Check compatibility between input shape and this layer's batchInputShape.\n   *\n   * Print warning if any incompatibility is found.\n   *\n   * @param inputShape Input shape to be checked.\n   */\n  protected warnOnIncompatibleInputShape(inputShape: Shape) {\n    if (this.batchInputShape == null) {\n      return;\n    } else if (inputShape.length !== this.batchInputShape.length) {\n      console.warn(\n          `The rank of the input tensor provided (shape: ` +\n          `${JSON.stringify(inputShape)}) does not match that of the ` +\n          `batchInputShape (${JSON.stringify(this.batchInputShape)}) ` +\n          `of the layer ${this.name}`);\n    } else {\n      let dimMismatch = false;\n      this.batchInputShape.forEach((dimension, i) => {\n        if (dimension != null && inputShape[i] != null &&\n            inputShape[i] !== dimension) {\n          dimMismatch = true;\n        }\n      });\n      if (dimMismatch) {\n        console.warn(\n            `The shape of the input tensor ` +\n            `(${JSON.stringify(inputShape)}) does not ` +\n            `match the expectation of layer ${this.name}: ` +\n            `${JSON.stringify(this.batchInputShape)}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieves the output shape(s) of a layer.\n   *\n   * Only applicable if the layer has only one inbound node, or if all inbound\n   * nodes have the same output shape.\n   *\n   * @returns Output shape or shapes.\n   * @throws AttributeError: if the layer is connected to more than one incoming\n   *   nodes.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  get outputShape(): Shape|Shape[] {\n    if (this.inboundNodes == null || this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `The layer ${this.name} has never been called and thus has no ` +\n          `defined output shape.`);\n    }\n    const allOutputShapes: string[] = [];\n    for (const node of this.inboundNodes) {\n      const shapeString = JSON.stringify(node.outputShapes);\n      if (allOutputShapes.indexOf(shapeString) === -1) {\n        allOutputShapes.push(shapeString);\n      }\n    }\n    if (allOutputShapes.length === 1) {\n      const outputShapes = this.inboundNodes[0].outputShapes;\n      if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) &&\n          outputShapes.length === 1) {\n        return (outputShapes as Shape[])[0];\n      } else {\n        return outputShapes;\n      }\n\n    } else {\n      throw new AttributeError(\n          `The layer ${this.name} has multiple inbound nodes with different ` +\n          `output shapes. Hence the notion of \"output shape\" is ill-defined ` +\n          `for the layer.`);\n      // TODO(cais): Implement getOutputShapeAt().\n    }\n  }\n\n  /**\n   * Counts the total number of numbers (e.g., float32, int32) in the\n   * weights.\n   *\n   * @returns An integer count.\n   * @throws RuntimeError: If the layer is not built yet (in which case its\n   *   weights are not defined yet.)\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  countParams(): number {\n    if (!this.built) {\n      throw new RuntimeError(\n          `You tried to call countParams() on ${this.name}, ` +\n          `but the layer is not built yet. Build it first by calling ` +\n          `build(batchInputShape).`);\n    }\n    return variable_utils.countParamsInWeights(this.weights);\n  }\n\n  /**\n   * Creates the layer weights.\n   *\n   * Must be implemented on all layers that have weights.\n   *\n   * Called when apply() is called to construct the weights.\n   *\n   * @param inputShape A `Shape` or array of `Shape` (unused).\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  build(inputShape: Shape|Shape[]) {\n    this.built = true;\n  }\n\n  /**\n   * Returns the current values of the weights of the layer.\n   *\n   * @param trainableOnly Whether to get the values of only trainable weights.\n   * @returns Weight values as an `Array` of `tf.Tensor`s.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  getWeights(trainableOnly = false): Tensor[] {\n    return batchGetValue(trainableOnly ? this.trainableWeights : this.weights);\n  }\n\n  /**\n   * Sets the weights of the layer, from Tensors.\n   *\n   * @param weights a list of Tensors. The number of arrays and their shape\n   *   must match number of the dimensions of the weights of the layer (i.e.\n   *   it should match the output of `getWeights`).\n   *\n   * @exception ValueError If the provided weights list does not match the\n   *   layer's specifications.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  setWeights(weights: Tensor[]): void {\n    tidy(() => {\n      const params = this.weights;\n      if (params.length !== weights.length) {\n        // TODO(cais): Restore the following and use `providedWeights`, instead\n        // of `weights` in the error message, once the deeplearn.js bug is\n        // fixed: https://github.com/PAIR-code/deeplearnjs/issues/498 const\n        // providedWeights = JSON.stringify(weights).slice(0, 50);\n        throw new ValueError(\n            `You called setWeights(weights) on layer \"${this.name}\" ` +\n            `with a weight list of length ${weights.length}, ` +\n            `but the layer was expecting ${params.length} weights. ` +\n            `Provided weights: ${weights}...`);\n      }\n      if (params.length === 0) {\n        return;\n      }\n      const weightValueTuples: Array<[LayerVariable, Tensor]> = [];\n      const paramValues = batchGetValue(params);\n      for (let i = 0; i < paramValues.length; ++i) {\n        const pv = paramValues[i];\n        const p = params[i];\n        const w = weights[i];\n        if (!util.arraysEqual(pv.shape, w.shape)) {\n          throw new ValueError(\n              `Layer weight shape ${pv.shape} ` +\n              `not compatible with provided weight shape ${w.shape}`);\n        }\n        weightValueTuples.push([p, w]);\n      }\n      batchSetValue(weightValueTuples);\n    });\n  }\n\n  /**\n   * Adds a weight variable to the layer.\n   *\n   * @param name Name of the new weight variable.\n   * @param shape The shape of the weight.\n   * @param dtype The dtype of the weight.\n   * @param initializer An initializer instance.\n   * @param regularizer A regularizer instance.\n   * @param trainable Whether the weight should be trained via backprop or not\n   *   (assuming that the layer itself is also trainable).\n   * @param constraint An optional trainable.\n   * @return The created weight variable.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  protected addWeight(\n      name: string, shape: Shape, dtype?: DataType, initializer?: Initializer,\n      regularizer?: Regularizer, trainable?: boolean, constraint?: Constraint,\n      getInitializerFunc?: Function): LayerVariable {\n    // Reject duplicate weight names.\n    if (this._addedWeightNames.indexOf(name) !== -1) {\n      throw new ValueError(\n          `Duplicate weight name ${name} for layer ${this.name}`);\n    }\n    this._addedWeightNames.push(name);\n\n    if (dtype == null) {\n      dtype = 'float32';\n    }\n\n    if (this.fastWeightInitDuringBuild) {\n      initializer = getInitializerFunc != null ? getInitializerFunc() :\n                                                 getInitializer('zeros');\n    }\n    const initValue = initializer.apply(shape, dtype);\n    const weight =\n        new LayerVariable(initValue, dtype, name, trainable, constraint);\n    initValue.dispose();\n    // Request backend not to dispose the weights of the model on scope() exit.\n    if (regularizer != null) {\n      this.addLoss(() => regularizer.apply(weight.read()));\n    }\n    if (trainable == null) {\n      trainable = true;\n    }\n    if (trainable) {\n      this._trainableWeights.push(weight);\n    } else {\n      this._nonTrainableWeights.push(weight);\n    }\n    return weight;\n  }\n\n  /**\n   * Set the fast-weight-initialization flag.\n   *\n   * In cases where the initialized weight values will be immediately\n   * overwritten by loaded weight values during model loading, setting\n   * the flag to `true` saves unnecessary calls to potentially expensive\n   * initializers and speeds up the loading process.\n   *\n   * @param value Target value of the flag.\n   */\n  setFastWeightInitDuringBuild(value: boolean) {\n    this.fastWeightInitDuringBuild = value;\n  }\n\n  /**\n   * Add losses to the layer.\n   *\n   * The loss may potentially be conditional on some inputs tensors,\n   * for instance activity losses are conditional on the layer's inputs.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  addLoss(losses: RegularizerFn|RegularizerFn[]): void {\n    if (losses == null || Array.isArray(losses) && losses.length === 0) {\n      return;\n    }\n    // Update this.losses\n    losses = generic_utils.toList(losses);\n    if (this._losses !== undefined && this._losses !== null) {\n      this.losses.push(...losses);\n    }\n  }\n\n  /**\n   * Computes the output shape of the layer.\n   *\n   * Assumes that the layer will be built to match that input shape provided.\n   *\n   * @param inputShape A shape (tuple of integers) or a list of shape tuples\n   *   (one per output tensor of the layer). Shape tuples can include null for\n   *   free dimensions, instead of an integer.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  /**\n   * Computes an output mask tensor.\n   *\n   * @param inputs Tensor or list of tensors.\n   * @param mask Tensor or list of tensors.\n   *\n   * @return null or a tensor (or list of tensors, one per output tensor of the\n   * layer).\n   */\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    if (!this.supportsMasking) {\n      if (mask != null) {\n        if (Array.isArray(mask)) {\n          mask.forEach(maskElement => {\n            if (maskElement != null) {\n              throw new TypeError(\n                  `Layer ${this.name} does not support masking, ` +\n                  'but was passed an inputMask.');\n            }\n          });\n        } else {\n          throw new TypeError(\n              `Layer ${this.name} does not support masking, ` +\n              'but was passed an inputMask.');\n        }\n      }\n      // masking not explicitly supported: return null as mask\n      return null;\n    }\n    // if masking is explictly supported, by default\n    // carry over the input mask\n    return mask;\n  }\n\n  /**\n   * Internal method to create an inbound node for the layer.\n   *\n   * @param inputTensors List of input tensors.\n   * @param outputTensors List of output tensors.\n   * @param inputMasks List of input masks (a mask can be a tensor, or null).\n   * @param outputMasks List of output masks (a mask can be a tensor, or null).\n   * @param inputShapes List of input shape tuples.\n   * @param outputShapes List of output shape tuples.\n   * @param kwargs Dictionary of keyword arguments that were passed to the\n   *   `call` method of the layer at the call that created the node.\n   */\n  private addInboundNode(\n      inputTensors: SymbolicTensor|SymbolicTensor[],\n      outputTensors: SymbolicTensor|SymbolicTensor[],\n      inputMasks: Tensor|Tensor[], outputMasks: Tensor|Tensor[],\n      inputShapes: Shape|Shape[], outputShapes: Shape|Shape[],\n      kwargs: {} = null): void {\n    const inputTensorList: SymbolicTensor[] =\n        generic_utils.toList(inputTensors);\n    outputTensors = generic_utils.toList(outputTensors);\n    inputMasks = generic_utils.toList(inputMasks);\n    outputMasks = generic_utils.toList(outputMasks);\n    inputShapes = types_utils.normalizeShapeList(inputShapes);\n    outputShapes = types_utils.normalizeShapeList(outputShapes);\n\n    // Collect input tensor(s) coordinates.\n    const inboundLayers: Layer[] = [];\n    const nodeIndices: number[] = [];\n    const tensorIndices: number[] = [];\n    for (const x of inputTensorList) {\n      /*\n       * TODO(michaelterry): Keras adds this value to tensors; it's not\n       * clear whether we'll use this or not.\n       */\n      inboundLayers.push(x.sourceLayer);\n      nodeIndices.push(x.nodeIndex);\n      tensorIndices.push(x.tensorIndex);\n    }\n\n    // Create node, add it to inbound nodes.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node(\n        {\n          outboundLayer: this,\n          inboundLayers,\n          nodeIndices,\n          tensorIndices,\n          inputTensors: inputTensorList,\n          outputTensors,\n          inputMasks,\n          outputMasks,\n          inputShapes,\n          outputShapes\n        },\n        kwargs);\n\n    // Update tensor history\n    for (let i = 0; i < outputTensors.length; i++) {\n      // TODO(michaelterry: _uses_learning_phase not tracked.\n      outputTensors[i].sourceLayer = this;\n      outputTensors[i].nodeIndex = this.inboundNodes.length - 1;\n      outputTensors[i].tensorIndex = i;\n    }\n  }\n\n  /**\n   * Returns the config of the layer.\n   *\n   * A layer config is a TS dictionary (serializable)\n   * containing the configuration of a layer.\n   * The same layer can be reinstantiated later\n   * (without its trained weights) from this configuration.\n   *\n   * The config of a layer does not include connectivity\n   * information, nor the layer class name.  These are handled\n   * by 'Container' (one layer of abstraction above).\n   *\n   * Porting Note: The TS dictionary follows TS naming standards for\n   * keys, and uses tfjs-layers type-safe Enums.  Serialization methods\n   * should use a helper function to convert to the pythonic storage\n   * standard. (see serialization_utils.convertTsToPythonic)\n   *\n   * @returns TS dictionary of configuration.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  getConfig(): serialization.ConfigDict {\n    const config:\n        serialization.ConfigDict = {name: this.name, trainable: this.trainable};\n    if (this.batchInputShape != null) {\n      config['batchInputShape'] = this.batchInputShape;\n    }\n    if (this.dtype != null) {\n      config['dtype'] = this.dtype;\n    }\n    return config;\n  }\n\n  /**\n   * Dispose the weight variables that this Layer instance holds.\n   *\n   * @returns {number} Number of disposed variables.\n   */\n  protected disposeWeights(): number {\n    this.weights.forEach(weight => weight.dispose());\n    return this.weights.length;\n  }\n\n  protected assertNotDisposed() {\n    if (this._refCount === 0) {\n      throw new Error(`Layer '${this.name}' is already disposed.`);\n    }\n  }\n\n  /**\n   * Attempt to dispose layer's weights.\n   *\n   * This method decreases the reference count of the Layer object by 1.\n   *\n   * A Layer is reference-counted. Its reference count is incremented by 1\n   * the first item its `apply()` method is called and when it becomes a part\n   * of a new `Node` (through calling the `apply()` method on a\n   * `tf.SymbolicTensor`).\n   *\n   * If the reference count of a Layer becomes 0, all the weights will be\n   * disposed and the underlying memory (e.g., the textures allocated in WebGL)\n   * will be freed.\n   *\n   * Note: If the reference count is greater than 0 after the decrement, the\n   * weights of the Layer will *not* be disposed.\n   *\n   * After a Layer is disposed, it cannot be used in calls such as `apply()`,\n   * `getWeights()` or `setWeights()` anymore.\n   *\n   * @returns A DisposeResult Object with the following fields:\n   *   - refCountAfterDispose: The reference count of the Container after this\n   *     `dispose()` call.\n   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n   *     during this `dispose()` call.\n   * @throws {Error} If the layer is not built yet, or if the layer has already\n   *   been disposed.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  dispose(): DisposeResult {\n    if (!this.built) {\n      throw new Error(\n          `Cannot dispose Layer ${this.name} because it has not been ` +\n          `built yet.`);\n    }\n\n    if (this._refCount === null) {\n      throw new Error(\n          `Cannot dispose Layer ${this.name} because it has not been used ` +\n          `yet.`);\n    }\n\n    this.assertNotDisposed();\n\n    let numDisposedVariables = 0;\n    if (--this._refCount === 0) {\n      numDisposedVariables = this.disposeWeights();\n    }\n\n    return {refCountAfterDispose: this._refCount, numDisposedVariables};\n  }\n}\n\n/**\n * Collects the input shape(s) of a list of `tf.Tensor`s or\n * `tf.SymbolicTensor`s.\n *\n * TODO(michaelterry): Update PyKeras docs (backport).\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return List of shape tuples (or single tuple), one tuple per input.\n */\nfunction collectInputShape(inputTensors: SymbolicTensor|SymbolicTensor[]|Tensor|\n                           Tensor[]): Shape|Shape[] {\n  inputTensors =\n      generic_utils.toList(inputTensors) as SymbolicTensor[] | Tensor[];\n  const shapes: Shape[] = [];\n  for (const x of inputTensors) {\n    shapes.push(x.shape);\n  }\n  return generic_utils.singletonOrArray(shapes);\n}\n\n/**\n * Guesses output dtype based on inputs.\n *\n * At present, just returns 'float32' for any input.\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return The guessed DType. At present, always returns 'float32'.\n */\nfunction guessOutputDType(inputTensors: SymbolicTensor|SymbolicTensor[]|Tensor|\n                          Tensor[]): DataType {\n  return 'float32';\n}\n\n/**\n * Returns the list of input tensors necessary to compute `tensor`.\n *\n * Output will always be a list of tensors (potentially with 1 element).\n *\n * @param tensor The tensor to start from.\n * @param layer Origin layer of the tensor.\n * @param nodeIndex Origin node index of the tensor.\n *\n * @return Array of input tensors.\n */\nexport function getSourceInputs(\n    tensor: SymbolicTensor, layer?: Layer,\n    nodeIndex?: number): SymbolicTensor[] {\n  if (layer == null || (nodeIndex != null && nodeIndex > 0)) {\n    layer = tensor.sourceLayer;\n    nodeIndex = tensor.nodeIndex;\n  }\n  if (layer.inboundNodes.length === 0) {\n    return [tensor];\n  } else {\n    const node = layer.inboundNodes[nodeIndex];\n    if (node.inboundLayers.length === 0) {\n      return node.inputTensors;\n    } else {\n      const sourceTensors: SymbolicTensor[] = [];\n      for (let i = 0; i < node.inboundLayers.length; i++) {\n        const x = node.inputTensors[i];\n        const layer = node.inboundLayers[i];\n        const nodeIndex = node.nodeIndices[i];\n        const previousSources = getSourceInputs(x, layer, nodeIndex);\n        // Avoid input redundancy.\n        for (const x of previousSources) {\n          if (sourceTensors.indexOf(x) === -1) {\n            sourceTensors.push(x);\n          }\n        }\n      }\n      return sourceTensors;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType, serialization, Tensor} from '@tensorflow/tfjs-core';\n\nimport {getUid} from '../backend/state';\nimport {ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\n\nimport {DisposeResult, Layer, Node, SymbolicTensor} from './topology';\n\n/**\n * Constructor arguments for InputLayer.\n *\n * Note: You should provide only inputShape or batchInputShape (not both).\n * If only inputShape is provided, then the batchInputShape is determined by\n * the batchSize argument and the inputShape: [batchSize].concat(inputShape).\n */\nexport declare interface InputLayerArgs {\n  /** Input shape, not including the batch axis. */\n  inputShape?: Shape;\n  /** Optional input batch size (integer or null). */\n  batchSize?: number;\n  /** Batch input shape, including the batch axis. */\n  batchInputShape?: Shape;\n  /** Datatype of the input.  */\n  dtype?: DataType;\n  /**\n   * Whether the placeholder created is meant to be sparse.\n   */\n  sparse?: boolean;  // TODO(michaelterry): Not clear whether we'll need this.\n\n  /** Name of the layer. */\n  name?: string;\n}\n\nexport class InputLayer extends Layer {\n  /** @nocollapse */\n  static readonly className = 'InputLayer';\n  sparse: boolean;\n  constructor(args: InputLayerArgs) {\n    super({\n      dtype: args.dtype,\n      name: args.name != null ? args.name : getUid('input').toString()\n    });\n    // Normalize config.batchSize and config.sparse\n    if (args.batchSize == null) {\n      args.batchSize = null;\n    }\n    if (args.sparse == null) {\n      args.sparse = false;\n    }\n\n    this.trainable = false;\n    this.built = true;\n    this.sparse = args.sparse;\n\n    if (args.inputShape != null && args.batchInputShape != null) {\n      throw new ValueError(\n          'Only provide the inputShape OR ' +\n          'batchInputShape argument to inputLayer, not both at the same time.');\n    }\n    let batchInputShape = args.batchInputShape;\n    if (batchInputShape == null) {\n      if (args.inputShape == null) {\n        throw new ValueError(\n            'An InputLayer should be passed either a ' +\n            '`batchInputShape` or an `inputShape`.');\n      } else {\n        batchInputShape = [args.batchSize].concat(args.inputShape);\n      }\n    } else {\n      // TODO(michaelterry): Backport to PyKeras\n      if (args.batchSize != null) {\n        throw new ValueError(\n            'Cannot specify batchSize if batchInputShape is ' +\n            'specified when creating an InputLayer.');\n      }\n    }\n\n    const dtype = args.dtype || 'float32';\n\n    this.batchInputShape = batchInputShape;\n    this.dtype = dtype;\n    // TODO(michaelterry): Backport this to PyKeras?\n    this.inputSpec = [{shape: batchInputShape}];\n\n    const inputTensor = new SymbolicTensor(\n        this.dtype, this.batchInputShape, this, [], {}, this.name);\n    inputTensor.nodeIndex = 0;\n    inputTensor.tensorIndex = 0;\n\n    // Create an input node to add to this.outboundNode.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node({\n      outboundLayer: this,\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: [inputTensor],\n      outputTensors: [inputTensor],\n      inputMasks: [null],\n      outputMasks: [null],\n      inputShapes: [batchInputShape],\n      outputShapes: [batchInputShape]\n    });\n  }\n\n  override apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor {\n    throw new ValueError(\n        'Cannot pass any input to an ' +\n        `InputLayer's apply() method. InputLayer name: ${this.name}`);\n  }\n\n  override dispose(): DisposeResult {\n    // dispose() for InputLayer is overridden as no-op.\n    return {refCountAfterDispose: this._refCount, numDisposedVariables: 0};\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      batchInputShape: this.batchInputShape,\n      dtype: this.dtype,\n      sparse: this.sparse,\n      name: this.name\n    };\n  }\n}\nserialization.registerClass(InputLayer);\n\n/**\n * Config for the Input function.\n *\n * Note: You should provide only shape or batchShape (not both).\n * If only shape is provided, then the batchShape becomes\n * [null].concat(inputShape).\n */\nexport interface InputConfig {\n  /**\n   * A shape, not including the batch size. For instance, `shape=[32]`\n   * indicates that the expected input will be batches of 32-dimensional\n   * vectors.\n   */\n  shape?: Shape;\n  /**\n   * A shape tuple (integer), including the batch size. For instance,\n   * `batchShape=[10, 32]` indicates that the expected input will be batches of\n   * 10 32-dimensional vectors. `batchShape=[null, 32]` indicates batches of an\n   * arbitrary number of 32-dimensional vectors.\n   */\n  batchShape?: Shape;\n  /**\n   * An optional name string for the layer. Should be unique in a model (do not\n   * reuse the same name twice). It will be autogenerated if it isn't provided.\n   */\n  name?: string;\n  dtype?: DataType;\n  /**\n   * A boolean specifying whether the placeholder to be created is sparse.\n   */\n  sparse?: boolean;\n}\n\nexport function Input(config: InputConfig): SymbolicTensor {\n  if (config.batchShape == null && config.shape == null) {\n    throw new Error(\n        'Please provide to Input either a `shape`' +\n        ' or a `batchShape` argument. Note that ' +\n        '`shape` does not include the batch ' +\n        'dimension.');\n  }\n  if (config.batchShape != null && config.shape != null) {\n    // TODO(michaelterry): Backport to PyKeras.\n    throw new ValueError(\n        'Please provide either a `shape` or `batchShape` ' +\n        'argument to Input, but not both.');\n  }\n  let batchShape = config.batchShape;\n  if (config.shape != null && batchShape == null) {\n    batchShape = [null].concat(config.shape);\n  }\n\n  let dtype = config.dtype;\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n\n  const inputLayer = new InputLayer({\n    batchInputShape: batchShape,\n    name: config.name,\n    dtype,\n    sparse: config.sparse\n  });\n\n  const outputs = inputLayer.inboundNodes[0].outputTensors;\n  return outputs[0];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Executor: Evaluates SymbolicTensor based on feeds.\n */\n\nimport {cast, dispose, memory, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {ValueError} from '../errors';\nimport {Kwargs} from '../types';\nimport {LruCache} from '../utils/executor_utils';\nimport {toList} from '../utils/generic_utils';\n\nimport {InputLayer} from './input_layer';\nimport {SymbolicTensor} from './topology';\n\n/**\n * Helper function to check the dtype and shape compatibility of a feed value.\n */\nfunction assertFeedCompatibility(key: SymbolicTensor, val: Tensor): Tensor {\n  // Check dtype compatibility.\n  if (key.dtype == null || key.dtype === val.dtype) {\n    //  a.  If types match, return val tensor as is.\n    return val;\n  }\n  try {\n    //  b. Attempt to convert to expected type.\n    return cast(val, key.dtype);\n  } catch (err) {\n    //  c. If conversion fails, return helpful error.\n    throw new ValueError(\n        `The dtype of the feed (${val.dtype}) can not be cast to the dtype ` +\n        `of the key '${key.name}' (${key.dtype}).`);\n  }\n}\n\n/**\n * A concrete Tensor value for a symbolic tensor as the key.\n */\nexport interface Feed {\n  key: SymbolicTensor;\n  value: Tensor;\n}\n\n/**\n * FeedDict: A mapping from unique SymbolicTensors to feed values for them.\n * A feed value is a concrete value represented as an `Tensor`.\n */\nexport class FeedDict {\n  private id2Value: {[id: number]: Tensor} = {};\n  private id2Mask: {[id: number]: Tensor} = {};\n  private name2Id: {[name: string]: number} = {};\n\n  /**\n   * Constructor, optionally does copy-construction.\n   * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case\n   *   copy-construction will be performed.\n   */\n  constructor(feeds?: Feed[]|FeedDict) {\n    if (feeds instanceof FeedDict) {\n      for (const id in feeds.id2Value) {\n        this.id2Value[id] = feeds.id2Value[id];\n        if (id in feeds.id2Mask) {\n          this.id2Mask[id] = feeds.id2Mask[id];\n        }\n      }\n    } else {\n      if (feeds == null) {\n        return;\n      }\n      for (const feed of feeds) {\n        this.add(feed.key, feed.value);\n      }\n    }\n  }\n\n  /**\n   * Add a key-value pair to the FeedDict.\n   *\n   * @param key The key of the feed.\n   * @param value The value of the tensor feed.\n   * @param mask The value of the mask feed (optional).\n   * @returns This `FeedDict`.\n   * @throws ValueError: If the key `SymbolicTensor` already exists in the\n   *   `FeedDict`.\n   */\n  add(key: SymbolicTensor, value: Tensor, mask?: Tensor): FeedDict {\n    if (this.id2Value[key.id] == null) {\n      this.id2Value[key.id] = assertFeedCompatibility(key, value);\n      this.name2Id[key.name] = key.id;\n      if (mask != null) {\n        this.id2Mask[key.id] = mask;\n      }\n    } else {\n      throw new ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);\n    }\n    return this;\n  }\n\n  /**\n   * Add a Feed to the FeedDict.\n   * @param feed The new `Feed` to add.\n   * @returns This `FeedDict`.\n   */\n  addFeed(feed: Feed) {\n    this.add(feed.key, feed.value);\n  }\n\n  /**\n   * Probe whether a key already exists in the FeedDict.\n   * @param key\n   */\n  hasKey(key: SymbolicTensor): boolean {\n    return this.id2Value[key.id] != null;\n  }\n\n  /**\n   * Get all the SymbolicTensor available in this FeedDict.\n   */\n  names(): string[] {\n    return Object.keys(this.name2Id);\n  }\n\n  /**\n   * Get the feed value for given key.\n   * @param key The SymbolicTensor, or its name (as a string), of which the\n   *     value is sought.\n   * @returns If `key` exists, the corresponding feed value.\n   * @throws ValueError: If `key` does not exist in this `FeedDict`.\n   */\n  getValue(key: SymbolicTensor|string): Tensor {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Value[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n      return this.id2Value[id];\n    }\n  }\n\n  /**\n   * Get the feed mask for given key.\n   * @param key The SymbolicTensor, or its name (as a string), of which the\n   *     value is sought.\n   * @returns If `key` exists, the corresponding feed mask.\n   * @throws ValueError: If `key` does not exist in this `FeedDict`.\n   */\n  getMask(key: SymbolicTensor|string): Tensor {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Mask[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n      return this.id2Mask[id];\n    }\n  }\n\n  /** Dispose all mask Tensors held by this object. */\n  disposeMasks() {\n    if (this.id2Mask != null) {\n      dispose(this.id2Mask);\n    }\n  }\n}\n\n// Cache for topologically sorted SymbolicTensors for given execution\n// targets (i.e., fetches).\nexport const cachedSorted: LruCache<SymbolicTensor[]> =\n    new LruCache<SymbolicTensor[]>();\n\n// Cache for recipient count maps for given execution targets (i.e., fetches).\nexport const cachedRecipientCounts: LruCache<RecipientCounts> =\n    new LruCache<RecipientCounts>();\n\nexport function updateCacheMaxEntries(maxEntries: number) {\n  if (cachedSorted != null) {\n    cachedSorted.setMaxEntries(maxEntries);\n  }\n  if (cachedRecipientCounts != null) {\n    cachedRecipientCounts.setMaxEntries(maxEntries);\n  }\n}\n\n/**\n * Interface for the optional object used for probing the memory\n * usage and other statistics during execution.\n */\nexport interface ExecutionProbe {\n  /**\n   * Maximum number of tensors that exist during all steps of the\n   * execution. Tensor counts are measured at the beginning of every\n   * step.\n   */\n  maxNumTensors?: number;\n\n  /**\n   * Minimum number of tensors that exist during all steps of the\n   * execution. Tensor counts are measured at the beginning of every\n   * step.\n   */\n  minNumTensors?: number;\n}\n\n/**\n * Execute a SymbolicTensor by using concrete feed values.\n *\n * A `SymbolicTensor` object is a node in a computation graph of TF.js\n * Layers. The object is backed by a source layer and input\n * `SymbolicTensor`s to the source layer. This method evaluates\n * the `call()` method of the source layer, using concrete values of the\n * inputs obtained from either\n * * `feedDict`, if the input key exists in `feedDict`, or else,\n * * a recursive call to `execute()` itself.\n *\n * @param x: The `SymbolicTensor` to execute.\n * @param feedDict: The feed values, as base condition of the recursion.\n *   execution.\n * @param kwargs: Optional keyword arguments.\n * @param probe: A probe object (of interface `ExecutionProbe`) used for\n *   testing memory footprint of `execute` calls.\n * @returns Result of the execution.\n * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s\n *   encountered during the execution lacks a feed value in `feedDict`.\n */\nexport function execute(\n    fetches: SymbolicTensor|SymbolicTensor[], feedDict: FeedDict,\n    kwargs?: Kwargs, probe?: ExecutionProbe): Tensor|\n    Tensor[]|[Tensor | Tensor[]] {\n  const training: boolean = kwargs == null ? false : kwargs['training'];\n\n  const arrayFetches = Array.isArray(fetches);\n  const fetchArray: SymbolicTensor[] =\n      arrayFetches ? fetches : [fetches];\n\n  const outputNames = fetchArray.map(t => t.name);\n  const finalOutputs: Tensor[] = [];\n  const feedNames = feedDict.names();\n  for (const outputName of outputNames) {\n    if (feedNames.indexOf(outputName) !== -1) {\n      finalOutputs.push(feedDict.getValue(outputName));\n    } else {\n      finalOutputs.push(null);\n    }\n  }\n\n  if (probe != null) {\n    // For optional probing of memory footprint during execution.\n    probe.maxNumTensors = -Infinity;\n    probe.minNumTensors = Infinity;\n  }\n\n  // Check cache.\n  const fetchAndFeedKey =\n      outputNames.join(',') + '|' + feedDict.names().sort().join(',');\n  let sorted: SymbolicTensor[] = cachedSorted.get(fetchAndFeedKey);\n  let recipientCounts: {[fetchName: string]: number};\n  if (sorted == null) {\n    // Cache doesn't contain the desired combination of fetches. Compute\n    // topological sort for the combination for the first time.\n    const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n    sorted = out.sorted;\n    recipientCounts = out.recipientCounts;\n\n    // Store results in cache for future use.\n    cachedSorted.put(fetchAndFeedKey, sorted);\n    cachedRecipientCounts.put(fetchAndFeedKey, recipientCounts);\n  }\n  recipientCounts = {};\n  if (!training) {\n    Object.assign(recipientCounts, cachedRecipientCounts.get(fetchAndFeedKey));\n  }\n\n  const internalFeedDict = new FeedDict(feedDict);\n\n  // Start iterative execution on the topologically-sorted SymbolicTensors.\n  for (let i = 0; i < sorted.length; ++i) {\n    if (probe != null) {\n      // For optional probing of memory usage during execution.\n      const numTensors = memory().numTensors;\n      if (numTensors > probe.maxNumTensors) {\n        probe.maxNumTensors = numTensors;\n      }\n      if (numTensors < probe.minNumTensors) {\n        probe.minNumTensors = numTensors;\n      }\n    }\n\n    const symbolic = sorted[i];\n    const srcLayer = symbolic.sourceLayer;\n    if (srcLayer instanceof InputLayer) {\n      continue;\n    }\n    const inputValues: Tensor[] = [];\n    const inputMasks: Tensor[] = [];\n    const tensorsToDispose: Tensor[] = [];\n\n    let maskExists = false;\n    for (const input of symbolic.inputs) {\n      const value = internalFeedDict.getValue(input);\n      const mask = internalFeedDict.getMask(input);\n      inputValues.push(value);\n      inputMasks.push(mask);\n      if (mask != null) {\n        maskExists = true;\n      }\n      if (!training) {\n        recipientCounts[input.name]--;\n        if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) &&\n            outputNames.indexOf(input.name) === -1 && !value.isDisposed &&\n            input.sourceLayer.stateful !== true) {\n          tensorsToDispose.push(value);\n        }\n      }\n    }\n\n    if (maskExists) {\n      kwargs = kwargs || {};\n      kwargs['mask'] = inputMasks[0];\n    }\n    const outputTensors =\n        toList(srcLayer.apply(inputValues, kwargs)) as Tensor[];\n    let outputMask: Tensor|Tensor[] = null;\n    if (srcLayer.supportsMasking) {\n      outputMask = srcLayer.computeMask(inputValues, inputMasks);\n    }\n    const layerOutputs = getNodeOutputs(symbolic);\n    const outputSymbolicTensors =\n        Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n    for (let i = 0; i < outputSymbolicTensors.length; ++i) {\n      if (!internalFeedDict.hasKey(outputSymbolicTensors[i])) {\n        internalFeedDict.add(\n            outputSymbolicTensors[i], outputTensors[i],\n            Array.isArray(outputMask) ? outputMask[0] : outputMask);\n      }\n      const index = outputNames.indexOf(outputSymbolicTensors[i].name);\n      if (index !== -1) {\n        finalOutputs[index] = outputTensors[i];\n      }\n    }\n\n    if (!training) {\n      // Clean up Tensors that are no longer needed.\n      dispose(tensorsToDispose);\n    }\n  }\n  // NOTE(cais): Unlike intermediate tensors, we don't discard mask\n  // tensors as we go, because these tensors are sometimes passed over a\n  // series of mutliple layers, i.e., not obeying the immediate input\n  // relations in the graph. If this becomes a memory-usage concern,\n  // we can improve this in the future.\n  internalFeedDict.disposeMasks();\n\n  return arrayFetches ? finalOutputs : finalOutputs[0];\n}\n\ntype RecipientCounts = {\n  [fetchName: string]: number\n};\n\nexport type RecipientMap = {\n  [fetchName: string]: Set<string>;\n};\n\n/**\n * Sort the `SymbolicTensor`s topologically, for an array of fetches.\n *\n * This function calls getTopologicalSortAndRecipientCountsForOneFetch and\n * merges their results.\n *\n * @param fetch The array of fetches requested. Must be a non-empty array.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.\n */\nfunction getTopologicalSortAndRecipientCounts(\n    fetches: SymbolicTensor[], feedDict: FeedDict):\n    {sorted: SymbolicTensor[], recipientCounts: RecipientCounts} {\n  util.assert(\n      fetches != null && fetches.length > 0,\n      () => `Expected at least one fetch, got none`);\n\n  let finalSorted: SymbolicTensor[] = [];\n  let finalRecipientMap: RecipientMap = {};\n  if (fetches.length === 1) {\n    // Special-casing 1 fetch for efficiency.\n    const out =\n        getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n    finalSorted = out.sorted;\n    finalRecipientMap = out.recipientMap;\n  } else {\n    const visited = new Set<string>();\n    for (const fetch of fetches) {\n      const {sorted, recipientMap} =\n          getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict);\n\n      // Merge sorted SymbolicTensor Arrays.\n      for (const symbolicTensor of sorted) {\n        if (!visited.has(symbolicTensor.name)) {\n          finalSorted.push(symbolicTensor);\n          visited.add(symbolicTensor.name);\n        }\n      }\n\n      // Merge recipient maps.\n      for (const name in recipientMap) {\n        if (finalRecipientMap[name] == null) {\n          finalRecipientMap[name] = new Set<string>();\n        }\n        recipientMap[name].forEach(\n            recipient => finalRecipientMap[name].add(recipient));\n      }\n    }\n  }\n  return {\n    sorted: finalSorted,\n    recipientCounts: recipientMap2Counts(finalRecipientMap)\n  };\n}\n\nfunction recipientMap2Counts(recipientMap: RecipientMap): RecipientCounts {\n  const recipientCounts: RecipientCounts = {};\n  for (const name in recipientMap) {\n    recipientCounts[name] = recipientMap[name].size;\n  }\n  return recipientCounts;\n}\n\n/**\n * Sort the `SymbolicTensor`s topologically, for a single fetch.\n *\n * This helper function processes the upstream SymbolicTensors of a single\n * fetch.\n *\n * @param fetch The single fetch requested.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.\n */\nexport function getTopologicalSortAndRecipientCountsForOneFetch(\n    fetch: SymbolicTensor, feedDict: FeedDict):\n    {sorted: SymbolicTensor[], recipientMap: RecipientMap} {\n  const visited = new Set<string>();\n  const sorted: SymbolicTensor[] = [];\n  const recipientMap: RecipientMap = {};\n\n  // Put keys of the feedDict into visited first, so they don't have to be\n  // walked. This is needed in case where there are feeds for intermediate\n  // SymbolicTensors of the graph.\n  for (const key of feedDict.names()) {\n    visited.add(key);\n  }\n\n  const stack: SymbolicTensor[] = [];\n  const marks: number[] = [];\n\n  // Initial population of stack and marks.\n  stack.push(fetch);\n\n  while (stack.length > 0) {\n    const top = stack[stack.length - 1];\n    if (visited.has(top.name)) {\n      stack.pop();\n      continue;\n    }\n    const topIsMarked = marks[marks.length - 1] === stack.length - 1;\n    if (top.inputs.length === 0 || topIsMarked) {\n      // Input SymbolicTensor or all children have been visited.\n      stack.pop();\n      sorted.push(top);\n      visited.add(top.name);\n      if (topIsMarked) {\n        marks.pop();\n      }\n    } else {\n      // A non-input SymbolicTensor whose upstream SymbolicTensors haven't\n      // been visited yet. Push them onto the stack.\n      marks.push(stack.length - 1);\n      for (const input of top.inputs) {\n        // Increment the recipient count. Note that this needs to happen\n        // regardless of whether the SymbolicTensor has been visited before.\n        if (recipientMap[input.name] == null) {\n          recipientMap[input.name] = new Set<string>();\n        }\n        recipientMap[input.name].add(top.name);\n\n        if (visited.has(input.name)) {\n          continue;  // Avoid repeated visits to the same SymbolicTensor.\n        }\n        stack.push(input);\n      }\n    }\n  }\n  return {sorted, recipientMap};\n}\n\n/**\n * Get the symbolic output tensors of the node to which a given fetch belongs.\n * @param fetch The fetched symbolic tensor.\n * @returns The Array of symbolic tensors output by the node to which `fetch`\n *   belongs.\n */\nfunction getNodeOutputs(fetch: SymbolicTensor): SymbolicTensor|\n    SymbolicTensor[] {\n  let layerOutputs: SymbolicTensor|SymbolicTensor[];\n  if (fetch.sourceLayer.inboundNodes.length === 1) {\n    layerOutputs = fetch.sourceLayer.output;\n  } else {\n    let nodeIndex: number = null;\n    for (let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n      for (const outputTensor of fetch.sourceLayer.inboundNodes[i]\n               .outputTensors) {\n        if (outputTensor.id === fetch.id) {\n          nodeIndex = i;\n          break;\n        }\n      }\n    }\n    layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n  }\n  return layerOutputs;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/contraints.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport {epsilon} from './backend/common';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w: Tensor, axis: number): Tensor {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport abstract class Constraint extends serialization.Serializable {\n  /* Porting note: was __call__, apply chosen to match other similar choices */\n  abstract apply(w: Tensor): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport interface MaxNormArgs {\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   *\n   *  For instance, in a `Dense` layer the weight matrix\n   *  has shape `[inputDim, outputDim]`,\n   *  set `axis` to `0` to constrain each weight vector\n   *  of length `[inputDim,]`.\n   *  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   *  the weight tensor has shape\n   *  `[rows, cols, inputDepth, outputDepth]`,\n   *  set `axis` to `[0, 1, 2]`\n   *  to constrain the weights of each filter tensor of size\n   *  `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class MaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MaxNorm';\n  private maxValue: number;\n  private axis: number;\n  private readonly defaultMaxValue = 2;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MaxNormArgs) {\n    super();\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {maxValue: this.maxValue, axis: this.axis};\n  }\n}\nserialization.registerClass(MaxNorm);\n\nexport interface UnitNormArgs {\n  /**\n   * Axis along which to calculate norms.\n   *\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class UnitNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'UnitNorm';\n  private axis: number;\n  private readonly defaultAxis = 0;\n  constructor(args: UnitNormArgs) {\n    super();\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(\n        () => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {axis: this.axis};\n  }\n}\nserialization.registerClass(UnitNorm);\n\nexport class NonNeg extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'NonNeg';\n\n  apply(w: Tensor): Tensor {\n    return tfc.relu(w);\n  }\n}\nserialization.registerClass(NonNeg);\n\nexport interface MinMaxNormArgs {\n  /**\n   * Minimum norm for incoming weights\n   */\n  minValue?: number;\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n  /**\n   * Rate for enforcing the constraint: weights will be rescaled to yield:\n   * `(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\n   * Effectively, this means that rate=1.0 stands for strict\n   * enforcement of the constraint, while rate<1.0 means that\n   * weights will be rescaled at each step to slowly move\n   * towards a value inside the desired interval.\n   */\n  rate?: number;\n}\n\nexport class MinMaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MinMaxNorm';\n  private minValue: number;\n  private maxValue: number;\n  private rate: number;\n  private axis: number;\n  private readonly defaultMinValue = 0.0;\n  private readonly defaultMaxValue = 1.0;\n  private readonly defaultRate = 1.0;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MinMaxNormArgs) {\n    super();\n    this.minValue =\n        args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(\n          tfc.mul(\n              this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)),\n          tfc.mul(1.0 - this.rate, norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n}\nserialization.registerClass(MinMaxNorm);\n\n/** @docinline */\nexport type ConstraintIdentifier =\n    'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in ConstraintIdentifier]: string} = {\n      'maxNorm': 'MaxNorm',\n      'minMaxNorm': 'MinMaxNorm',\n      'nonNeg': 'NonNeg',\n      'unitNorm': 'UnitNorm'\n    };\n\nexport function serializeConstraint(constraint: Constraint):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeConstraint(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Constraint {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'constraint');\n}\n\nexport function getConstraint(identifier: ConstraintIdentifier|\n                              serialization.ConfigDict|Constraint): Constraint {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {updateCacheMaxEntries} from './engine/executor';\n\nexport const ENV = env();\n\n/** The max number of entries for the caches of layers' topological sort. */\nENV.registerFlag(\n    'TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES', () => 100, updateCacheMaxEntries);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\n\nimport {add, div, keep, mul, nextFrame, Scalar, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Container} from './engine/container';\nimport {ValueError} from './errors';\nimport {Logs, resolveScalarsInLogs, UnresolvedLogs} from './logs';\nimport * as generic_utils from './utils/generic_utils';\n\n/** Verbosity logging level when fitting a model. */\nexport enum ModelLoggingVerbosity {\n  SILENT = 0,\n  VERBOSE = 1\n}\n\n/** How often to yield to the main thread when training (in ms). */\nexport const DEFAULT_YIELD_EVERY_MS = 125;\n\nexport type Params = {\n  [key: string]: number|string|boolean|number[]|string[]|boolean[];\n};\n\nexport type YieldEveryOptions = 'auto'|'batch'|'epoch'|'never'|number;\n\n/**\n * Abstract base class used to build new callbacks.\n *\n * The `logs` dictionary that callback methods take as argument will contain\n * keys for quantities relevant to the current batch or epoch.\n *\n * Currently, the `.fit()` method of the `Sequential` model class\n * will include the following quantities in the `logs` that\n * it passes to its callbacks:\n *\n * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`\n *   (if validation is enabled in `fit`), and `valAcc` (if validation and\n *   accuracy monitoring are enabled).\n * onBatchBegin: Logs include `size`, the number of samples in the current\n *   batch.\n * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring\n *   is enabled).\n */\nexport abstract class BaseCallback {\n  // TODO(michaelterry): This type is a best guess.\n  validationData: Tensor|Tensor[] = null;\n  /**\n   * Training parameters (eg. verbosity, batch size, number of epochs...).\n   */\n  params: Params;\n\n  setParams(params: Params): void {\n    this.params = params;\n  }\n\n  async onEpochBegin(epoch: number, logs?: UnresolvedLogs) {}\n\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {}\n\n  async onBatchBegin(batch: number, logs?: UnresolvedLogs) {}\n\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs) {}\n\n  async onTrainBegin(logs?: UnresolvedLogs) {}\n\n  async onTrainEnd(logs?: UnresolvedLogs) {}\n\n  // LayersModel needs to call Callback.setModel(), but cannot actually depend\n  // on Callback because that creates a cyclic dependency.  Providing this no-op\n  // method on BaseCallback breaks the cycle: this way LayersModel can depend on\n  // BaseCallback but not on Callback.  The argument is typed as `Container`\n  // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback\n  // overrides this method and enforces that the argument is really a\n  // LayersModel.\n  setModel(model: Container): void {\n    // Do nothing. Use Callback instead of BaseCallback to track the model.\n  }\n}\n\n/**\n * Container abstracting a list of callbacks.\n */\nexport class CallbackList {\n  callbacks: BaseCallback[];\n  queueLength: number;\n\n  // TODO(cais): When the need arises, uncomment the following lines and\n  // implement the queue for time values.\n  // private deltaTBatch: number;\n  // private deltaTsBatchBegin: Array<number>;\n  // private deltaTsBatchEnd: Array<number>;\n\n  /**\n   * Constructor of CallbackList.\n   * @param callbacks Array of `Callback` instances.\n   * @param queueLength Queue length for keeping running statistics over\n   *   callback execution time.\n   */\n  constructor(callbacks?: BaseCallback[], queueLength = 10) {\n    // TODO(cais): Make use of queueLength when implementing the queue for time\n    // values.\n    if (callbacks == null) {\n      callbacks = [];\n    }\n    this.callbacks = callbacks;\n    this.queueLength = queueLength;\n  }\n\n  append(callback: BaseCallback): void {\n    this.callbacks.push(callback);\n  }\n\n  setParams(params: Params): void {\n    for (const callback of this.callbacks) {\n      callback.setParams(params);\n    }\n  }\n\n  setModel(model: Container): void {\n    for (const callback of this.callbacks) {\n      callback.setModel(model);\n    }\n  }\n\n  /**\n   * Called at the start of an epoch.\n   * @param epoch Index of epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onEpochBegin(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochBegin(epoch, logs);\n    }\n  }\n\n  /**\n   * Called at the end of an epoch.\n   * @param epoch Index of epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochEnd(epoch, logs);\n    }\n  }\n\n  /**\n   * Called  right before processing a batch.\n   * @param batch Index of batch within the current epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onBatchBegin(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchBegin(batch, logs);\n    }\n  }\n\n  /**\n   * Called at the end of a batch.\n   * @param batch Index of batch within the current epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchEnd(batch, logs);\n    }\n  }\n\n  /**\n   * Called at the beginning of training.\n   * @param logs Dictionary of logs.\n   */\n  async onTrainBegin(logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainBegin(logs);\n    }\n  }\n\n  /**\n   * Called at the end of training.\n   * @param logs Dictionary of logs.\n   */\n  async onTrainEnd(logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainEnd(logs);\n    }\n  }\n}\n\n/**\n * Callback that accumulates epoch averages of metrics.\n *\n * This callback is automatically applied to every LayersModel.\n */\nexport class BaseLogger extends BaseCallback {\n  private seen: number;\n  private totals: UnresolvedLogs;\n\n  constructor() {\n    super();\n  }\n\n  override async onEpochBegin(epoch: number) {\n    this.seen = 0;\n    this.totals = {};\n  }\n\n  override async onBatchEnd(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    const batchSize = logs['size'] == null ? 0 : logs['size'] as number;\n    this.seen += batchSize;\n    for (const key in logs) {\n      const value = logs[key];\n      if (typeof value === 'number') {\n        if (!this.totals.hasOwnProperty(key)) {\n          this.totals[key] = 0;\n        }\n        this.totals[key] = this.totals[key] as number + value * batchSize;\n      } else {\n        let oldTotalsToDispose: Scalar;\n        if (key in this.totals) {\n          oldTotalsToDispose = this.totals[key] as Scalar;\n        } else {\n          this.totals[key] = 0;\n        }\n        const total: Scalar =\n            tidy(() => add((this.totals[key]), mul(value, batchSize)));\n        this.totals[key] = total;\n        if (oldTotalsToDispose != null) {\n          oldTotalsToDispose.dispose();\n        }\n      }\n    }\n  }\n\n  override async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs != null) {\n      for (const key of this.params['metrics'] as string[]) {\n        if (this.totals[key] == null) {\n          continue;\n        }\n        if (typeof this.totals[key] === 'number') {\n          logs[key] = this.totals[key] as number / this.seen;\n        } else {\n          tidy(() => {\n            const log: Scalar = mul(div(1, this.seen), this.totals[key]);\n            logs[key] = log;\n            (this.totals[key] as Tensor).dispose();\n            keep(logs[key] as Scalar);\n          });\n        }\n      }\n    }\n  }\n}\n\n/**\n * Callback that records events into a `History` object. This callback is\n * automatically applied to every TF.js Layers model. The `History` object\n * gets returned by the `fit` method of models.\n */\nexport class History extends BaseCallback {\n  epoch: number[];\n  history: {[key: string]: Array<number|Tensor>};\n\n  override async onTrainBegin(logs?: UnresolvedLogs) {\n    this.epoch = [];\n    this.history = {};\n  }\n\n  override async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    this.epoch.push(epoch);\n    for (const key in logs) {\n      if (this.history[key] == null) {\n        this.history[key] = [];\n      }\n      this.history[key].push(logs[key]);\n    }\n  }\n\n  /**\n   * Await the values of all losses and metrics.\n   */\n  async syncData() {\n    const promises: Array<Promise<Float32Array|Int32Array|Uint8Array>> = [];\n    const keys: string[] = [];\n    const indices: number[] = [];\n    for (const key in this.history) {\n      const valueArray = this.history[key];\n      for (let i = 0; i < valueArray.length; ++i) {\n        if (typeof valueArray[i] !== 'number') {\n          const valueScalar = valueArray[i] as Tensor;\n          promises.push(valueScalar.data());\n          keys.push(key);\n          indices.push(i);\n        }\n      }\n    }\n    const values = await Promise.all(promises);\n    for (let n = 0; n < values.length; ++n) {\n      const tensorToDispose = this.history[keys[n]][indices[n]] as Tensor;\n      tensorToDispose.dispose();\n      this.history[keys[n]][indices[n]] = values[n][0];\n    }\n  }\n}\n\nexport interface CustomCallbackArgs {\n  onTrainBegin?: (logs?: Logs) => void | Promise<void>;\n  onTrainEnd?: (logs?: Logs) => void | Promise<void>;\n  onEpochBegin?: (epoch: number, logs?: Logs) => void | Promise<void>;\n  onEpochEnd?: (epoch: number, logs?: Logs) => void | Promise<void>;\n  onBatchBegin?: (batch: number, logs?: Logs) => void | Promise<void>;\n  onBatchEnd?: (batch: number, logs?: Logs) => void | Promise<void>;\n  onYield?: (epoch: number, batch: number, logs: Logs) => void | Promise<void>;\n  // Used for test DI mocking.\n  nowFunc?: Function;\n  nextFrameFunc?: Function;\n}\n\n/**\n * Custom callback for training.\n */\nexport class CustomCallback extends BaseCallback {\n  protected readonly trainBegin: (logs?: Logs) => void | Promise<void>;\n  protected readonly trainEnd: (logs?: Logs) => void | Promise<void>;\n  protected readonly epochBegin:\n      (epoch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly epochEnd:\n      (epoch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly batchBegin:\n      (batch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly batchEnd:\n      (batch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly yield:\n      (epoch: number, batch: number, logs: Logs) => void | Promise<void>;\n\n  private yieldEvery: YieldEveryOptions;\n  private currentEpoch = 0;\n  public nowFunc: Function;\n  public nextFrameFunc: Function;\n\n  constructor(args: CustomCallbackArgs, yieldEvery?: YieldEveryOptions) {\n    super();\n    this.nowFunc = args.nowFunc;\n    this.nextFrameFunc = args.nextFrameFunc || nextFrame;\n    this.yieldEvery = yieldEvery || 'auto';\n    if (this.yieldEvery === 'auto') {\n      this.yieldEvery = DEFAULT_YIELD_EVERY_MS;\n    }\n    if (this.yieldEvery === 'never' && args.onYield != null) {\n      throw new Error(\n          'yieldEvery is `never` but you provided an `onYield` callback. ' +\n          'Either change `yieldEvery` or remove the callback');\n    }\n    if (util.isNumber(this.yieldEvery)) {\n      // Decorate `maybeWait` so it will be called at most once every\n      // `yieldEvery` ms.\n      this.maybeWait = generic_utils.debounce(\n          this.maybeWait.bind(this), this.yieldEvery as number, this.nowFunc);\n    }\n    this.trainBegin = args.onTrainBegin;\n    this.trainEnd = args.onTrainEnd;\n    this.epochBegin = args.onEpochBegin;\n    this.epochEnd = args.onEpochEnd;\n    this.batchBegin = args.onBatchBegin;\n    this.batchEnd = args.onBatchEnd;\n    this.yield = args.onYield;\n  }\n\n  async maybeWait(epoch: number, batch: number, logs: UnresolvedLogs) {\n    const ps: Array<void|Promise<void>> = [];\n    if (this.yield != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.yield(epoch, batch, logs as Logs));\n    }\n    ps.push(this.nextFrameFunc());\n    await Promise.all(ps);\n  }\n\n  override async onEpochBegin(epoch: number, logs?: UnresolvedLogs):\n      Promise<void> {\n    this.currentEpoch = epoch;\n    if (this.epochBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.epochBegin(epoch, logs as Logs);\n    }\n  }\n\n  override async onEpochEnd(epoch: number, logs?: UnresolvedLogs):\n      Promise<void> {\n    const ps: Array<void|Promise<void>> = [];\n    if (this.epochEnd != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.epochEnd(epoch, logs as Logs));\n    }\n    if (this.yieldEvery === 'epoch') {\n      ps.push(this.nextFrameFunc());\n    }\n    await Promise.all(ps);\n  }\n\n  override async onBatchBegin(batch: number, logs?: UnresolvedLogs):\n      Promise<void> {\n    if (this.batchBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.batchBegin(batch, logs as Logs);\n    }\n  }\n\n  override async onBatchEnd(batch: number, logs?: UnresolvedLogs):\n      Promise<void> {\n    const ps: Array<void|Promise<void>> = [];\n    if (this.batchEnd != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.batchEnd(batch, logs as Logs));\n    }\n    if (this.yieldEvery === 'batch') {\n      ps.push(this.nextFrameFunc());\n    } else if (util.isNumber(this.yieldEvery)) {\n      ps.push(this.maybeWait(this.currentEpoch, batch, logs));\n    }\n    await Promise.all(ps);\n  }\n\n  override async onTrainBegin(logs?: UnresolvedLogs): Promise<void> {\n    if (this.trainBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainBegin(logs as Logs);\n    }\n  }\n\n  override async onTrainEnd(logs?: UnresolvedLogs): Promise<void> {\n    if (this.trainEnd != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainEnd(logs as Logs);\n    }\n  }\n}\n\n/**\n * Standardize callbacks or configurations of them to an Array of callbacks.\n */\nexport function standardizeCallbacks(\n    callbacks: BaseCallback|BaseCallback[]|CustomCallbackArgs|\n    CustomCallbackArgs[],\n    yieldEvery: YieldEveryOptions): BaseCallback[] {\n  if (callbacks == null) {\n    callbacks = {} as BaseCallback;\n  }\n  if (callbacks instanceof BaseCallback) {\n    return [callbacks];\n  }\n  if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) {\n    return callbacks as BaseCallback[];\n  }\n  // Convert custom callback configs to custom callback objects.\n  const callbackConfigs =\n      generic_utils.toList(callbacks) as CustomCallbackArgs[];\n  return callbackConfigs.map(\n      callbackConfig => new CustomCallback(callbackConfig, yieldEvery));\n}\n\nexport declare type BaseCallbackConstructor = {\n  new (): BaseCallback\n};\n\n/**\n * A global registry for callback constructors to be used during\n * LayersModel.fit().\n */\nexport class CallbackConstructorRegistry {\n  private static constructors:\n      {[verbosityLevel: number]: BaseCallbackConstructor[]} = {};\n\n  /**\n   * Blocks public access to constructor.\n   */\n  private constructor() {}\n\n  /**\n   * Register a tf.LayersModel.fit() callback constructor.\n   *\n   * The registered callback constructor will be used to instantiate\n   * callbacks for every tf.LayersModel.fit() call afterwards.\n   *\n   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`\n   *   is to be reigstered.\n   * @param callbackConstructor A no-arg constructor for `tf.Callback`.\n   * @throws Error, if the same callbackConstructor has been registered before,\n   *   either at the same or a different `verbosityLevel`.\n   */\n  static registerCallbackConstructor(\n      verbosityLevel: number, callbackConstructor: BaseCallbackConstructor) {\n    util.assert(\n        verbosityLevel >= 0 && Number.isInteger(verbosityLevel),\n        () => `Verbosity level is expected to be an integer >= 0, ` +\n            `but got ${verbosityLevel}`);\n    CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);\n    if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {\n      CallbackConstructorRegistry.constructors[verbosityLevel] = [];\n    }\n    CallbackConstructorRegistry.constructors[verbosityLevel].push(\n        callbackConstructor);\n  }\n\n  private static checkForDuplicate(callbackConstructor:\n                                       BaseCallbackConstructor) {\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const constructors = CallbackConstructorRegistry.constructors[+levelName];\n      constructors.forEach(ctor => {\n        if (ctor === callbackConstructor) {\n          throw new ValueError('Duplicate callback constructor.');\n        }\n      });\n    }\n  }\n\n  /**\n   * Clear all registered callback constructors.\n   */\n  protected static clear() {\n    CallbackConstructorRegistry.constructors = {};\n  }\n\n  /**\n   * Create callbacks using the registered callback constructors.\n   *\n   * Given `verbosityLevel`, all constructors registered at that level or above\n   * will be called and the instantiated callbacks will be used.\n   *\n   * @param verbosityLevel: Level of verbosity.\n   */\n  static createCallbacks(verbosityLevel: number): BaseCallback[] {\n    const constructors: BaseCallbackConstructor[] = [];\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const level = +levelName;\n      if (verbosityLevel >= level) {\n        constructors.push(...CallbackConstructorRegistry.constructors[level]);\n      }\n    }\n    return constructors.map(ctor => new ctor());\n  }\n}\n\nexport function configureCallbacks(\n    callbacks: BaseCallback[], verbose: ModelLoggingVerbosity, epochs: number,\n    initialEpoch: number, numTrainSamples: number, stepsPerEpoch: number,\n    batchSize: number, doValidation: boolean,\n    callbackMetrics: string[]): {callbackList: CallbackList, history: History} {\n  const history = new History();\n  const actualCallbacks: BaseCallback[] = [\n    new BaseLogger(), ...CallbackConstructorRegistry.createCallbacks(verbose)\n  ];\n  if (callbacks != null) {\n    actualCallbacks.push(...callbacks);\n  }\n  actualCallbacks.push(history);\n  const callbackList = new CallbackList(actualCallbacks);\n\n  // TODO(cais): Figure out when this LayersModel instance can have a\n  // dynamically\n  //   set property called 'callback_model' as in PyKeras.\n\n  callbackList.setParams({\n    epochs,\n    initialEpoch,\n    samples: numTrainSamples,\n    steps: stepsPerEpoch,\n    batchSize,\n    verbose,\n    doValidation,\n    metrics: callbackMetrics,\n  });\n  return {callbackList, history};\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {dispose, Scalar} from '@tensorflow/tfjs-core';\n\n/**\n * Logs in which values can be either numbers or Tensors (Scalars).\n *\n * Used internally.\n */\nexport type UnresolvedLogs = {\n  [key: string]: number|Scalar;\n};\n\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs: UnresolvedLogs) {\n  if (logs == null) {\n    return;\n  }\n  const promises: Array<Promise<Float32Array|Int32Array|Uint8Array>> = [];\n  const keys: string[] = [];\n  const scalarsToDispose: Scalar[] = [];\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== 'number') {\n      const valueScalar = value;\n      promises.push(valueScalar.data());\n      keys.push(key);\n      scalarsToDispose.push(valueScalar);\n    }\n  }\n  if (promises.length > 0) {\n    const values = await Promise.all(promises);\n    for (let i = 0; i < values.length; ++i) {\n      logs[keys[i]] = values[i][0];\n    }\n    // Dispose the original scalar tensors.\n    dispose(scalarsToDispose);\n  }\n}\n\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs: UnresolvedLogs) {\n  if (logs == null) {\n    return;\n  }\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}\n\n/**\n * Logs in which values can only be numbers.\n *\n * Used when calling client-provided custom callbacks.\n */\nexport type Logs = {\n  [key: string]: number;\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source layers/__init__.py */\nimport {serialization} from '@tensorflow/tfjs-core';\n\nimport {deserializeKerasObject} from '../utils/generic_utils';\n\n/**\n * Instantiate a layer from a config dictionary.\n * @param config dict of the form {class_name: str, config: dict}\n * @param customObjects dict mapping class names (or function names)\n *   of custom (non-Keras) objects to class/functions\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns Layer instance (may be LayersModel, Sequential, Layer...)\n */\nexport function deserialize(\n    config: serialization.ConfigDict,\n    customObjects = {} as serialization.ConfigDict,\n    fastWeightInit = false): serialization.Serializable {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'layer', fastWeightInit);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: losses.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {epsilon} from './backend/common';\nimport * as K from './backend/tfjs_backend';\nimport {ValueError} from './errors';\nimport {LossOrMetricFn} from './types';\n\n/**\n * Normalizes a tensor wrt the L2 norm alongside the specified axis.\n * @param x\n * @param axis Axis along which to perform normalization.\n */\nexport function l2Normalize(x: Tensor, axis?: number): Tensor {\n  return tidy(() => {\n    if (x.dtype !== 'float32') {\n      x = tfc.cast(x, 'float32');\n    }\n    const squareSum = tfc.sum(K.square(x), axis, true);\n    const epsilonTensor = tfc.fill(squareSum.shape, epsilon());\n    const norm = tfc.sqrt(tfc.maximum(squareSum, epsilonTensor));\n    return tfc.div(x, norm);\n  });\n}\n\nexport function meanSquaredError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => tfc.mean(K.square(tfc.sub(yPred, yTrue)), -1));\n}\n\nexport function meanAbsoluteError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => tfc.mean(tfc.abs(tfc.sub(yPred, yTrue)), -1));\n}\n\nexport function meanAbsolutePercentageError(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const diff = tfc.sub(yTrue, yPred);\n    const clippedTrue =\n        tfc.clipByValue(tfc.abs(yTrue), epsilon(), Number.MAX_VALUE);\n    const absResult = tfc.abs(tfc.div(diff, clippedTrue));\n    return tfc.mul(100, tfc.mean(absResult, -1));\n  });\n}\n\nexport function meanSquaredLogarithmicError(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const clippedPred = tfc.clipByValue(yPred, epsilon(), Number.MAX_VALUE);\n    const firstLog = tfc.log(tfc.add(1, clippedPred));\n\n    const clippedTrue = tfc.clipByValue(yTrue, epsilon(), Number.MAX_VALUE);\n    const secondLog = tfc.log(tfc.add(1, clippedTrue));\n\n    return tfc.mean(K.square(tfc.sub(firstLog, secondLog)), -1);\n  });\n}\n\nexport function squaredHinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n    return tfc.mean(K.square(maxResult), -1);\n  });\n}\n\nexport function hinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n    return tfc.mean(maxResult, -1);\n  });\n}\n\nexport function categoricalHinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const pos = tfc.sum(tfc.mul(yTrue, yPred), -1);\n    const neg = tfc.max(tfc.mul(tfc.sub(1, yTrue), yPred), -1);\n    return tfc.maximum(0, tfc.add(1, tfc.sub(neg, pos)));\n  });\n}\n\n/**\n * Logarithm of the hyperbolic cosine of the prediction error.\n *\n * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and\n * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly\n * like the mean squared error, but will not be so strongly affected by the\n * occasional wildly incorrect prediction.\n */\nexport function logcosh(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const log2 = Math.log(2);\n    const predictionDiff = tfc.sub(yPred, yTrue);\n    const logcoshResult = tfc.sub(\n        tfc.add(predictionDiff, tfc.softplus(tfc.mul(-2, predictionDiff))),\n        log2);\n    return tfc.mean(logcoshResult, -1);\n  });\n}\n\nexport function categoricalCrossentropy(\n    target: Tensor, output: Tensor, fromLogits = false): Tensor {\n  return tidy(() => {\n    if (fromLogits) {\n      output = tfc.softmax(output);\n    } else {\n      // scale preds so that the class probabilities of each sample sum to 1.\n      const outputSum = tfc.sum(output, output.shape.length - 1, true);\n      output = tfc.div(output, outputSum);\n    }\n    output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n    return tfc.neg(tfc.sum(\n        tfc.mul(tfc.cast(target, 'float32'), tfc.log(output)),\n        output.shape.length - 1));\n  });\n}\n\n/**\n * Categorical crossentropy with integer targets.\n *\n * @param target An integer tensor.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n */\nexport function sparseCategoricalCrossentropy(\n    target: Tensor, output: Tensor, fromLogits = false): Tensor {\n  return tidy(() => {\n    const flatTarget =\n        tfc.cast(tfc.floor(K.flatten(target)), 'int32') as Tensor1D;\n    output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n    const outputShape = output.shape;\n    const oneHotTarget = tfc.reshape(\n        tfc.oneHot(flatTarget, outputShape[outputShape.length - 1]),\n        outputShape);\n    return categoricalCrossentropy(oneHotTarget, output, fromLogits);\n  });\n}\n\n/**\n * From TensorFlow's implementation in nn_impl.py:\n *\n * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n *    = (1 - z) * x + log(1 + exp(-x))\n *    = x - x * z + log(1 + exp(-x))\n * For x < 0, to avoid overflow in exp(-x), we reformulate the above\n *      x - x * z + log(1 + exp(-x))\n *    = log(exp(x)) - x * z + log(1 + exp(-x))\n *    = - x * z + log(1 + exp(x))\n * Hence, to ensure stability and avoid overflow, the implementation uses this\n * equivalent formulation\n *    max(x, 0) - x * z + log(1 + exp(-abs(x)))\n *\n * @param labels The labels.\n * @param logits The logits.\n */\nexport function sigmoidCrossEntropyWithLogits(\n    labels: Tensor, logits: Tensor): Tensor {\n  if (!util.arraysEqual(labels.shape, logits.shape)) {\n    throw new ValueError(\n        `logits and labels must have the same shape, but got shapes ` +\n        `${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);\n  }\n  return tidy(() => {\n    // The logistic loss formula from above is\n    //   x - x * z + log(1 + exp(-x))\n    // For x < 0, a more numerically stable formula is\n    //   -x * z + log(1 + exp(x))\n    // Note that these two expressions can be combined into the following:\n    //   max(x, 0) - x * z + log(1 + exp(-abs(x)))\n    const reluLogits = tfc.relu(logits);\n    const negAbsLogits = tfc.neg(tfc.abs(logits));\n    return tfc.add(\n        tfc.sub(reluLogits, tfc.mul(logits, labels)),\n        tfc.log1p(tfc.exp(negAbsLogits)));\n  });\n}\n\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    let y: Tensor;\n    y = tfc.clipByValue(yPred, epsilon(), 1 - epsilon());\n    y = tfc.log(tfc.div(y, tfc.sub(1, y)));\n    return tfc.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);\n  });\n}\n\nexport function kullbackLeiblerDivergence(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const clippedTrue = tfc.clipByValue(yTrue, epsilon(), 1);\n    const clippedPred = tfc.clipByValue(yPred, epsilon(), 1);\n    return tfc.sum(\n        tfc.mul(yTrue, tfc.log(tfc.div(clippedTrue, clippedPred))), -1);\n  });\n}\n\nexport function poisson(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const logPred = tfc.log(tfc.add(epsilon(), yPred));\n    return tfc.mean(tfc.sub(yPred, tfc.mul(yTrue, logPred)), -1);\n  });\n}\n\nexport function cosineProximity(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const trueNormalized = l2Normalize(yTrue, -1);\n    const predNormalized = l2Normalize(yPred, -1);\n    const trueXPred = tfc.mul(trueNormalized, predNormalized);\n    return tfc.neg(tfc.sum(trueXPred, -1));\n  });\n}\n\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const msle = meanSquaredLogarithmicError;\nexport const MSLE = meanSquaredLogarithmicError;\nexport const kld = kullbackLeiblerDivergence;\nexport const KLD = kullbackLeiblerDivergence;\nexport const cosine = cosineProximity;\n\n// TODO(michaelterry): Add deserialize() function.\n\nexport const lossesMap: {[functionName: string]: LossOrMetricFn} = {\n  meanSquaredError,\n  meanAbsoluteError,\n  meanAbsolutePercentageError,\n  meanSquaredLogarithmicError,\n  squaredHinge,\n  hinge,\n  categoricalHinge,\n  logcosh,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  binaryCrossentropy,\n  kullbackLeiblerDivergence,\n  poisson,\n  cosineProximity\n};\n\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function get(identifierOrFn: string|LossOrMetricFn): LossOrMetricFn {\n  if (typeof identifierOrFn === 'string') {\n    if (identifierOrFn in lossesMap) {\n      return lossesMap[identifierOrFn];\n    }\n    let errMsg = `Unknown loss ${identifierOrFn}`;\n    if (identifierOrFn.toLowerCase().includes('softmaxcrossentropy')) {\n      errMsg = `Unknown loss ${identifierOrFn}. ` +\n          'Use \"categoricalCrossentropy\" as the string name for ' +\n          'tf.losses.softmaxCrossEntropy';\n    }\n    throw new ValueError(errMsg);\n  } else {\n    return identifierOrFn;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Built-in metrics.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport * as K from './backend/tfjs_backend';\nimport {NotImplementedError, ValueError} from './errors';\nimport {categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss} from './losses';\nimport {binaryCrossentropy as lossBinaryCrossentropy} from './losses';\nimport {lossesMap} from './losses';\nimport {LossOrMetricFn} from './types';\nimport * as util from './utils/generic_utils';\n\nexport function binaryAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n    const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n    return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n  });\n}\n\nexport function categoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(\n      () => K.cast(\n          tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\n\nfunction truePositives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.cast(\n        tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 1), tfc.equal(yPred, 1))),\n        'float32');\n  });\n}\n\nfunction falseNegatives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.cast(\n        tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 1), tfc.equal(yPred, 0))),\n        'float32');\n  });\n}\n\nfunction falsePositives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.cast(\n        tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 0), tfc.equal(yPred, 1))),\n        'float32');\n  });\n}\n\nexport function precision(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fp = falsePositives(yTrue, yPred);\n\n    const denominator = tfc.add(tp, fp);\n\n    return tfc.cast(\n        tfc.where(tfc.greater(denominator, 0), tfc.div(tp, denominator), 0),\n        'float32');\n  });\n}\n\nexport function recall(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fn = falseNegatives(yTrue, yPred);\n\n    const denominator = tfc.add(tp, fn);\n\n    return tfc.cast(\n        tfc.where(tfc.greater(denominator, 0), tfc.div(tp, denominator), 0),\n        'float32');\n  });\n}\n\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return lossBinaryCrossentropy(yTrue, yPred);\n}\n\nexport function sparseCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  if (yTrue.rank === yPred.rank) {\n    yTrue = tfc.squeeze(yTrue, [yTrue.rank - 1]);\n  }\n  yPred = tfc.argMax(yPred, -1);\n  if (yPred.dtype !== yTrue.dtype) {\n    yPred = tfc.cast(yPred, yTrue.dtype);\n  }\n  return tfc.cast(tfc.equal(yTrue, yPred), 'float32');\n}\n\nexport function topKCategoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  throw new NotImplementedError();\n}\n\nexport function sparseTopKCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  throw new NotImplementedError();\n}\n\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n\n// TODO(cais, nielsene): Add serialize().\n\nexport const metricsMap: {[functionName: string]: LossOrMetricFn} = {\n  binaryAccuracy,\n  categoricalAccuracy,\n  precision,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  mse,\n  MSE,\n  mae,\n  MAE,\n  mape,\n  MAPE,\n  cosine\n};\n\nexport function get(identifier: string|LossOrMetricFn): LossOrMetricFn {\n  if (typeof identifier === 'string' && identifier in metricsMap) {\n    return metricsMap[identifier];\n  } else if (typeof identifier !== 'string' && identifier != null) {\n    return identifier;\n  } else {\n    throw new ValueError(`Unknown metric ${identifier}`);\n  }\n}\n\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nexport function getLossOrMetricName(fn: string|LossOrMetricFn): string {\n  util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n  if (typeof fn === 'string') {\n    return fn;\n  } else {\n    let fnName;\n    for (const key of Object.keys(lossesMap)) {\n      if (lossesMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== undefined) {\n      return fnName;\n    }\n    for (const key of Object.keys(metricsMap)) {\n      if (metricsMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== undefined) {\n      return fnName;\n    }\n    return (fn as Function).name;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/** Utility functions related to user-defined metadata. */\n\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n\n/**\n * Check validity of user-defined metadata.\n *\n * @param userDefinedMetadata\n * @param modelName Name of the model that the user-defined metadata belongs to.\n *   Used during construction of error messages.\n * @param checkSize Whether to check the size of the metadata is under\n *   recommended limit. Default: `false`. If `true`, will try stringify the\n *   JSON object and print a console warning if the serialzied size is above the\n *   limit.\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\n */\nexport function checkUserDefinedMetadata(\n    userDefinedMetadata: {}, modelName: string, checkSize = false): void {\n  if (userDefinedMetadata == null ||\n      typeof userDefinedMetadata !== 'object' ||\n      Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype ||\n      !plainObjectCheck(userDefinedMetadata)) {\n    throw new Error(\n        'User-defined metadata is expected to be a JSON object, but is not.');\n  }\n\n  if (checkSize) {\n    const out = JSON.stringify(userDefinedMetadata);\n    if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n      console.warn(\n          `User-defined metadata of model \"${modelName}\" is too large in ` +\n          `size (length=${out.length} when serialized). It is not ` +\n          `recommended to store such large objects in user-defined metadata. ` +\n          `Please make sure its serialized length is <= ` +\n          `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n    }\n  }\n}\n\n/**\n * Check if an input is plain JSON object or any valid subfield of it.\n *\n * @param x The input to be checked.\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\n *   cases of arrays and primitives.\n * @return Returns `true` if and only if `x` is a plain JSON object,\n *   a JSON-valid primitive including string, number, boolean and null,\n *   or an array of the said types.\n */\n// tslint:disable-next-line:no-any\nexport function plainObjectCheck(x: any): boolean {\n  if (x === null) {\n    // Note: typeof `null` is 'object', and `null` is valid in JSON.\n    return true;\n  } else if (typeof x === 'object') {\n    if (Object.getPrototypeOf(x) === Object.prototype) {\n      // `x` is a JavaScript object and its prototype is Object.\n      const keys = Object.keys(x);\n      for (const key of keys) {\n        if (typeof key !== 'string') {\n          // JSON keys must be strings.\n          return false;\n        }\n        if (!plainObjectCheck(x[key])) {  // Recursive call.\n          return false;\n        }\n      }\n      return true;\n    } else {\n      // `x` is a JavaScript object but its prototype is not Object.\n      if (Array.isArray(x)) {\n        // `x` is a JavaScript array.\n        for (const item of x) {\n          if (!plainObjectCheck(item)) {  // Recursive call.\n            return false;\n          }\n        }\n        return true;\n      } else {\n        // `x` is a JavaScript object and its prototype is not Object,\n        // and it's not an Array. I.e., it's a complex object such as\n        // `Error` and `Date`.\n        return false;\n      }\n    }\n  } else {\n    // `x` is not a JavaScript object or `null`.\n    const xType = typeof x;\n    return xType === 'string' || xType === 'number' || xType === 'boolean';\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {Container} from '../engine/container';\nimport {Layer, Node} from '../engine/topology';\nimport {countParamsInWeights} from './variable_utils';\n\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(\n    model: Container, lineLength?: number, positions?: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void =\n        console.log): void {\n  const sequentialLike = isModelSequentialLike(model);\n\n  // Header names for different log elements.\n  const toDisplay: string[] = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];\n  if (sequentialLike) {\n    lineLength = lineLength || 90;\n    positions = positions || [0.32, 0.61, 0.89, 1];\n  } else {\n    lineLength = lineLength || 115;\n    positions = positions || [0.24, 0.48, 0.70, 0.80, 1];\n    // Header names for different log elements.\n  }\n\n  if (positions[positions.length - 1] <= 1) {\n    // `positions` is relative. Convert it to absolute positioning.\n    positions = positions.map(p => Math.floor(lineLength * p));\n  }\n\n  let relevantNodes: Node[];\n  if (!sequentialLike) {\n    toDisplay.push('Receives inputs');\n    relevantNodes = [];\n    for (const depth in model.nodesByDepth) {\n      relevantNodes.push(...model.nodesByDepth[depth]);\n    }\n  }\n\n  printFn('_'.repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn('='.repeat(lineLength));\n\n  const layers = model.layers;\n  for (let i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(\n          layers[i], positions, relevantNodes, printFn);\n    }\n    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n  }\n\n  // tslint:disable-next-line:no-any\n  (model as any).checkTrainableWeightsConsistency();\n\n  const trainableCount = countTrainableParams(model);\n  const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n\n  printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n  printFn(`Trainable params: ${trainableCount}`);\n  printFn(`Non-trainable params: ${nonTrainableCount}`);\n  printFn('_'.repeat(lineLength));\n}\n\nfunction countTrainableParams(model: Container): number {\n  let trainableCount: number;\n  // tslint:disable:no-any\n  if ((model as any).collectedTrainableWeights != null) {\n    trainableCount =\n        countParamsInWeights((model as any).collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model.trainableWeights);\n  }\n  // tslint:enable:no-any\n  return trainableCount;\n}\n\nfunction isModelSequentialLike(model: Container): boolean {\n  let sequentialLike = true;\n  const nodesByDepth: Node[][] = [];\n  const nodes: Node[] = [];\n  for (const depth in model.nodesByDepth) {\n    nodesByDepth.push(model.nodesByDepth[depth]);\n  }\n  for (const depthNodes of nodesByDepth) {\n    if (depthNodes.length > 1 ||\n        depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n    nodes.push(...depthNodes);\n  }\n  if (sequentialLike) {\n    // Search for shared layers.\n    for (const layer of model.layers) {\n      let flag = false;\n      for (const node of layer.inboundNodes) {\n        if (nodes.indexOf(node) !== -1) {\n          if (flag) {\n            sequentialLike = false;\n            break;\n          } else {\n            flag = true;\n          }\n        }\n      }\n      if (!sequentialLike) {\n        break;\n      }\n    }\n  }\n  return sequentialLike;\n}\n\nfunction printRow(\n    fields: string[], positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void = console.log) {\n  let line = '';\n  for (let i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + ' ';\n    }\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += ' '.repeat(positions[i] - line.length);\n  }\n  printFn(line);\n}\n\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(\n    layer: Layer, positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  let inputShape: string;\n\n  try {\n    inputShape = (layer.inboundNodes.map(\n      x => JSON.stringify(x.inputShapes)\n    )).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const name = layer.name;\n  const className = layer.getClassName();\n  const fields: string[] =\n      [`${name} (${className})`, inputShape,\n      outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\n\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(\n    layer: Layer, positions: number[], relevantNodes: Node[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  let inputShape: string;\n\n  try {\n    inputShape = (layer.inboundNodes.map(\n      x => JSON.stringify(x.inputShapes)\n    )).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const connections: string[] = [];\n  for (const node of layer.inboundNodes) {\n    if (relevantNodes != null && relevantNodes.length > 0 &&\n        relevantNodes.indexOf(node) === -1) {\n      continue;\n    }\n    for (let i = 0; i < node.inboundLayers.length; ++i) {\n      const inboundLayer = node.inboundLayers[i].name;\n      const inboundLayerIndex = node.nodeIndices[i];\n      const inboundTensorIndex = node.tensorIndices[i];\n      connections.push(\n          `${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n    }\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const firstConnection = connections.length === 0 ? '' : connections[0];\n  const fields: string[] = [\n    `${name} (${className})`, inputShape,\n    outputShape, layer.countParams().toString(),\n    firstConnection\n  ];\n\n  printRow(fields, positions, printFn);\n  for (let i = 1; i < connections.length; ++i) {\n    printRow(['', '', '', '', connections[i]], positions, printFn);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Porting note: This file doesn't exist in PyKeras.\n// Its purpose here is to centralize the boundary layer between\n// tfjs-layers's internal Config TS-Centric format and PyKeras's\n// serialized Python Config format.\n\nimport {serialization} from '@tensorflow/tfjs-core';\n\nimport {PyJsonValue} from '../keras_format/types';\nimport * as generic_utils from '../utils/generic_utils';\n// tslint:enable\n\n/**\n * Test whether a value in an array is the name of a LayersModel or Layer.\n * @param key The key name that the value is found under. Note that the key\n *   may not be at the level immediately above the value, if the value is in a\n *   nested array.\n * @param index Index of the value in the Array that it is found in.\n * @param value The value object.\n * @returns A boolean indicating whether value is a name.\n */\nfunction isArrayItemInputOrOutputName<T>(\n    key: string, index: number, value: T): boolean {\n  return (key === 'inboundNodes' || key === 'outputLayers' ||\n          key === 'inputLayers') &&\n      index === 0 && typeof value === 'string';\n}\n\n/**\n * Convert a Pythonic config object to TypeScript config object.\n * @param pythonicConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertPythonicToTs(\n    pythonicConfig: PyJsonValue, key?: string): serialization.ConfigDictValue {\n  if (pythonicConfig === null) {\n    return null;\n  } else if (typeof pythonicConfig === 'string') {\n    return generic_utils.toCamelCase(pythonicConfig);\n  } else if (\n      (typeof pythonicConfig === 'number') ||\n      (typeof pythonicConfig === 'boolean')) {\n    return pythonicConfig;\n  } else if (pythonicConfig instanceof Array) {\n    const tsArray = [];\n    const arrayLength = pythonicConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = pythonicConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        tsArray.push(item);\n      } else {\n        tsArray.push(convertPythonicToTs(item, key));\n      }\n    }\n    return tsArray;\n  } else {\n    const tsDict: serialization.ConfigDict = {};\n    for (const pythonicKey of Object.keys(pythonicConfig)) {\n      const pythonicValue = pythonicConfig[pythonicKey];\n      if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of LayersModel and Layer instances, should not undergo the\n        // camel-case conversion.\n        tsDict[pythonicKey] = pythonicValue;\n      } else {\n        const tsKey = generic_utils.toCamelCase(pythonicKey);\n        tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n      }\n    }\n    return tsDict;\n  }\n}\n\n/**\n * Convert a TypeScript config object to Python config object.\n * @param tsConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertTsToPythonic(\n    tsConfig: serialization.ConfigDictValue, key?: string): PyJsonValue {\n  if (tsConfig === null || tsConfig === undefined) {\n    return null;\n  } else if (typeof tsConfig === 'string') {\n    return generic_utils.toSnakeCase(tsConfig);\n  } else if (\n      (typeof tsConfig === 'number') || (typeof tsConfig === 'boolean')) {\n    return tsConfig;\n  } else if (tsConfig instanceof Array) {\n    const pyArray = [];\n    const arrayLength = tsConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = tsConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        pyArray.push(item);\n      } else {\n        pyArray.push(convertTsToPythonic(item, key));\n      }\n    }\n    return pyArray;\n  } else {\n    const pyDict: serialization.ConfigDict = {};\n    for (const tsKey of Object.keys(tsConfig)) {\n      const tsValue = tsConfig[tsKey];\n      const pyKey = generic_utils.toSnakeCase(tsKey);\n      if ((tsKey === 'name' || tsKey === 'className') &&\n          typeof tsValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of LayersModel and Layer instances, should not undergo the\n        // snake-case conversion.\n        pyDict[pyKey] = tsValue;\n      } else {\n        pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n      }\n    }\n    return pyDict;\n  }\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.1.0';\nexport {version};\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/engine/topology.py */\n\nimport {NamedTensorMap, Scalar, serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport {getUid} from '../backend/state';\nimport {NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {TensorKeyWithArgsArray} from '../keras_format/node_config';\nimport {PyJsonDict} from '../keras_format/types';\nimport {deserialize as deserializeLayer} from '../layers/serialization';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {convertTsToPythonic} from '../utils/serialization_utils';\nimport * as types_utils from '../utils/types_utils';\nimport {batchSetValue, LayerVariable} from '../variables';\nimport {version as layersVersion} from '../version';\n\nimport {execute, FeedDict} from './executor';\nimport {InputLayer} from './input_layer';\nimport {DisposeResult, Layer, Node, SymbolicTensor} from './topology';\n\n/** Constructor config for Container. */\nexport interface ContainerArgs {\n  inputs: SymbolicTensor|SymbolicTensor[];\n  outputs: SymbolicTensor|SymbolicTensor[];\n  name?: string;\n}\n\n/**\n * A Container is a directed acyclic graph of layers.\n *\n * It is the topological form of a \"model\". A LayersModel\n * is simply a Container with added training routines.\n *\n */\nexport abstract class Container extends Layer {\n  inputs: SymbolicTensor[];\n  outputs: SymbolicTensor[];\n\n  inputLayers: Layer[];\n  inputLayersNodeIndices: number[];\n  inputLayersTensorIndices: number[];\n\n  outputLayers: Layer[];\n  outputLayersNodeIndices: number[];\n  outputLayersTensorIndices: number[];\n\n  layers: Layer[];\n  layersByDepth: {[depth: string]: Layer[]};\n  nodesByDepth: {[depth: string]: Node[]};\n\n  internalContainerRefs: Container[];\n\n  containerNodes = new Set<string>();\n\n  // TODO(michaelterry): Add cache support\n  // private outputMaskCache: any;\n  // private outputTensorCache: any;\n  // private outputShapeCache: any;\n\n  inputNames: string[];\n  outputNames: string[];\n  feedInputShapes: Shape[];\n\n  protected internalInputShapes: Shape[];\n  protected internalOutputShapes: Shape[];\n  // TODO(cais): Maybe 'feed' should not in the names of these variables,\n  //   due to the fact that our backend is not symbolic.\n  protected feedInputNames: string[];\n  protected feedOutputNames: string[];\n\n  constructor(args: ContainerArgs) {\n    // No args passed to super's constructor.\n    super({});\n    this.name = args.name;\n    if (this.name == null) {\n      const prefix = this.getClassName().toLowerCase();\n      this.name = getUid(prefix);\n    }\n\n    this.supportsMasking = false;\n    this.trainable_ = true;\n\n    // TODO(michaelterry): Initialize perInputLosses/Updates here.\n\n    // Container-specific properties.\n    if (Array.isArray(args.inputs)) {\n      this.inputs = args.inputs.slice();\n    } else {\n      this.inputs = [args.inputs];\n    }\n    if (Array.isArray(args.outputs)) {\n      this.outputs = args.outputs.slice();\n    } else {\n      this.outputs = [args.outputs];\n    }\n\n    // Check for redundancy in inputs.\n    if (generic_utils.unique(this.inputs).length !== this.inputs.length) {\n      throw new ValueError(\n          'The list of inputs passed to the model is ' +\n          'redundant. All inputs should only appear once. Found: ' +\n          `${this.inputs.map(x => x.name)}`);\n    }\n\n    // Check for redundancy in outputs.\n    if (generic_utils.unique(this.outputs).length !== this.outputs.length) {\n      console.warn(\n          'The list of outputs passed to the model is redundant. ' +\n          'All outputs should only appear once. Found: ' +\n          `${this.outputs.map(x => x.name)}`);\n    }\n\n    /*\n      List of initial layers (1 to 1 mapping with this.inputs, hence the same\n      layer might appear twice)\n    */\n    this.inputLayers = [];\n    this.inputLayersNodeIndices = [];\n    this.inputLayersTensorIndices = [];\n    /*\n      List of layers (1 to 1 mapping with this.outputs, hence the same layer\n      might appear twice)\n    */\n    this.outputLayers = [];\n    this.outputLayersNodeIndices = [];\n    this.outputLayersTensorIndices = [];\n    /*\n      All layers in order of horizontal graph traversal. Entries are unique.\n      Includes input and output layers.\n    */\n    this.layers = [];\n\n    /*\n      References to container layers that were constructed internally. We need\n      these to properly dispose of tensors from nested containers.\n    */\n    this.internalContainerRefs = [];\n\n    // TODO(michaelterry): Determine if caching still needed with eager\n    // backend.\n    /*\n      This is for performance optimization when calling the Container on new\n      inputs. Every time the Container is called on a set on input tensors,\n      we compute the output tensors, output masks and output shapes in one pass,\n      then cache them here. When one of these outputs is queried later,\n      we retrieve it from there instead of recomputing it.\n    */\n    // this.outputTensorCache = {};\n    // this.outputShapeCache = {};\n\n    // Build this.outputLayers:\n    for (const x of this.outputs) {\n      const layer = x.sourceLayer;\n      const nodeIndex = x.nodeIndex;\n      const tensorIndex = x.tensorIndex;\n      this.outputLayers.push(layer);\n      this.outputLayersNodeIndices.push(nodeIndex);\n      this.outputLayersTensorIndices.push(tensorIndex);\n    }\n\n    // TODO(michaelterry): Add output mask cache code.\n\n    // Build this.inputLayers:\n    for (const x of this.inputs) {\n      const layer = x.sourceLayer;\n      const nodeIndex = x.nodeIndex;\n      const tensorIndex = x.tensorIndex;\n      /*\n        It's supposed to be an input layer, so only one node\n        and one tensor output.\n      */\n      generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');\n      generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');\n      this.inputLayers.push(layer);\n      this.inputLayersNodeIndices.push(nodeIndex);\n      this.inputLayersTensorIndices.push(tensorIndex);\n    }\n\n    // Build this.inputNames and this.outputNames.\n    this.inputNames = [];\n    this.outputNames = [];\n    this.feedInputShapes = [];\n    this.feedInputNames = [];\n    this.feedOutputNames = [];\n    for (let i = 0; i < this.inputLayers.length; i++) {\n      const layer = this.inputLayers[i];\n      // Check that layer is an InputLayer.\n      if (!(layer instanceof InputLayer)) {\n        throw new TypeError(\n            'Input layers to a LayersModel must be InputLayer objects. ' +\n            `Received inputs: ${args.inputs}. ` +\n            `Input ${i} (0-based) originates ` +\n            `from layer type ${layer.getClassName()}.`);\n      }\n      this.inputNames.push(layer.name);\n      this.feedInputShapes.push(layer.batchInputShape);\n\n      this.feedInputNames.push(layer.name);\n    }\n    for (const layer of this.outputLayers) {\n      this.outputNames.push(layer.name);\n    }\n\n    this.internalInputShapes = this.inputs.map(x => x.shape);\n    this.internalOutputShapes = this.outputs.map(x => x.shape);\n\n    /*\n      Container_nodes: set of nodes included in the graph (not all nodes\n      included in the layers are relevant to the current graph).\n    */\n    // ids of all nodes relevant to the Container:\n    const nodesDepths: {[nodeID: string]: number} = {};\n    // To recover nodes from their ID.\n    const nodeIDToNode: {[nodeID: string]: Node} = {};\n    const layersDepths: {[layerID: string]: number} = {};\n    // To layers from their ID.\n    const layerIDToLayer: {[layerID: string]: Layer} = {};\n    const layerIndices: {[layerID: string]: number} = {};\n    const nodesInDecreasingDepth: Node[] = [];\n\n    /**\n     * Builds a map of the graph of layers.\n     *\n     * This recursively updates the map `layerIndices`,\n     * the list `nodesInDecreasingDepth` and the set `containerNodes`.\n     *\n     * @param tensor Some tensor in a graph.\n     * @param finishedNodes Set of nodes whose subgraphs have been traversed\n     *         completely. Useful to prevent duplicated work.\n     * @param nodesInProgress Set of nodes that are currently active on the\n     *         recursion stack. Useful to detect cycles.\n     * @param layer Layer from which `tensor` comes from. If not provided,\n     *   will be obtained from tensor.sourceLayer.\n     * @param nodeIndex Node index from which `tensor` comes from.\n     * @param tensorIndex TensorIndex from which `tensor` comes from.\n     *\n     * @exception RuntimeError if a cycle is detected.\n     */\n    const buildMapOfGraph =\n        (tensor: SymbolicTensor, finishedNodes: Node[], nodesInProgress: Node[],\n         layer?: Layer, nodeIndex?: number, tensorIndex?: number) => {\n          if (layer == null || nodeIndex == null || tensorIndex == null) {\n            layer = tensor.sourceLayer;\n            nodeIndex = tensor.nodeIndex;\n            tensorIndex = tensor.tensorIndex;\n          }\n          const node = layer.inboundNodes[nodeIndex];\n\n          // Prevent cycles.\n          if (nodesInProgress.indexOf(node) !== -1) {\n            throw new RuntimeError(\n                `The tensor ${tensor.name} at layer \"${layer.name}\" ` +\n                'is part of a cycle.');\n          }\n\n          // Don't repeat work for shared subgraphs\n          if (finishedNodes.indexOf(node) !== -1) {\n            return;\n          }\n\n          // Update containerNodes.\n          this.containerNodes.add(Container.nodeKey(layer, nodeIndex));\n\n          // Store the traversal order for layer sorting.\n          if (!(layer.id in layerIndices)) {\n            layerIndices[layer.id] = Object.keys(layerIndices).length;\n          }\n\n          if (nodesInProgress.indexOf(node) === -1) {\n            nodesInProgress.push(node);\n          }\n\n          // Propagate to all previous tensors connected to this node.\n          const numInboundLayers = node.inboundLayers.length;\n          for (let i = 0; i < numInboundLayers; i++) {\n            const x = node.inputTensors[i];\n            const layer = node.inboundLayers[i];\n            const nodeIndex = node.nodeIndices[i];\n            const tensorIndex = node.tensorIndices[i];\n            buildMapOfGraph(\n                x, finishedNodes, nodesInProgress, layer, nodeIndex,\n                tensorIndex);\n          }\n          finishedNodes.push(node);\n          while (nodesInProgress.indexOf(node) >= 0) {\n            nodesInProgress.splice(nodesInProgress.indexOf(node), 1);\n          }\n          nodesInDecreasingDepth.push(node);\n        };\n\n    const finishedNodes: Node[] = [];\n    const nodesInProgress: Node[] = [];\n    for (const x of this.outputs) {\n      buildMapOfGraph(x, finishedNodes, nodesInProgress);\n    }\n\n    const reversedNodesInDecreasingDepth =\n        nodesInDecreasingDepth.slice().reverse();\n    for (const node of reversedNodesInDecreasingDepth) {\n      nodeIDToNode[node.id] = node;\n      // If the depth is not set, the node has no outbound nodes (depth 0).\n      if (!(node.id in nodesDepths)) {\n        nodesDepths[node.id] = 0;\n      }\n      let depth = nodesDepths[node.id];\n\n      // Update the depth of the corresponding layer\n      const previousDepth =\n          (layersDepths[node.outboundLayer.id] == null ?\n               0 :\n               layersDepths[node.outboundLayer.id]);\n\n      /*\n        If we've seen this layer before at a higher depth, we should use that\n        depth instead of the node depth.  This is necessary for shared layers\n        that have inputs at different depth levels in the graph.\n      */\n      depth = Math.max(depth, previousDepth);\n      layersDepths[node.outboundLayer.id] = depth;\n      layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;\n      nodesDepths[node.id] = depth;\n\n      // Update the depth of inbound nodes.\n      for (let i = 0; i < node.inboundLayers.length; i++) {\n        const inboundLayer = node.inboundLayers[i];\n        const nodeIndex = node.nodeIndices[i];\n        const inboundNode = inboundLayer.inboundNodes[nodeIndex];\n        const previousDepth =\n            (nodesDepths[inboundNode.id] == null ? 0 :\n                                                   nodesDepths[inboundNode.id]);\n        nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth);\n        nodeIDToNode[inboundNode.id] = inboundNode;\n      }\n    }\n\n    // Build a dict {depth: list of nodes with this depth}\n    const nodesByDepth: {[depth: string]: Node[]} = {};\n    for (const nodeID in nodesDepths) {\n      const depth = nodesDepths[nodeID];\n      if (!(depth in nodesByDepth)) {\n        nodesByDepth[depth] = [];\n      }\n      nodesByDepth[depth].push(nodeIDToNode[nodeID]);\n    }\n\n    // Build a dict {depth: list of layers with this depth}\n    const layersByDepth: {[depth: string]: Layer[]} = {};\n    for (const layerID in layersDepths) {\n      const depth = layersDepths[layerID];\n      if (!(depth in layersByDepth)) {\n        layersByDepth[depth] = [];\n      }\n      layersByDepth[depth].push(layerIDToLayer[layerID]);\n    }\n\n    // Get sorted list of layer depths.\n    let depthKeys = Object.keys(layersByDepth)\n                        .map(x => parseInt(x, 10))\n                        .sort(generic_utils.reverseNumberCompare);\n\n    // Set this.layers and this.layersByDepth.\n    this.layers = [];\n    for (const depth of depthKeys) {\n      const layersForDepth = layersByDepth[depth];\n      // Container.layers needs to have a deterministic order:\n      // here we order them by traversal order.\n      layersForDepth.sort((a, b) => {\n        const aIndex = layerIndices[a.id];\n        const bIndex = layerIndices[b.id];\n        if (aIndex < bIndex) {\n          return -1;\n        }\n        if (aIndex > bIndex) {\n          return 1;\n        }\n        return 0;\n      });\n      for (const layer of layersForDepth) {\n        if (layer instanceof Container) {\n          this.internalContainerRefs.push(layer);\n        }\n        this.layers.push(layer);\n      }\n    }\n    this.layersByDepth = layersByDepth;\n\n    // Get sorted list of node depths;\n    depthKeys = Object.keys(nodesByDepth)\n                    .map(x => parseInt(x, 10))\n                    .sort(generic_utils.reverseNumberCompare);\n\n    // Check that all tensors required are computable.\n    // computable_tensors: all tensors in the graph\n    // that can be computed from the inputs provided.\n    const computableTensors = this.inputs.slice();\n\n    // To provide a better error msg.\n    const layersWithCompleteInput: string[] = [];\n    for (const depth of depthKeys) {\n      for (const node of nodesByDepth[depth]) {\n        const layer = node.outboundLayer;\n        if (layer != null) {\n          for (const x of node.inputTensors) {\n            if (computableTensors.indexOf(x) === -1) {\n              throw new RuntimeError(\n                  `Graph disconnected: cannot obtain value for tensor ${x}` +\n                  ` at layer \"${layer.name}\". ` +\n                  'The following previous layers were accessed without ' +\n                  `issue: ${layersWithCompleteInput}`);\n            }\n          }\n          for (const x of node.outputTensors) {\n            computableTensors.push(x);\n          }\n          layersWithCompleteInput.push(layer.name);\n        }\n      }\n    }\n\n    // Set this.containerNodes and this.nodesByDepth.\n    this.nodesByDepth = nodesByDepth;\n\n    // Ensure name unicity, which will be crucial for serialization\n    // (since serialized nodes refer to layers by their name).\n    const allNames = this.layers.map(x => x.name);\n    for (const name of allNames) {\n      const numOccurrences = allNames.filter(x => x === name).length;\n      if (numOccurrences !== 1) {\n        throw new RuntimeError(\n            `The name \"${name}\" is used ${numOccurrences} times ` +\n            'in the model. All layer names should be unique. Layer names: ' +\n            JSON.stringify(allNames));\n      }\n    }\n\n    // Layer parameters.\n    // The new container starts with a single inbound node\n    // for its inputs, and no outbound nodes.\n    // Will be appended to by future calls to apply().\n    this.outboundNodes = [];\n    // Will be appended to below, and by future calls to apply().\n    this.inboundNodes = [];\n\n    // Create the node linking internal inputs to internal outputs.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node({\n      outboundLayer: this,\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: this.inputs,\n      outputTensors: this.outputs,\n      inputMasks: this.inputs.map(x => null),\n      outputMasks: this.outputs.map(x => null),\n      inputShapes: this.inputs.map(x => x.shape),\n      outputShapes: this.outputs.map(x => x.shape)\n    });\n    this.built = true;\n    this._refCount = 1;  // The ref count of a container always start at 1.\n  }\n\n  protected override assertNotDisposed() {\n    if (this._refCount === 0) {\n      throw new Error(`Container '${this.name}' is already disposed.`);\n    }\n  }\n\n  /**\n   * Attempt to dispose a LayersModel's weights.\n   *\n   * This method decrease the reference count of the LayersModel object by 1.\n   *\n   * A LayersModel is reference-counted. Its reference count is incremented by 1\n   * when it is first constructed and when it is used as a Layer of another\n   * LayersModel.\n   *\n   * If the reference count of a LayersModel becomes 0, the `dispose` method of\n   * all its constituent `Layer`s will be called.\n   *\n   * Note: If the reference count is greater than 0 after the decrement, the\n   * `dispose` method of its constituent `Layer`s will *not* be called.\n   *\n   * After a LayersModel is disposed, it cannot be used in calls such as\n   * 'predict`, `evaluate` or `fit` anymore.\n   *\n   * @returns A DisposeResult Object with the following fields:\n   *   - refCountAfterDispose: The reference count of the LayersModel after this\n   *     `dispose()` call.\n   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n   *     during this `dispose()` call.\n   * @throws {Error} If the layer is not built yet, or if the LayersModel has\n   *   already been disposed.\n   */\n  override dispose(): DisposeResult {\n    this.assertNotDisposed();\n    const result:\n        DisposeResult = {refCountAfterDispose: null, numDisposedVariables: 0};\n    if (--this._refCount === 0) {\n      for (const layer of this.layers) {\n        result.numDisposedVariables += layer.dispose().numDisposedVariables;\n      }\n\n      // Call dispose on each internally created container layer again to ensure\n      // their refCounts hit zero and their tensors are subsequently deleted.\n      for (const container of this.internalContainerRefs) {\n        result.numDisposedVariables += container.dispose().numDisposedVariables;\n      }\n    }\n    result.refCountAfterDispose = this._refCount;\n    return result;\n  }\n\n  override get trainable() {\n    return this.trainable_;\n  }\n\n  override set trainable(trainable: boolean) {\n    this.layers.forEach(layer => {\n      // tslint:disable-next-line:no-any\n      ((layer as any)._trainableWeights as LayerVariable[])\n          .forEach(w => w.trainable = trainable);\n    });\n    this.trainable_ = trainable;\n  }\n\n  override get trainableWeights(): LayerVariable[] {\n    // Porting Note: This check below is to prevent errors where the\n    //   _trainableWeights inherited from the parent class (Layer) gets\n    //   inadvertently used.\n    if (this._trainableWeights.length > 0) {\n      throw new ValueError(\n          'Container instance unexpectedly contains _trainableWeights.' +\n          'The trainable weights of a Container are a union of the ' +\n          'trainable weights of its consituent Layers. Its own ' +\n          '_trainableWeights must remain an empty Array.');\n    }\n\n    if (!this.trainable) {\n      return [];\n    }\n    let weights: LayerVariable[] = [];\n    for (const layer of this.layers) {\n      weights = weights.concat(layer.trainableWeights);\n    }\n    return weights;\n  }\n\n  override get nonTrainableWeights(): LayerVariable[] {\n    const weights: LayerVariable[] = [];\n    for (const layer of this.layers) {\n      weights.push(...layer.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights: LayerVariable[] = [];\n      for (const layer of this.layers) {\n        trainableWeights.push(...layer.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n\n  override get weights(): LayerVariable[] {\n    return this.trainableWeights.concat(this.nonTrainableWeights);\n  }\n\n  /**\n   * Loads all layer weights from a JSON object.\n   *\n   * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /\n   *   TypeScript. The utility script at `scripts/pykeras.py` offers means\n   *   to convert them into JSON strings compatible with this method.\n   * Porting Note: TensorFlow.js Layers supports only loading by name currently.\n   *\n   * @param weights A JSON mapping weight names to weight values as nested\n   *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight\n   *   names to `tf.Tensor` objects.\n   * @param strict Require that the provided weights exactly match those\n   *   required by the container.  Default: `true`.  Passing `false` means that\n   *   extra weights and missing weights will be silently ignored.\n   */\n  loadWeights(weights: NamedTensorMap, strict = true) {\n    const nameToWeight: {[name: string]: LayerVariable} = {};\n    let totalWeightsCount = 0;\n    for (const layer of this.layers) {\n      for (const weight of layer.weights) {\n        if (nameToWeight[weight.originalName] != null) {\n          throw new ValueError(`Duplicate weight name: ${weight.originalName}`);\n        }\n        nameToWeight[weight.originalName] = weight;\n        totalWeightsCount++;\n      }\n    }\n\n    const weightValueTuples: Array<[LayerVariable, Tensor]> = [];\n    for (const name in weights) {\n      // TF 2.2.0 added cell name to the weight name in the format of\n      // layer_name/cell_name/weight_name, we need to remove\n      // the inner cell name.\n      let validatedName = name;\n      if (nameToWeight[name] == null) {\n        const tokens = name.split('/');\n        const shortenNameArray =\n            tokens.slice(0, -2).concat([tokens[tokens.length - 1]]);\n        validatedName = shortenNameArray.join('/');\n      }\n      if (nameToWeight[validatedName] != null) {\n        weightValueTuples.push([nameToWeight[validatedName], weights[name]]);\n      } else if (strict) {\n        throw new ValueError(\n            `Provided weight data has no target variable: ${name}`);\n      }\n      delete nameToWeight[validatedName];\n    }\n\n    if (strict) {\n      // Check that all weights are set.\n      const unsetNames: string[] = [];\n      for (const name in nameToWeight) {\n        unsetNames.push(name);\n      }\n      if (unsetNames.length > 0) {\n        throw new ValueError(\n            `${unsetNames.length} of ${\n                totalWeightsCount} weights are not set: ` +\n            `${unsetNames}`);\n      }\n    }\n\n    batchSetValue(weightValueTuples);\n  }\n\n  /**\n   * Util shared between different serialization methods.\n   * @returns LayersModel config with Keras version information added.\n   */\n  protected updatedConfig(): serialization.ConfigDict {\n    const theConfig = this.getConfig();\n    const modelConfig: serialization.ConfigDict = {};\n    modelConfig['className'] = this.getClassName();\n    modelConfig['config'] = theConfig;\n    modelConfig['kerasVersion'] = `tfjs-layers ${layersVersion}`;\n    // TODO(nielsene): Replace something like K.backend() once\n    // possible.\n    modelConfig['backend'] = 'TensorFlow.js';\n    return modelConfig;\n  }\n\n  /**\n   * Returns a JSON string containing the network configuration.\n   *\n   * To load a network from a JSON save file, use\n   * models.modelFromJSON(jsonString);\n   * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras\n   * @param returnString Whether the return value should be stringified\n   *    (default: `true`).\n   * @returns a JSON string if `returnString` (default), or a JSON object if\n   *   `!returnString`.\n   */\n  // tslint:disable-next-line:no-any\n  toJSON(unused?: any, returnString = true): string|PyJsonDict {\n    const modelConfig = convertTsToPythonic(this.updatedConfig()) as PyJsonDict;\n    return returnString ? JSON.stringify(modelConfig) : modelConfig;\n  }\n\n  /**\n   * Call the model on new inputs.\n   *\n   * In this case `call` just reapplies all ops in the graph to the new inputs\n   * (e.g. build a new computational graph from the provided inputs).\n   *\n   * @param inputs A tensor or list of tensors.\n   * @param mask A mask or list of masks. A mask can be either a tensor or null\n   *   (no mask).\n   *\n   * @return A tensor if there is a single output, or a list of tensors if there\n   *   are more than one outputs.\n   */\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = generic_utils.toList(inputs);\n      const feedDict = new FeedDict();\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n      return execute(this.outputs, feedDict, kwargs) as Tensor | Tensor[];\n    });\n  }\n\n  /**\n   * Computes an output mask tensor.\n   *\n   * @param inputs Tensor or list of tensors.\n   * @param mask Tensor or list of tensors.\n   *\n   * @return null or a tensor (or list of tensors, one per output tensor of the\n   * layer).\n   */\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    return tidy(() => {\n      inputs = generic_utils.toList(inputs);\n      let masks: Tensor[];\n      if (mask == null) {\n        masks = generic_utils.pyListRepeat(null, inputs.length);\n      } else {\n        masks = generic_utils.toList(mask);\n      }\n      // TODO(michaelterry): Add support for mask caching.\n      return this.runInternalGraph(inputs, masks)[1];\n    });\n  }\n\n  /**\n   * Computes the output shape of the layer.\n   *\n   * Assumes that the layer will be built to match that input shape provided.\n   *\n   * @param inputShape A shape (tuple of integers) or a list of shape tuples\n   *   (one per output tensor of the layer). Shape tuples can include null for\n   *   free dimensions, instead of an integer.\n   */\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    const inputShapes = types_utils.normalizeShapeList(inputShape);\n    if (inputShapes.length !== this.inputLayers.length) {\n      throw new ValueError(\n          `Invalid inputShape argument ${inputShape}: ` +\n          `model has ${this.inputLayers.length} tensor inputs.`);\n    }\n\n    // TODO(michaelterry): Add caching\n    const layersToOutputShapes: {[shapeKey: string]: Shape} = {};\n    for (let i = 0; i < inputShapes.length; i++) {\n      const layer = this.inputLayers[i];\n      const inputShape = inputShapes[i];\n      // It's an input layer: computeOutputShape is identity,\n      // and there is only one node and one tensor output.\n      const shapeKey = layer.name + '_0_0';\n      layersToOutputShapes[shapeKey] = inputShape;\n    }\n\n    const depthKeys = Object.keys(this.nodesByDepth)\n                          .map(x => parseInt(x, 10))\n                          .sort(generic_utils.reverseNumberCompare);\n    // Iterate over nodes, by depth level.\n    if (depthKeys.length > 1) {\n      for (const depth of depthKeys) {\n        const nodes = this.nodesByDepth[depth];\n        for (const node of nodes) {\n          // This is always a single layer, never a list.\n          const layer = node.outboundLayer;\n          if (this.inputLayers.map(x => x.id).indexOf(layer.id) !== -1) {\n            // We've already covered the input layers a few lines above.\n            continue;\n          }\n          // Potentially redundant list, same size of node.inputTensors.\n          const inputShapes: Shape[] = [];\n          for (let j = 0; j < node.inboundLayers.length; j++) {\n            const inboundLayer = node.inboundLayers[j];\n            const nodeIndex = node.nodeIndices[j];\n            const tensorIndex = node.tensorIndices[j];\n            const shapeKey = `${inboundLayer.name}_${nodeIndex}_${tensorIndex}`;\n            const inputShape = layersToOutputShapes[shapeKey];\n            inputShapes.push(inputShape);\n          }\n\n          const outputShape = layer.computeOutputShape(\n              generic_utils.singletonOrArray(inputShapes));\n\n          const outputShapes = types_utils.normalizeShapeList(outputShape);\n          const nodeIndex = layer.inboundNodes.indexOf(node);\n          for (let j = 0; j < outputShapes.length; j++) {\n            const shapeKey = `${layer.name}_${nodeIndex}_${j}`;\n            layersToOutputShapes[shapeKey] = outputShapes[j];\n          }\n        }\n      }\n    }\n\n    // Read final output shapes from layersToOutputShapes.\n    const outputShapes: Shape[] = [];\n    const outputShapeKeys: string[] = [];\n    for (let i = 0; i < this.outputLayers.length; i++) {\n      const layer = this.outputLayers[i];\n      const nodeIndex = this.outputLayersNodeIndices[i];\n      const tensorIndex = this.outputLayersTensorIndices[i];\n      const shapeKey = `${layer.name}_${nodeIndex}_${tensorIndex}`;\n      outputShapeKeys.push(shapeKey);\n    }\n\n    for (let i = 0; i < outputShapeKeys.length; i++) {\n      const key = outputShapeKeys[i];\n      generic_utils.assert(key in layersToOutputShapes);\n      outputShapes.push(layersToOutputShapes[key]);\n    }\n\n    // TODO(michaelterry): Update cache\n    return generic_utils.singletonOrArray(outputShapes);\n  }\n\n  /**\n   * Computes output tensors for new inputs.\n   *\n   * Note:\n   *   - Expects `inputs` to be a list (potentially with 1 element).\n   *\n   * @param inputs List of tensors\n   * @param masks List of masks (tensors or null).\n   * @return Three lists: outputTensors, outputMasks, outputShapes\n   */\n  protected runInternalGraph(inputs: Tensor[], masks?: Tensor[]):\n      [Tensor[], Tensor[], Shape[]] {\n    if (masks == null) {\n      masks = generic_utils.pyListRepeat(null, inputs.length);\n    }\n\n    // Dictionary mapping reference tensors to tuples\n    // (computed tensor, compute mask)\n    // we assume a 1:1 mapping from tensor to mask\n    // TODO: raise exception when a `.computeMask()` call\n    // does not return a list the same size as `call`\n    const tensorMap: {[tensorID: string]: [Tensor, Tensor]} = {};\n    for (let i = 0; i < this.inputs.length; ++i) {\n      const x = this.inputs[i];\n      const y = inputs[i];\n      const mask = masks[i];\n      tensorMap[x.id] = [y, mask];\n    }\n\n    const depthKeys = Object.keys(this.nodesByDepth)\n                          .map(x => parseInt(x, 10))\n                          .sort(generic_utils.reverseNumberCompare);\n    for (const depth of depthKeys) {\n      const nodes = this.nodesByDepth[depth];\n      for (const node of nodes) {\n        // This is always a single layer, never a list.\n        const layer = node.outboundLayer;\n        const referenceInputTensors = node.inputTensors;\n        const referenceOutputTensors = node.outputTensors;\n\n        // If all previous input tensors are available in tensorMap,\n        // then call node.inboundLayer on them.\n        // List of tuples [input, mask]:\n        const computedData = new Array<[Tensor, Tensor]>();\n        for (const x of referenceInputTensors) {\n          if (x.id in tensorMap) {\n            computedData.push(tensorMap[x.id]);\n          }\n        }\n        if (computedData.length === referenceInputTensors.length) {\n          // TODO(michaelterry): Add K.name_scope here, if we need it.\n          let kwargs: Kwargs = {};\n          let computedTensors: Tensor[];\n          let computedMasks: Tensor[];\n          let outputTensors: Tensor[];\n          let outputMasks: Tensor[];\n          // call layer\n          if (node.callArgs != null) {\n            kwargs = node.callArgs;\n          }\n          if (computedData.length === 1) {\n            const [computedTensor, computedMask] = computedData[0];\n            if (kwargs['mask'] == null) {\n              kwargs['mask'] = computedMask;\n            }\n            outputTensors =\n                generic_utils.toList(layer.call(computedTensor, kwargs));\n            outputMasks = generic_utils.toList(\n                layer.computeMask(computedTensor, computedMask));\n            computedTensors = [computedTensor];\n            computedMasks = [computedMask];\n          } else {\n            computedTensors = computedData.map(x => x[0]);\n            computedMasks = computedData.map(x => x[1]);\n            if (kwargs['mask'] == null) {\n              kwargs['mask'] = computedMasks;\n            }\n            outputTensors =\n                generic_utils.toList(layer.call(computedTensors, kwargs));\n            outputMasks = generic_utils.toList(\n                layer.computeMask(computedTensors, computedMasks));\n          }\n\n          if (layer.activityRegularizer) {\n            throw new NotImplementedError(\n                'LayersModel invocation with concrete Tensor value(s) in the ' +\n                'presence of activity regularizer(s) is not supported yet.');\n          }\n          // TODO(michaelterry): Add model updates and losses\n\n          // Update tensor map.\n          for (let i = 0; i < referenceOutputTensors.length; ++i) {\n            const x = referenceOutputTensors[i];\n            const y = outputTensors[i];\n            const mask = outputMasks[i];\n            tensorMap[x.id] = [y, mask];\n          }\n        }\n      }\n    }\n\n    const outputTensors: Tensor[] = [];\n    const outputMasks: Tensor[] = [];\n    const outputShapes: Shape[] = [];\n    for (const x of this.outputs) {\n      generic_utils.assert(\n          x.id in tensorMap, `Could not compute output ${x.name} : ${x.id}`);\n      const [tensor, mask] = tensorMap[x.id];\n      outputShapes.push(tensor.shape);\n      outputTensors.push(tensor);\n      outputMasks.push(mask);\n    }\n\n    // TODO(michaelterry): Add support for caches.\n    return [outputTensors, outputMasks, outputShapes];\n  }\n\n  /**\n   * Builds a map of internal node keys to node ordering.\n   * Used in serializaion a node orderings may change as unused nodes are\n   * dropped. Porting Note:  This helper method was pulled out of getConfig to\n   * improve readability.\n   * @param layers An array of Layers in the model.\n   * @returns Map of Node Keys to index order within the layer.\n   */\n  private buildNodeConversionMap(layers: Layer[]): {[nodeKey: string]: number} {\n    const nodeConversionMap: {[nodeKey: string]: number} = {};\n    let keptNodes: number;\n    for (const layer of this.layers) {\n      keptNodes = layer instanceof Container ? 1 : 0;\n      for (let originalNodeIndex = 0;\n           originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n        const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n        if (this.containerNodes.has(nodeKey)) {\n          // i.e. we mark it to be saved\n          nodeConversionMap[nodeKey] = keptNodes;\n          keptNodes += 1;\n        }\n      }\n    }\n    return nodeConversionMap;\n  }\n\n  /**\n   * Retrieves a layer based on either its name (unique) or index.\n   *\n   * Indices are based on order of horizontal graph traversal (bottom-up).\n   *\n   * If both `name` and `index` are specified, `index` takes precedence.\n   *\n   * @param name Name of layer.\n   * @param index Index of layer.\n   * @returns A Layer instance.\n   * @throws ValueError: In case of invalid layer name or index.\n   *\n   * @doc {\n   *    heading: 'Layers',\n   *    subheading: 'Classes',\n   *    namespace: 'layers',\n   *    subclasses: ['LayersModel']\n   * }\n   */\n  getLayer(name?: string, index?: number): Layer {\n    if (index != null) {\n      if (this.layers.length <= index) {\n        throw new ValueError(\n            `Was asked to retrieve layer at index ${index}, but model only ` +\n            `has ${this.layers.length} layer(s).`);\n      } else {\n        return this.layers[index];\n      }\n    } else {\n      if (name == null) {\n        throw new ValueError('Provide either a layer name or layer index');\n      }\n    }\n\n    for (const layer of this.layers) {\n      if (layer.name === name) {\n        return layer;\n      }\n    }\n    throw new ValueError(`No such layer: ${name}`);\n  }\n\n  /**\n   * Retrieves the Container's current loss values.\n   *\n   * Used for regularizers during training.\n   */\n  override calculateLosses(): Scalar[] {\n    // Porting Node: This is an augmentation to Container.loss in PyKeras.\n    //   In PyKeras, Container.loss returns symbolic tensors. Here a concrete\n    //   Tensor (specifically Scalar) values are returned. This is due to the\n    //   imperative backend.\n    return tidy(() => {\n      const losses: Scalar[] = [];\n      for (const layer of this.layers) {\n        for (let nodeIndex = 0; nodeIndex < layer.inboundNodes.length;\n             ++nodeIndex) {\n          const nodeKey = Container.nodeKey(layer, nodeIndex);\n          if (this.containerNodes.has(nodeKey)) {\n            losses.push(...layer.calculateLosses());\n          }\n        }\n      }\n      // TODO(cais): Add any unconditional model-level losses?\n      return losses;\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {name: this.name};\n\n    // Build a map from layer unique name (self._node_key)\n    // to the index of the nodes that are saved in the config.\n    // Only nodes in container_nodes are saved.\n    const nodeConversionMap: {[nodeKey: string]: number} =\n        this.buildNodeConversionMap(this.layers);\n\n    // Serialize and save the layers in layerConfigs\n    const layerConfigs = [];\n    for (const layer of this.layers) {\n      const layerClassName = layer.getClassName();\n      const layerConfig = layer.getConfig();\n      const filteredInboundNodes = [];\n      for (let originalNodeIndex = 0;\n           originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n        const node = layer.inboundNodes[originalNodeIndex];\n        const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n        let kwargs = {};\n        if (this.containerNodes.has(nodeKey)) {\n          // The node is relevant to the model:\n          // add to filteredInboundNodes.\n          if (node.callArgs) {\n            try {\n              JSON.stringify(node.callArgs);\n              kwargs = node.callArgs;\n            } catch (err) {\n              console.warn(\n                  `Layer ${layer.name} was passed ` +\n                  `non-serializable keyword arguments: ` +\n                  `${node.callArgs}. They will not be included ` +\n                  `in the serialized model (and thus will be ` +\n                  `missing at deserialization time).`);\n              kwargs = {};\n            }\n          }\n          if (node.inboundLayers.length > 0) {\n            const nodeData = [];\n            for (let i = 0; i < node.inboundLayers.length; i++) {\n              const inboundLayer = node.inboundLayers[i];\n              const nodeIndex = node.nodeIndices[i];\n              const tensorIndex = node.tensorIndices[i];\n              const nodeKey = Container.nodeKey(inboundLayer, nodeIndex);\n              let newNodeIndex = nodeConversionMap[nodeKey];\n              if (newNodeIndex == null) {\n                newNodeIndex = 0;\n              }\n              nodeData.push(\n                  [inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);\n            }\n            filteredInboundNodes.push(nodeData);\n          }\n        }\n      }\n      const dict: serialization.ConfigDict = {};\n      dict['name'] = layer.name;\n      dict['className'] = layerClassName;\n      dict['config'] = layerConfig;\n      dict['inboundNodes'] = filteredInboundNodes;\n      layerConfigs.push(dict);\n    }\n    config['layers'] = layerConfigs;\n    // Gather info about inputs and outputs\n    const modelInputs = [];\n    for (let i = 0; i < this.inputLayers.length; i++) {\n      const layer = this.inputLayers[i];\n      const nodeIndex = this.inputLayersNodeIndices[i];\n\n      const nodeKey = Container.nodeKey(layer, nodeIndex);\n      if (!this.containerNodes.has(nodeKey)) {\n        continue;\n      }\n      let newNodeIndex = nodeConversionMap[nodeKey];\n      if (newNodeIndex === null || newNodeIndex === undefined) {\n        newNodeIndex = 0;\n      }\n      const tensorIndex = this.inputLayersTensorIndices[i];\n      modelInputs.push([layer.name, newNodeIndex, tensorIndex]);\n    }\n    config['inputLayers'] = modelInputs;\n\n    const modelOutputs = [];\n    for (let i = 0; i < this.outputLayers.length; i++) {\n      const layer = this.outputLayers[i];\n      const nodeIndex = this.outputLayersNodeIndices[i];\n\n      const nodeKey = Container.nodeKey(layer, nodeIndex);\n      if (!this.containerNodes.has(nodeKey)) {\n        continue;\n      }\n      let newNodeIndex = nodeConversionMap[nodeKey];\n      if (newNodeIndex === null || newNodeIndex === undefined) {\n        newNodeIndex = 0;\n      }\n      const tensorIndex = this.outputLayersTensorIndices[i];\n      modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);\n    }\n    config['outputLayers'] = modelOutputs;\n    return config;\n  }\n\n  /**\n   * Instantiates a LayersModel from its config (output of `get_config()`).\n   * @param cls the class to create\n   * @param config LayersModel config dictionary.\n   * @param customObjects An optional dictionary of custom objects.\n   * @param fastWeightInit Optional flag to use fast weight initialization\n   *   during deserialization. This is applicable to cases in which\n   *   the initialization will be immediately overwritten by loaded weight\n   *   values. Default: `false`.\n   * @returns A LayersModel instance.\n   * @throws ValueError: In case of improperly formatted config dict.\n   */\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict,\n      fastWeightInit = false): T {\n    // Layer instances created during\n    // the graph reconstruction process\n    const createdLayers: {[layerName: string]: Layer} = {};\n\n    // Dictionary mapping layer instances to\n    // node data that specifies a layer call.\n    // It acts as a queue that maintains any unprocessed\n    // layer call until it becomes possible to process it\n    // (i.e. until the input tensors to the call all exist).\n    const unprocessedNodes: {[layer: string]: TensorKeyWithArgsArray[][]} = {};\n    function addUnprocessedNode(\n        layer: Layer, nodeData: TensorKeyWithArgsArray[]) {\n      if (!(layer.name in unprocessedNodes)) {\n        unprocessedNodes[layer.name] = [nodeData];\n      } else {\n        unprocessedNodes[layer.name].push(nodeData);\n      }\n    }\n\n    function processNode(layer: Layer, nodeData: TensorKeyWithArgsArray[]) {\n      const inputTensors: SymbolicTensor[] = [];\n      let kwargs;\n      for (const inputData of nodeData) {\n        const inboundLayerName = inputData[0];\n        const inboundNodeIndex = inputData[1];\n        const inboundTensorIndex = inputData[2];\n\n        kwargs = inputData[3] == null ?\n            {} :\n            inputData[3] as serialization.ConfigDict;\n        if (!(inboundLayerName in createdLayers)) {\n          addUnprocessedNode(layer, nodeData);\n          return;\n        }\n        const inboundLayer = createdLayers[inboundLayerName];\n        if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {\n          addUnprocessedNode(layer, nodeData);\n          return;\n        }\n        const inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];\n        inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);\n      }\n      // Call layer on its inputs, thus creating the node\n      // and building the layer if needed.\n      // Note: This has Eager vs Graph Implications.\n      if (inputTensors.length > 0) {\n        layer.apply(\n            generic_utils.singletonOrArray(inputTensors),\n            kwargs);  // was ** kwargs\n      }\n    }\n\n    /**\n     * Deserialize a layer, then call it on appropriate inputs.\n     * @param layerData: layer config dict.\n     * @throws ValueError: In case of improperly formatted `layer_data`\n     * dict.\n     */\n    function processLayer(layerData: serialization.ConfigDict|null) {\n      const layerName = layerData['name'] as string;\n      // Instantiate layer.\n      const layer =\n          deserializeLayer(\n              layerData,\n              config['customObjects'] != null ?\n                  config['customObjects'] as serialization.ConfigDict :\n                  {}) as Layer;\n      layer.setFastWeightInitDuringBuild(fastWeightInit);\n      createdLayers[layerName] = layer;\n      // Gather layer inputs.\n      const inboundNodesData =\n          layerData['inboundNodes'] as TensorKeyWithArgsArray[][];\n      inboundNodesData.forEach(nodeData => {\n        if (!(nodeData instanceof Array)) {\n          throw new ValueError(\n              `Corrupted configuration, expected array for nodeData: ${\n                  nodeData}`);\n        }\n        // We don't process nodes (i.e. make layer calls)\n        // on the fly because the inbound node may not yet exist,\n        // in case of layer shared at different topological depths\n        // (e.g.a model such as A(B(A(B(x)))))\n        addUnprocessedNode(layer, nodeData);\n      });\n    }\n\n    // First, we create all layers and enqueue nodes to be processed.\n    const name = config['name'];\n    const layersFromConfig = config['layers'] as serialization.ConfigDict[];\n    for (const layerData of layersFromConfig) {\n      processLayer(layerData);\n    }\n\n    // Then we process nodes in order of layer depth.\n    // Nodes that cannot yet be processed(if the inbound node\n    // does not yet exist) are re - enqueued, and the process\n    // is repeated until all nodes are processed.\n    while (!generic_utils.isObjectEmpty(unprocessedNodes)) {\n      for (const layerData of layersFromConfig) {\n        const layer = createdLayers[layerData['name'] as string];\n        if (layer.name in unprocessedNodes) {\n          const currentUnprocessedNodesForLayer = unprocessedNodes[layer.name];\n          delete unprocessedNodes[layer.name];\n          for (const nodeData of currentUnprocessedNodesForLayer) {\n            processNode(layer, nodeData);\n          }\n        }\n      }\n    }\n\n    const inputTensors: SymbolicTensor[] = [];\n    const outputTensors: SymbolicTensor[] = [];\n    const inputLayersFromConfig =\n        config['inputLayers'] as serialization.ConfigDict[];\n    for (const layerData of inputLayersFromConfig) {\n      const layerName = layerData[0] as string;\n      const nodeIndex = layerData[1] as number;\n      const tensorIndex = layerData[2] as number;\n      generic_utils.assert(layerName in createdLayers);\n      const layer = createdLayers[layerName];\n      const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n      inputTensors.push(layerOutputTensors[tensorIndex]);\n    }\n    const outputLayersFromConfig =\n        config['outputLayers'] as serialization.ConfigDict[];\n    for (const layerData of outputLayersFromConfig) {\n      const layerName = layerData[0] as string;\n      const nodeIndex = layerData[1] as number;\n      const tensorIndex = layerData[2] as number;\n      generic_utils.assert(layerName in createdLayers);\n      const layer = createdLayers[layerName];\n      const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n      outputTensors.push(layerOutputTensors[tensorIndex]);\n    }\n    return new cls({inputs: inputTensors, outputs: outputTensors, name});\n  }\n\n  /**\n   * Determine whether the container is stateful.\n   *\n   * Porting Note: this is the equivalent of the stateful @property of\n   *   the Container class in PyKeras.\n   */\n  override get stateful(): boolean {\n    // Porting Note: This check is to prevent inadvertent setting of the\n    //   _stateful property of the Container instance.\n    if (this._stateful) {\n      throw new ValueError(\n          'Container instance unexpectedly has _stateful = true. The ' +\n          'statefulness of a Container is determined by the Layers it ' +\n          'contains. Its _stateful property must remain the default false.');\n    }\n    for (const layer of this.layers) {\n      if (layer.stateful) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Reset the state of all stateful constituent layers (if any).\n   *\n   * Examples of stateful layers include RNN layers whose `stateful` property\n   * is set as `true`.\n   */\n  override resetStates() {\n    tidy(() => {\n      this.layers.forEach(layer => {\n        // tslint:disable:no-any\n        if (layer.stateful) {\n          layer.resetStates();\n        }\n        // tslint:enable:no-any\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {argMax, clone, dispose, mul, reshape, Tensor, Tensor1D, tensor1d, tidy} from '@tensorflow/tfjs-core';\n\n/**\n * For multi-class classification problems, this object is designed to store a\n * mapping from class index to the \"weight\" of the class, where higher weighted\n * classes have larger impact on loss, accuracy, and other metrics.\n *\n * This is useful for cases in which you want the model to \"pay more attention\"\n * to examples from an under-represented class, e.g., in unbalanced datasets.\n */\nexport type ClassWeight = {\n  [classIndex: number]: number\n};\n\n/**\n * Class weighting for a model with multiple outputs.\n *\n * This object maps each output name to a class-weighting object.\n */\nexport type ClassWeightMap = {\n  [outputName: string]: ClassWeight\n};\n\nfunction standardizeSampleOrClassWeights(\n    xWeight: ClassWeight|ClassWeight[]|ClassWeightMap, outputNames: string[],\n    weightType: 'sampleWeight'|'classWeight'): ClassWeight[] {\n  const numOutputs = outputNames.length;\n  if (xWeight == null || (Array.isArray(xWeight) && xWeight.length === 0)) {\n    return outputNames.map(name => null);\n  }\n  if (numOutputs === 1) {\n    if (Array.isArray(xWeight) && xWeight.length === 1) {\n      return xWeight;\n    } else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n      return [(xWeight as ClassWeightMap)[outputNames[0]]];\n    } else {\n      return [xWeight as ClassWeight];\n    }\n  }\n  if (Array.isArray(xWeight)) {\n    if (xWeight.length !== numOutputs) {\n      throw new Error(\n          `Provided ${weightType} is an array of ${xWeight.length} ` +\n          `element(s), but the model has ${numOutputs} outputs. ` +\n          `Make sure a set of weights is provided for each model output.`);\n    }\n    return xWeight;\n  } else if (\n      typeof xWeight === 'object' && Object.keys(xWeight).length > 0 &&\n      typeof (xWeight as ClassWeightMap)[Object.keys(xWeight)[0]] ===\n          'object') {\n    const output: ClassWeight[] = [];\n    outputNames.forEach(outputName => {\n      if (outputName in xWeight) {\n        output.push((xWeight as ClassWeightMap)[outputName]);\n      } else {\n        output.push(null);\n      }\n    });\n    return output;\n  } else {\n    throw new Error(\n        `The model has multiple (${numOutputs}) outputs, ` +\n        `so ${weightType} must be either an array with ` +\n        `${numOutputs} elements or an object with ${outputNames} keys. ` +\n        `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n  }\n}\n\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nexport function standardizeClassWeights(\n    classWeight: ClassWeight|ClassWeight[]|ClassWeightMap,\n    outputNames: string[]): ClassWeight[] {\n  return standardizeSampleOrClassWeights(\n      classWeight, outputNames, 'classWeight');\n}\n\nexport function standardizeSampleWeights(\n    classWeight: ClassWeight|ClassWeight[]|ClassWeightMap,\n    outputNames: string[]): ClassWeight[] {\n  return standardizeSampleOrClassWeights(\n      classWeight, outputNames, 'sampleWeight');\n}\n\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nexport async function standardizeWeights(\n    y: Tensor, sampleWeight?: Tensor, classWeight?: ClassWeight,\n    sampleWeightMode?: 'temporal'): Promise<Tensor> {\n  if (sampleWeight != null || sampleWeightMode != null) {\n    // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n    // string.\n    throw new Error('Support sampleWeight is not implemented yet');\n  }\n\n  if (classWeight != null) {\n    // Apply class weights per sample.\n    const yClasses: Tensor1D = tidy(() => {\n      if (y.shape.length === 1) {\n        // Assume class indices.\n        return clone(y) as Tensor1D;\n      } else if (y.shape.length === 2) {\n        if (y.shape[1] > 1) {\n          // Assume one-hot encoding of classes.\n          const axis = 1;\n          return argMax(y, axis);\n        } else if (y.shape[1] === 1) {\n          // Class index.\n          return reshape(y, [y.shape[0]]);\n        } else {\n          throw new Error(\n              `Encountered unexpected last-dimension size (${y.shape[1]}) ` +\n              `during handling of class weights. The size is expected to be ` +\n              `>= 1.`);\n        }\n      } else {\n        throw new Error(\n            `Unexpected rank of target (y) tensor (${y.rank}) during ` +\n            `handling of class weights. The rank is expected to be 1 or 2.`);\n      }\n    });\n\n    const yClassIndices = Array.from(await yClasses.data());\n    dispose(yClasses);\n    const classSampleWeight: number[] = [];\n    yClassIndices.forEach(classIndex => {\n      if (classWeight[classIndex] == null) {\n        throw new Error(\n            `classWeight must contain all classes in the training data. ` +\n            `The class ${classIndex} exists in the data but not in ` +\n            `classWeight`);\n      } else {\n        classSampleWeight.push(classWeight[classIndex]);\n      }\n    });\n\n    return tensor1d(classSampleWeight, 'float32');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nexport function computeWeightedLoss(losses: Tensor, sampleWeights: Tensor) {\n  return mul(losses, sampleWeights);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Interfaces and methods for training models using TensorFlow.js datasets.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\nimport {BaseCallback, configureCallbacks, CustomCallbackArgs, History, ModelLoggingVerbosity, standardizeCallbacks, YieldEveryOptions} from '../base_callbacks';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {disposeTensorsInLogs, UnresolvedLogs} from '../logs';\nimport {TensorOrArrayOrMap} from '../types';\nimport {singletonOrArray, toList} from '../utils/generic_utils';\n\nimport {Dataset, LazyIterator} from './dataset_stub';\nimport {ClassWeight, ClassWeightMap, standardizeClassWeights, standardizeWeights} from './training_utils';\n\n/**\n * Interface for configuring model training based on a dataset object.\n */\nexport interface ModelFitDatasetArgs<T> {\n  /**\n   * (Optional) Total number of steps (batches of samples) before\n   * declaring one epoch finished and starting the next epoch. It should\n   * typically be equal to the number of samples of your dataset divided by\n   * the batch size, so that `fitDataset`() call can utilize the entire dataset.\n   * If it is not provided, use `done` return value in `iterator.next()` as\n   * signal to finish an epoch.\n   */\n  batchesPerEpoch?: number;\n\n  /**\n   * Integer number of times to iterate over the training dataset.\n   */\n  epochs: number;\n\n  /**\n   * Verbosity level.\n   *\n   * Expected to be 0, 1, or 2. Default: 1.\n   *\n   * 0 - No printed message during fit() call.\n   * 1 - In Node.js (tfjs-node), prints the progress bar, together with\n   *     real-time updates of loss and metric values and training speed.\n   *     In the browser: no action. This is the default.\n   * 2 - Not implemented yet.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * List of callbacks to be called during training.\n   * Can have one or more of the following callbacks:\n   *   - `onTrainBegin(logs)`: called when training starts.\n   *   - `onTrainEnd(logs)`: called when training ends.\n   *   - `onEpochBegin(epoch, logs)`: called at the start of every epoch.\n   *   - `onEpochEnd(epoch, logs)`: called at the end of every epoch.\n   *   - `onBatchBegin(batch, logs)`: called at the start of every batch.\n   *   - `onBatchEnd(batch, logs)`: called at the end of every batch.\n   *   - `onYield(epoch, batch, logs)`: called every `yieldEvery` milliseconds\n   *      with the current epoch, batch and logs. The logs are the same\n   *      as in `onBatchEnd()`. Note that `onYield` can skip batches or\n   *      epochs. See also docs for `yieldEvery` below.\n   */\n  callbacks?: BaseCallback[]|CustomCallbackArgs|CustomCallbackArgs[];\n\n  /**\n   * Data on which to evaluate the loss and any model\n   * metrics at the end of each epoch. The model will not be trained on this\n   * data. This could be any of the following:\n   *\n   *   - An array `[xVal, yVal]`, where the two values may be `tf.Tensor`,\n   *     an array of Tensors, or a map of string to Tensor.\n   *   - Similarly, an array ` [xVal, yVal, valSampleWeights]`\n   *     (not implemented yet).\n   *   - a `Dataset` object with elements of the form `{xs: xVal, ys: yVal}`,\n   *     where `xs` and `ys` are the feature and label tensors, respectively.\n   *\n   * If `validationData` is an Array of Tensor objects, each `tf.Tensor` will be\n   * sliced into batches during validation, using the parameter\n   * `validationBatchSize` (which defaults to 32). The entirety of the\n   * `tf.Tensor` objects will be used in the validation.\n   *\n   * If `validationData` is a dataset object, and the `validationBatches`\n   * parameter is specified, the validation will use `validationBatches` batches\n   * drawn from the dataset object. If `validationBatches` parameter is not\n   * specified, the validation will stop when the dataset is exhausted.\n   *\n   * The model will not be trained on this data.\n   */\n  validationData?: [\n    TensorOrArrayOrMap, TensorOrArrayOrMap\n  ]|[TensorOrArrayOrMap, TensorOrArrayOrMap, TensorOrArrayOrMap]|Dataset<T>;\n\n  /**\n   * Optional batch size for validation.\n   *\n   * Used only if `validationData` is an array of `tf.Tensor` objects, i.e., not\n   * a dataset object.\n   *\n   * If not specified, its value defaults to 32.\n   */\n  validationBatchSize?: number;\n\n  /**\n   * (Optional) Only relevant if `validationData` is specified and is a dataset\n   * object.\n   *\n   * Total number of batches of samples to draw from `validationData` for\n   * validation purpose before stopping at the end of every epoch. If not\n   * specified, `evaluateDataset` will use `iterator.next().done` as signal to\n   * stop validation.\n   */\n  validationBatches?: number;\n\n  /**\n   * Configures the frequency of yielding the main thread to other tasks.\n   *\n   * In the browser environment, yielding the main thread can improve the\n   * responsiveness of the page during training. In the Node.js environment,\n   * it can ensure tasks queued in the event loop can be handled in a timely\n   * manner.\n   *\n   * The value can be one of the following:\n   *   - `'auto'`: The yielding happens at a certain frame rate (currently set\n   *               at 125ms). This is the default.\n   *   - `'batch'`: yield every batch.\n   *   - `'epoch'`: yield every epoch.\n   *   - a `number`: Will yield every `number` milliseconds.\n   *   - `'never'`: never yield. (But yielding can still happen through `await\n   *      nextFrame()` calls in custom callbacks.)\n   */\n  yieldEvery?: YieldEveryOptions;\n\n  /**\n   * Epoch at which to start training (useful for resuming a previous training\n   * run). When this is used, `epochs` is the index of the \"final epoch\".\n   * The model is not trained for a number of iterations given by `epochs`,\n   * but merely until the epoch of index `epochs` is reached.\n   */\n  initialEpoch?: number;\n\n  /**\n   * Optional object mapping class indices (integers) to\n   * a weight (float) to apply to the model's loss for the samples from this\n   * class during training. This can be useful to tell the model to \"pay more\n   * attention\" to samples from an under-represented class.\n   *\n   * If the model has multiple outputs, a class weight can be specified for\n   * each of the outputs by setting this field an array of weight object\n   * or an object that maps model output names (e.g., `model.outputNames[0]`)\n   * to weight objects.\n   */\n  classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap;\n}\n\nexport interface FitDatasetElement {\n  xs: TensorOrArrayOrMap;\n  ys: TensorOrArrayOrMap;\n}\n\n/**\n * Interface for configuring model evaluation based on a dataset object.\n */\nexport interface ModelEvaluateDatasetArgs {\n  /**\n   * Number of batches to draw from the dataset object before ending the\n   * evaluation.\n   */\n  batches?: number;\n\n  /**\n   * Verbosity mode.\n   */\n  verbose?: ModelLoggingVerbosity;\n}\n\n// Default batch size used during tensor-based validation.\nconst DEFAULT_VALIDATION_BATCH_SIZE = 32;\n\n/**\n * Standardize the output of a dataset iterator for use by\n * LayersModel.fitDataset().\n *\n * @param model: A `tf.LayersModel` object.\n * @param iteratorOut The output of a dataset iterator. It is required to be\n *   an object of the form `{xs: TensorOrArrayOrMap, ys:\n * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,\n * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.\n * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s\n *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided\n *   as a map, the order in the resulting array is taken from the `inputNames`\n *   and `outputNames` of the model.\n */\nfunction standardizeDataIteratorOutput(\n    // Type `model` as `any` here to avoid circular dependency w/\n    // training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, iteratorOut: {}): {xs: tfc.Tensor[], ys: tfc.Tensor[]} {\n  let xs: TensorOrArrayOrMap;\n  let ys: TensorOrArrayOrMap;\n\n  const iteratorOutObj = iteratorOut as FitDatasetElement;\n  xs = iteratorOutObj['xs'];\n  ys = iteratorOutObj['ys'];\n  tfc.util.assert(\n      xs != null && ys != null,\n      () => 'A Dataset iterator for fitDataset() is expected to generate ' +\n          'objects of the form `{xs: xVal, ys: yVal}`, where the two ' +\n          'values may be `tf.Tensor`, an array of Tensors, or a map of ' +\n          'string to Tensor.  The provided Dataset instead generates ' +\n          `${iteratorOut}`);\n\n  const flattenedXs: tfc.Tensor[] =\n      flattenTensorOrArrayOrMap('input', model.inputNames, xs);\n  const flattenedYs: tfc.Tensor[] =\n      flattenTensorOrArrayOrMap('output', model.outputNames, ys);\n\n  const batchSize: number = flattenedXs[0].shape[0];\n\n  tfc.util.assert(\n      flattenedXs.length === model.inputs.length,\n      () => `LayersModel has ${model.inputs.length} inputs, but the dataset ` +\n          `provides ${flattenedXs.length} inputs.  (Expected input keys: ` +\n          `${JSON.stringify(model.inputNames)})`);\n\n  tfc.util.assert(\n      flattenedYs.length === model.outputs.length,\n      () =>\n          `LayersModel has ${model.outputs.length} outputs, but the dataset ` +\n          `provides ${flattenedYs.length} outputs.  (Expected output keys: ` +\n          `${JSON.stringify(model.outputNames)})`);\n\n  for (let xIndex = 0; xIndex < flattenedXs.length; xIndex++) {\n    tfc.util.assert(\n        flattenedXs[xIndex].shape[0] === batchSize,\n        () => `Batch size mismatch: input ` +\n            `${model.inputNames[xIndex]} has ${\n                  flattenedXs[xIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n  }\n\n  for (let yIndex = 0; yIndex < flattenedYs.length; yIndex++) {\n    tfc.util.assert(\n        flattenedYs[yIndex].shape[0] === batchSize,\n        () => `Batch size mismatch: output ` +\n            `${model.outputNames[yIndex]} has ${\n                  flattenedYs[yIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n  }\n\n  return {xs: flattenedXs, ys: flattenedYs};\n}\n\nfunction flattenTensorOrArrayOrMap(\n    inputOrOutput: string, names: string[], values: TensorOrArrayOrMap) {\n  if (values instanceof tfc.Tensor) {\n    return [values];\n  } else if (Array.isArray(values)) {\n    tfc.util.assert(\n        values.length === names.length,\n        () => `Received an array of ${values.length} Tensors, but expected ${\n            names.length} to match the ${inputOrOutput} keys ${names}.`);\n    return values;\n  } else {\n    const result: tfc.Tensor[] = [];\n    // Check that all the required keys are available.\n    for (const name of names) {\n      if (values[name] == null) {\n        throw new ValueError(\n            `The feature data generated by the dataset lacks the required ` +\n            `${inputOrOutput} key '${name}'.`);\n      }\n      result.push(values[name]);\n    }\n    return result;\n  }\n}\n\nfunction standardizeTensorValidationData<T>(\n    data:\n        [\n          tfc.Tensor|tfc.Tensor[], tfc.Tensor|tfc.Tensor[]\n        ]|[tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[],\n           tfc.Tensor | tfc.Tensor[]]):\n    {xs: tfc.Tensor|tfc.Tensor[], ys: tfc.Tensor|tfc.Tensor[]} {\n  if (data.length === 3) {\n    throw new NotImplementedError(\n        'Validation with sample weights is not implemented yet.');\n  }\n  return {xs: data[0], ys: data[1]};\n}\n\nexport async function fitDataset<T>(\n    // Type `model` as `any` here to avoid circular dependency w/\n    // training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, dataset: Dataset<T>,\n    args: ModelFitDatasetArgs<T>): Promise<History> {\n  const hasBatchesPerEpoch = args.batchesPerEpoch != null;\n  tfc.util.assert(\n      model.optimizer != null,\n      () => 'You must compile a model before training/testing. Use ' +\n          'LayersModel.compile(modelCompileConfig).');\n\n  tfc.util.assert(\n      args != null,\n      () => `For fitDataset(), the 2nd argument (config) is required, ` +\n          `but it is not provided in this call.`);\n  tfc.util.assert(\n      args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs),\n      () => `For fitDataset(), config.epochs is expected to be a positive ` +\n          `integer, but got ${args.epochs}`);\n  tfc.util.assert(\n      !hasBatchesPerEpoch ||\n          (args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch)),\n      () => `For fitDataset(), config.batchesPerEpoch is expected to be a ` +\n          `positive integer if specified, but got ${args.batchesPerEpoch}`);\n  tfc.util.assert(\n      // tslint:disable-next-line:no-any\n      (args as any)['validationSplit'] == null,\n      () => '`validationSplit` is not supported by `fitDataset()`. ' +\n          'Use validationData instead.');\n\n  if (model.isTraining) {\n    throw new Error(\n        'Cannot start training because another fit() call is ongoing.');\n  }\n  model.isTraining = true;\n\n  try {\n    const doValidation = args.validationData != null;\n    let valXs: tfc.Tensor|tfc.Tensor[];\n    let valYs: tfc.Tensor|tfc.Tensor[];\n    if (doValidation) {\n      if (isDatasetObject(args.validationData)) {\n        tfc.util.assert(\n            args.validationBatches == null ||\n                (args.validationBatches > 0 &&\n                 Number.isInteger(args.validationBatches)),\n            () => `For fitDataset() with dataset-based validation, ` +\n                `config.validationBatches is expected not to be provided, ` +\n                `or to be a positive integer, ` +\n                `but got ${args.validationBatches}`);\n      } else {\n        const validationData = standardizeTensorValidationData(\n            args.validationData as\n                    [tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[]] |\n            [\n              tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[],\n              tfc.Tensor | tfc.Tensor[]\n            ]);\n        valXs = validationData.xs;\n        valYs = validationData.ys;\n      }\n    }\n\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames() as string[];\n\n    let callbackMetrics: string[];\n    if (doValidation) {\n      callbackMetrics =\n          outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      callbackMetrics = outLabels.slice();\n    }\n\n    const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const verbose = args.verbose == null ? 1 : args.verbose;\n    const {callbackList, history} = configureCallbacks(\n        callbacks, verbose, args.epochs, null, null,\n        getStepsPerEpoch(dataset, args),\n        null,  // Batch size determined by the dataset itself.\n        doValidation, callbackMetrics);\n    callbackList.setModel(model);\n    model.history = history;\n\n    await callbackList.onTrainBegin();\n    model.stopTraining_ = false;\n    let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;\n\n    let dataIterator = await dataset.iterator();\n    while (epoch < args.epochs) {\n      const epochLogs: UnresolvedLogs = {};\n      await callbackList.onEpochBegin(epoch);\n      let stepsDone = 0;\n      let batchIndex = 0;\n      if (!hasBatchesPerEpoch) {\n        dataIterator = await dataset.iterator();\n      }\n      while (hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true) {\n        const iteratorOut = await dataIterator.next();\n\n        // If `batchesPerEpoch` is specified, the dataset should not be\n        // exhausted until all epoches are done.\n        if (hasBatchesPerEpoch && iteratorOut.done) {\n          console.warn(\n              'You provided `batchesPerEpoch` as ' +\n              `${args.batchesPerEpoch}, ` +\n              'but your dataset iterator ran out of data after ' +\n              `${stepsDone} batches; ` +\n              'interrupting training. Make sure that your ' +\n              'dataset can generate at least `batchesPerEpoch * epochs` ' +\n              'batches (in this case, ' +\n              `${args.batchesPerEpoch * args.epochs} batches). ` +\n              'You may need to use the repeat() function when building ' +\n              'your dataset.');\n          break;\n        }\n\n        if (iteratorOut.value != null) {\n          const {xs, ys} =\n              standardizeDataIteratorOutput(model, iteratorOut.value);\n          const batchLogs: UnresolvedLogs = {};\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = xs[0].shape[0];\n\n          await callbackList.onBatchBegin(batchIndex, batchLogs);\n\n          const sampleWeights: tfc.Tensor[] = [];\n          if (args.classWeight != null) {\n            const standardClassWeights =\n                standardizeClassWeights(args.classWeight, model.outputNames);\n            for (let i = 0; i < standardClassWeights.length; ++i) {\n              sampleWeights.push(await standardizeWeights(\n                  ys[i], null, standardClassWeights[i]));\n            }\n          }\n\n          // Train on batch.\n          const ins = xs.concat(ys).concat(sampleWeights);\n          const outs = trainFunction(ins);\n          tfc.dispose(ins);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out);\n          }\n\n          await callbackList.onBatchEnd(batchIndex, batchLogs);\n          disposeTensorsInLogs(batchLogs);\n\n          batchIndex++;\n          stepsDone++;\n        }\n\n        if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch :\n                                 iteratorOut.done) {\n          // Epoch finished. Perform validation.\n          if (doValidation) {\n            let valOuts: tfc.Scalar[];\n            if (isDatasetObject(args.validationData)) {\n              valOuts = toList(await model.evaluateDataset(\n                  args.validationData, {batches: args.validationBatches}));\n            } else {\n              valOuts = toList(model.evaluate(valXs, valYs, {\n                batchSize: args.validationBatchSize == null ?\n                    DEFAULT_VALIDATION_BATCH_SIZE :\n                    args.validationBatchSize,\n                verbose: 0\n              }));\n            }\n            for (let i = 0; i < model.metricsNames.length; ++i) {\n              epochLogs[`val_${model.metricsNames[i]}`] = valOuts[i];\n            }\n          }\n          // Call `break` to exit one epoch lopp after validation is done. If\n          // config.batchesPerEpoch is specified, an epoch while loop will\n          // stop when `stepsDone >= config.batchesPerEpoch`. When\n          // config.batchesPerEpoch is not provided, the following `break` is\n          // required to exit the while lopp after dataset is exhausted.\n          break;\n        }\n\n        if (model.stopTraining_) {\n          break;\n        }\n      }\n      await callbackList.onEpochEnd(epoch, epochLogs);\n      epoch++;\n      if (model.stopTraining_) {\n        break;\n      }\n    }\n    await callbackList.onTrainEnd();\n    await model.history.syncData();\n    return model.history;\n  } finally {\n    model.isTraining = false;\n  }\n}\n\n/** Helper function that determines number of steps (batches) per epoch. */\nfunction getStepsPerEpoch<T>(\n    dataset: Dataset<T>, args: ModelFitDatasetArgs<T>): number {\n  // Attempt to determine # of batches in an epoch.\n  let stepsPerEpoch: number = null;\n  if (args.batchesPerEpoch != null) {\n    stepsPerEpoch = args.batchesPerEpoch;\n  } else if (Number.isFinite(dataset.size)) {\n    stepsPerEpoch = dataset.size;\n  }\n  return stepsPerEpoch;\n}\n\n// Check if provided object is a Dataset object by checking its .iterator\n// element.\nfunction isDatasetObject<T>(\n    dataset:\n        [\n          TensorOrArrayOrMap, TensorOrArrayOrMap\n        ]|[TensorOrArrayOrMap, TensorOrArrayOrMap, TensorOrArrayOrMap]|\n    Dataset<T>): boolean {\n  return (typeof (dataset as Dataset<T>).iterator === 'function');\n}\n\n// Check if provided object is a LazyIterator object by checking it's .next\n// element.\nfunction isLazyIteratorObject<T>(iterator: Dataset<T>|\n                                 LazyIterator<T>): boolean {\n  return (typeof (iterator as LazyIterator<T>).next === 'function');\n}\n\nexport async function evaluateDataset<T>(\n    // Type `model` as `any` here to avoid circular dependency w/\n    // training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, dataset: Dataset<T>|LazyIterator<T>,\n    args: ModelEvaluateDatasetArgs): Promise<tfc.Scalar|tfc.Scalar[]> {\n  args = args || {};\n  const hasBatches = args.batches != null;\n  const f = model.testFunction;\n  let outs: tfc.Scalar[] = [];\n  if (args.verbose > 0) {\n    throw new NotImplementedError('Verbose mode is not implemented yet.');\n  }\n\n  tfc.util.assert(\n      !hasBatches || (args.batches > 0 && Number.isInteger(args.batches)),\n      () => 'Test loop expects `batches` to be a positive integer, but ' +\n          `received ${JSON.stringify(args.batches)}`);\n  const dataIterator = isLazyIteratorObject(dataset) ?\n      dataset as LazyIterator<T>:\n      await (dataset as Dataset<T>).iterator();\n  // Keeps track of number of examples used in this evaluation.\n  let numExamples = 0;\n  let batch = 0;\n\n  while (hasBatches ? batch < args.batches : true) {\n    const iteratorOut = await dataIterator.next();\n    outs = tfc.tidy(() => {\n      if (iteratorOut.value) {\n        // TODO(cais): Once real dataset is available, use\n        //   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.\n        const {xs, ys} =\n            standardizeDataIteratorOutput(model, iteratorOut.value);\n        const xsAndYs = xs.concat(ys);\n        const batchOuts = tfc.tidy(() => f(xsAndYs));\n        tfc.dispose(xsAndYs);\n\n        if (batch === 0) {\n          for (let i = 0; i < batchOuts.length; ++i) {\n            outs.push(scalar(0));\n          }\n        }\n\n        const batchSize = xsAndYs[0].shape[0];\n        for (let i = 0; i < batchOuts.length; ++i) {\n          const batchOut = batchOuts[i];\n          const oldScalar = outs[i];\n          outs[i] =\n              tfc.tidy(() => tfc.add(outs[i], tfc.mul(batchSize, batchOut)));\n          if (batch > 0) {\n            tfc.dispose(oldScalar);\n          }\n        }\n        tfc.dispose(batchOuts);\n        numExamples += batchSize;\n\n        ++batch;\n      }\n      return outs;\n    });\n\n    if (iteratorOut.done) {\n      if (hasBatches) {\n        console.warn(\n            'Your dataset iterator ran out of data during evaluateDataset(). ' +\n            'Interrupting evalution. Make sure that your ' +\n            'dataset can generate at least `batches` ' +\n            `batches (in this case, ${args.batches} batches). ` +\n            'You may need to use the repeat() function when building ' +\n            'your dataset.');\n      }\n      break;\n    }\n  }\n\n  for (let i = 0; i < outs.length; ++i) {\n    const oldScalar = outs[i];\n    outs[i] = tfc.div(outs[i], numExamples);\n    tfc.dispose(oldScalar);\n  }\n\n  return singletonOrArray(outs);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Interfaces and methods for training models using tf.Tensor objects.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, Tensor1D} from '@tensorflow/tfjs-core';\nimport {expandDims, gather, sliceAlongFirstAxis} from '../backend/tfjs_backend';\nimport {BaseCallback, CustomCallbackArgs, ModelLoggingVerbosity, YieldEveryOptions} from '../base_callbacks';\nimport {ClassWeight, ClassWeightMap} from './training_utils';\n\n/**\n * Interface configuration model training based on data as `tf.Tensor`s.\n */\nexport interface ModelFitArgs {\n  /**\n   * Number of samples per gradient update. If unspecified, it\n   * will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Integer number of times to iterate over the training data arrays.\n   */\n  epochs?: number;\n\n  /**\n   * Verbosity level.\n   *\n   * Expected to be 0, 1, or 2. Default: 1.\n   *\n   * 0 - No printed message during fit() call.\n   * 1 - In Node.js (tfjs-node), prints the progress bar, together with\n   *     real-time updates of loss and metric values and training speed.\n   *     In the browser: no action. This is the default.\n   * 2 - Not implemented yet.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * List of callbacks to be called during training.\n   * Can have one or more of the following callbacks:\n   *   - `onTrainBegin(logs)`: called when training starts.\n   *   - `onTrainEnd(logs)`: called when training ends.\n   *   - `onEpochBegin(epoch, logs)`: called at the start of every epoch.\n   *   - `onEpochEnd(epoch, logs)`: called at the end of every epoch.\n   *   - `onBatchBegin(batch, logs)`: called at the start of every batch.\n   *   - `onBatchEnd(batch, logs)`: called at the end of every batch.\n   *   - `onYield(epoch, batch, logs)`: called every `yieldEvery` milliseconds\n   *      with the current epoch, batch and logs. The logs are the same\n   *      as in `onBatchEnd()`. Note that `onYield` can skip batches or\n   *      epochs. See also docs for `yieldEvery` below.\n   */\n  callbacks?: BaseCallback[]|CustomCallbackArgs|CustomCallbackArgs[];\n\n  /**\n   * Float between 0 and 1: fraction of the training data\n   * to be used as validation data. The model will set apart this fraction of\n   * the training data, will not train on it, and will evaluate the loss and\n   * any model metrics on this data at the end of each epoch.\n   * The validation data is selected from the last samples in the `x` and `y`\n   * data provided, before shuffling.\n   */\n  validationSplit?: number;\n\n  /**\n   * Data on which to evaluate the loss and any model\n   * metrics at the end of each epoch. The model will not be trained on this\n   * data. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\n   * valSampleWeights]. The model will not be trained on this data.\n   * `validationData` will override `validationSplit`.\n   */\n  validationData?: [\n    Tensor|Tensor[], Tensor|Tensor[]\n  ]|[Tensor | Tensor[], Tensor|Tensor[], Tensor|Tensor[]];\n\n  /**\n   * Whether to shuffle the training data before each epoch. Has\n   * no effect when `stepsPerEpoch` is not `null`.\n   */\n  shuffle?: boolean;\n\n  /**\n   * Optional object mapping class indices (integers) to\n   * a weight (float) to apply to the model's loss for the samples from this\n   * class during training. This can be useful to tell the model to \"pay more\n   * attention\" to samples from an under-represented class.\n   *\n   * If the model has multiple outputs, a class weight can be specified for\n   * each of the outputs by setting this field an array of weight object\n   * or an object that maps model output names (e.g., `model.outputNames[0]`)\n   * to weight objects.\n   */\n  classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap;\n\n  /**\n   * Optional array of the same length as x, containing\n   * weights to apply to the model's loss for each sample. In the case of\n   * temporal data, you can pass a 2D array with shape (samples,\n   * sequenceLength), to apply a different weight to every timestep of every\n   * sample. In this case you should make sure to specify\n   * sampleWeightMode=\"temporal\" in compile().\n   */\n  sampleWeight?: Tensor;\n\n  /**\n   * Epoch at which to start training (useful for resuming a previous training\n   * run). When this is used, `epochs` is the index of the \"final epoch\".\n   * The model is not trained for a number of iterations given by `epochs`,\n   * but merely until the epoch of index `epochs` is reached.\n   */\n  initialEpoch?: number;\n\n  /**\n   * Total number of steps (batches of samples) before\n   * declaring one epoch finished and starting the next epoch. When training\n   * with Input Tensors such as TensorFlow data tensors, the default `null` is\n   * equal to the number of unique samples in your dataset divided by the\n   * batch size, or 1 if that cannot be determined.\n   */\n  stepsPerEpoch?: number;\n\n  /**\n   * Only relevant if `stepsPerEpoch` is specified. Total number of steps\n   * (batches of samples) to validate before stopping.\n   */\n  validationSteps?: number;\n\n  /**\n   * Configures the frequency of yielding the main thread to other tasks.\n   *\n   * In the browser environment, yielding the main thread can improve the\n   * responsiveness of the page during training. In the Node.js environment,\n   * it can ensure tasks queued in the event loop can be handled in a timely\n   * manner.\n   *\n   * The value can be one of the following:\n   *   - `'auto'`: The yielding happens at a certain frame rate (currently set\n   *               at 125ms). This is the default.\n   *   - `'batch'`: yield every batch.\n   *   - `'epoch'`: yield every epoch.\n   *   - any `number`: yield every `number` milliseconds.\n   *   - `'never'`: never yield. (yielding can still happen through `await\n   *      nextFrame()` calls in custom callbacks.)\n   */\n  yieldEvery?: YieldEveryOptions;\n}\n\nexport function checkBatchSize(batchSize: number) {\n  tfc.util.assert(\n      batchSize > 0 && Number.isInteger(batchSize),\n      () => `batchSize is required to be a positive integer, but got ${\n          batchSize}`);\n}\n\n/**\n * Slice a Tensor or an Array of Tensors, by start and stop indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArraysByIndices()` together.\n *\n * @param arrays: the input.\n * @param start: the starting index (inclusive).\n * @param stop: the stopping index (exclusive).\n * @returns The result of the slicing. If `arrays` is an `Array` of\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\n *   in the same way.\n */\nexport function sliceArrays(\n    arrays: Tensor|Tensor[], start: number, stop: number): Tensor|Tensor[] {\n  if (arrays == null) {\n    return [null];\n  } else if (Array.isArray(arrays)) {\n    return arrays.map(array => sliceAlongFirstAxis(array, start, stop - start));\n  } else {  // Tensor.\n    return sliceAlongFirstAxis(arrays, start, stop - start);\n  }\n}\n\n/**\n * Slice a Tensor or an Array of Tensors, by random-order indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArrays()` together.\n *\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\n *   same fashion.\n * @param indices The indices to use for slicing along the first (batch)\n *   dimension.\n * @returns Result(s) of the slicing.\n */\nexport function sliceArraysByIndices(\n    arrays: Tensor|Tensor[], indices: Tensor1D): Tensor|Tensor[] {\n  return tfc.tidy(() => {\n    if (arrays == null) {\n      return null;\n    } else if (Array.isArray(arrays)) {\n      return arrays.map(\n          array => (sliceArraysByIndices(array, indices) as Tensor));\n    } else {\n      // TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n      //   tensor1d() calls.\n      return gather(\n          arrays,\n          indices.dtype === 'int32' ? indices : tfc.cast(indices, 'int32'));\n    }\n  });\n}\n\n/**\n * Returns a list of batch indices (tuples of indices).\n * @param size: Integer, total size of the data to slice into batches.\n * @param batchSize: Integer, batch size.\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\n *   that satisfy batchStart <= x < batchEnd.\n */\nexport function makeBatches(\n    size: number, batchSize: number): Array<[number, number]> {\n  const output: Array<[number, number]> = [];\n  let batchStart = 0;\n  let batchEnd: number = null;\n  while (batchStart < size) {\n    batchEnd = batchStart + batchSize;\n    if (batchEnd >= size) {\n      batchEnd = size;\n    }\n    output.push([batchStart, batchEnd]);\n    batchStart = batchEnd;\n  }\n  return output;\n}\n\n/**\n * Ensure tensors all have a rank of at least 2.\n *\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\n */\nexport function ensureTensorsRank2OrHigher(tensors: Tensor|Tensor[]): Tensor[] {\n  const outs: Tensor[] = [];\n  if (tensors instanceof Tensor) {\n    tensors = [tensors];\n  }\n\n  // Make Tensors at least 2D.\n  for (let i = 0; i < tensors.length; ++i) {\n    const tensor = tensors[i];\n    if (tensor.rank === 1) {\n      outs.push(expandDims(tensor, 1));\n    } else if (tensor.rank === 0) {\n      throw new Error(\n          'Expected tensor to be at least 1D, but received a 0D tensor ' +\n          '(scalar).');\n    } else {\n      outs.push(tensor);\n    }\n  }\n  return outs;\n}\n\n/**\n * Compare a set of tensors with a reference (old) set, discard the ones\n * in the new set that are not present in the reference set.\n *\n * This method is used for memory clenaup during calls such as\n * LayersModel.fit().\n *\n * @param tensors New set which may contain Tensors not present in\n *   `refTensors`.\n * @param refTensors Reference Tensor set.\n */\n// TODO(cais, kangyizhang): Deduplicate with tfjs-data.\nexport function disposeNewTensors(\n    tensors: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    refTensors: Tensor|Tensor[]|{[inputName: string]: Tensor}): void {\n  if (tensors == null) {\n    return;\n  }\n  const oldTensorIds: number[] = [];\n  if (refTensors instanceof Tensor) {\n    oldTensorIds.push(refTensors.id);\n  } else if (Array.isArray(refTensors)) {\n    refTensors.forEach(t => oldTensorIds.push(t.id));\n  } else if (refTensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in refTensors) {\n      const oldTensor = refTensors[name];\n      oldTensorIds.push(oldTensor.id);\n    }\n  }\n\n  const tensorsToDispose: Tensor[] = [];\n  if (tensors instanceof Tensor) {\n    if (oldTensorIds.indexOf(tensors.id) === -1) {\n      tensorsToDispose.push(tensors);\n    }\n  } else if (Array.isArray(tensors)) {\n    tensors.forEach(t => {\n      if (oldTensorIds.indexOf(t.id) === -1) {\n        tensorsToDispose.push(t);\n      }\n    });\n  } else if (tensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in tensors) {\n      const tensor = tensors[name];\n      if (oldTensorIds.indexOf(tensor.id) === -1) {\n        tensorsToDispose.push(tensor);\n      }\n    }\n  }\n\n  tensorsToDispose.forEach(t => {\n    if (!t.isDisposed) {\n      t.dispose();\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: engine/training.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {io, ModelPredictConfig as ModelPredictArgs, NamedTensorMap, Optimizer, Scalar, scalar, serialization, Tensor, Tensor1D, tensor1d, util} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {BaseCallback, configureCallbacks, History, ModelLoggingVerbosity, standardizeCallbacks} from '../base_callbacks';\nimport {nameScope} from '../common';\nimport {NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {LossIdentifier} from '../keras_format/loss_config';\nimport {OptimizerSerialization} from '../keras_format/optimizer_config';\nimport {MetricsIdentifier, TrainingConfig} from '../keras_format/training_config';\nimport {deserialize} from '../layers/serialization';\nimport { disposeTensorsInLogs, UnresolvedLogs } from '../logs';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport {LossOrMetricFn, NamedTensor} from '../types';\nimport {checkUserDefinedMetadata} from '../user_defined_metadata';\nimport {count, pyListRepeat, singletonOrArray, toCamelCase, toSnakeCase, unique} from '../utils/generic_utils';\nimport {printSummary} from '../utils/layer_utils';\nimport {range} from '../utils/math_utils';\nimport {convertPythonicToTs} from '../utils/serialization_utils';\nimport {LayerVariable} from '../variables';\nimport {version} from '../version';\n\nimport {Container, ContainerArgs} from './container';\nimport {Dataset} from './dataset_stub';\nimport {execute, FeedDict} from './executor';\nimport {DisposeResult, SymbolicTensor} from './topology';\nimport {evaluateDataset, fitDataset, ModelEvaluateDatasetArgs, ModelFitDatasetArgs} from './training_dataset';\nimport {checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, makeBatches, ModelFitArgs, sliceArrays, sliceArraysByIndices} from './training_tensors';\nimport {ClassWeight, ClassWeightMap, computeWeightedLoss, standardizeClassWeights, standardizeWeights} from './training_utils';\n\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\nexport function isDataTensor(x: Tensor|Tensor[]|{[inputName: string]: Tensor}|\n                             {[inputName: string]: Tensor[]}): boolean {\n  return x instanceof Tensor;\n}\n\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\nexport function isDataArray(x: Tensor|Tensor[]|\n                            {[inputName: string]: Tensor}): boolean {\n  return Array.isArray(x);\n}\n\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\nexport function isDataDict(x: Tensor|Tensor[]|\n                           {[inputName: string]: Tensor}): boolean {\n  return !isDataTensor(x) && !isDataArray(x);\n}\n\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\nexport function standardizeInputData(\n    data: Tensor|Tensor[]|{[inputName: string]: Tensor}, names: string[],\n    shapes?: Shape[], checkBatchAxis = true, exceptionPrefix = ''): Tensor[] {\n  if (names == null || names.length === 0) {\n    // Check for the case where the model expected no data, but some data got\n    // sent.\n    if (data != null) {\n      let gotUnexpectedData = false;\n      if (isDataArray(data) && (data as Tensor[]).length > 0) {\n        gotUnexpectedData = true;\n      } else if (isDataDict(data)) {\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            gotUnexpectedData = true;\n            break;\n          }\n        }\n      } else {\n        // `data` is a singleton Tensor in this case.\n        gotUnexpectedData = true;\n      }\n      if (gotUnexpectedData) {\n        throw new ValueError(\n            `Error when checking model ${exceptionPrefix} expected no data, ` +\n            `but got ${data}`);\n      }\n    }\n    return [];\n  }\n  if (data == null) {\n    return names.map(name => null);\n  }\n\n  let arrays: Tensor[];\n  if (isDataDict(data)) {\n    data = data as {[inputName: string]: Tensor};\n    arrays = [];\n    for (const name of names) {\n      if (data[name] == null) {\n        throw new ValueError(\n            `No data provided for \"${name}\". Need data for each key in: ` +\n            `${names}`);\n      }\n      arrays.push(data[name]);\n    }\n  } else if (isDataArray(data)) {\n    data = data as Tensor[];\n    if (data.length !== names.length) {\n      throw new ValueError(\n          `Error when checking model ${exceptionPrefix}: the Array of ` +\n          `Tensors that you are passing to your model is not the size the ` +\n          `model expected. Expected to see ${names.length} Tensor(s), but ` +\n          `instead got the following list of Tensor(s): ${data}`);\n    }\n    arrays = data;\n  } else {\n    data = data as Tensor;\n    if (names.length > 1) {\n      throw new ValueError(\n          `The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` +\n          `but only received one Tensor. Found: Tensor with shape ${\n              data.shape}`);\n    }\n    arrays = [data];\n  }\n\n  arrays = ensureTensorsRank2OrHigher(arrays);\n\n  // Check shape compatibility.\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\n            `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n            `to have ${shapes[i].length} dimension(s). but got array with ` +\n            `shape ${array.shape}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          // Skip the first (batch) axis.\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null && refDim >= 0 && dim !== refDim) {\n          throw new ValueError(\n              `${exceptionPrefix} expected a batch of elements where each ` +\n              `example has shape [${shapes[i].slice(1, shapes[i].length)}] ` +\n              `(i.e.,tensor shape [*,${\n                  shapes[i].slice(1, shapes[i].length)}])` +\n              ` but the ${exceptionPrefix} received an input with ${\n                  array.shape[0]}` +\n              ` examples, each with shape [${\n                  array.shape.slice(1, array.shape.length)}]` +\n              ` (tensor shape [${array.shape}])`);\n        }\n      }\n    }\n  }\n  return arrays;\n}\n\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\nexport function checkArrayLengths(\n    inputs: Tensor[], targets: Tensor[], weights?: Tensor[]) {\n  const setX = unique(inputs.map(input => input.shape[0]));\n  setX.sort();\n  const setY = unique(targets.map(target => target.shape[0]));\n  setY.sort();\n  // TODO(cais): Check `weights` as well.\n  if (setX.length > 1) {\n    throw new ValueError(\n        `All input Tensors (x) should have the same number of samples. ` +\n        `Got array shapes: ` +\n        `${JSON.stringify(inputs.map(input => input.shape))}`);\n  }\n  if (setY.length > 1) {\n    throw new ValueError(\n        `All target Tensors (y) should have the same number of samples. ` +\n        `Got array shapes: ` +\n        `${JSON.stringify(targets.map(target => target.shape))}`);\n  }\n  if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n    throw new ValueError(\n        `Input Tensors should have the same number of samples as target ` +\n        `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` +\n        `sample(s).`);\n  }\n}\n\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\nfunction checkLossAndTargetCompatibility(\n    targets: Tensor[], lossFns: LossOrMetricFn[], outputShapes: Shape[]) {\n  // TODO(cais): Dedicated test coverage?\n  const keyLosses = [\n    losses.meanSquaredError, losses.binaryCrossentropy,\n    losses.categoricalCrossentropy\n  ];\n  for (let i = 0; i < targets.length; ++i) {\n    const y = targets[i];\n    const loss = lossFns[i];\n    const shape = outputShapes[i];\n    if (loss == null) {\n      continue;\n    }\n    if (loss === losses.categoricalCrossentropy) {\n      if (y.shape[y.shape.length - 1] === 1) {\n        throw new ValueError(\n            `You are passing a target array of shape ${y.shape} while using ` +\n            `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` +\n            `expects targets to be binary matrices (1s and 0s) of shape ` +\n            `[samples, classes].`);\n        // TODO(cais): Example code in error message.\n      }\n    }\n    if (keyLosses.indexOf(loss) !== -1) {\n      const slicedYShape = y.shape.slice(1);\n      const slicedShape = shape.slice(1);\n      for (let j = 0; j < slicedYShape.length; ++j) {\n        const targetDim = slicedYShape[j];\n        const outDim = slicedShape[j];\n        if (outDim != null && targetDim !== outDim) {\n          throw new ValueError(\n              `A target Tensor with shape ${y.shape} was passed for an ` +\n              `output of shape ${shape}, while using a loss function that ` +\n              `expects targets to have the same shape as the output.`);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\nfunction checkInputData(\n    data: Tensor|Tensor[], names: string[], shapes?: Shape[],\n    checkBatchAxis = true, exceptionPrefix = '') {\n  let arrays: Tensor[];\n  if (Array.isArray(data)) {\n    if (data.length !== names.length) {\n      throw new ValueError(\n          `Error when checking model ${exceptionPrefix}: the Array of ` +\n          `Tensors that you are passing to your model is not the size the ` +\n          `the model expected. Expected to see ${names.length} Tensor(s),` +\n          ` but instead got ${data.length} Tensors(s).`);\n    }\n    arrays = data;\n  } else {\n    if (names.length > 1) {\n      throw new ValueError(\n          `The model expects ${names.length} ${exceptionPrefix} Tensors, ` +\n          `but only received one Tensor. Found: array with shape ` +\n          `${JSON.stringify(data.shape)}.`);\n    }\n    arrays = [data];\n  }\n\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\n            `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n            `to have ${shapes[i].length} dimension(s), but got array with ` +\n            `shape ${JSON.stringify(array.shape)}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null) {\n          if (refDim !== dim) {\n            throw new ValueError(\n                `Error when checking ${exceptionPrefix}: expected ` +\n                `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` +\n                `got array with shape ${JSON.stringify(array.shape)}.`);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Maps metric functions to model outputs.\n * @param metrics An shortcut strings name, metric function, `Array` or dict\n *   (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: incompatible metrics format.\n */\nexport function collectMetrics(\n    metrics: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n    {[outputName: string]: string | LossOrMetricFn},\n    outputNames: string[]): Array<Array<string|LossOrMetricFn>> {\n  if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n    return outputNames.map(name => []);\n  }\n\n  let wrappedMetrics: Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n  if (typeof metrics === 'string' || typeof metrics === 'function') {\n    wrappedMetrics = [metrics];\n  } else if (Array.isArray(metrics) || typeof metrics === 'object') {\n    wrappedMetrics = metrics as Array<string|LossOrMetricFn>|\n        {[outputName: string]: string} | {[outputName: string]: LossOrMetricFn};\n  } else {\n    throw new TypeError(\n        'Type of metrics argument not understood. Expected an string,' +\n        `function, Array, or Object, found: ${metrics}`);\n  }\n\n  if (Array.isArray(wrappedMetrics)) {\n    // We then apply all metrics to all outputs.\n    return outputNames.map(\n        name => wrappedMetrics as Array<string|LossOrMetricFn>);\n  } else {\n    // In this case, metrics is a dict.\n    const nestedMetrics: Array<Array<string|LossOrMetricFn>> = [];\n    for (const name of outputNames) {\n      let outputMetrics: string|LossOrMetricFn|Array<string|LossOrMetricFn> =\n          wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n      if (!Array.isArray(outputMetrics)) {\n        outputMetrics = [outputMetrics];\n      }\n      nestedMetrics.push(outputMetrics);\n    }\n    return nestedMetrics;\n  }\n}\n\nexport interface ModelEvaluateArgs {\n  /**\n   * Batch size (Integer). If unspecified, it will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Verbosity mode.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * Tensor of weights to weight the contribution of different samples to the\n   * loss and metrics.\n   */\n  sampleWeight?: Tensor;\n\n  /**\n   * integer: total number of steps (batches of samples)\n   * before declaring the evaluation round finished. Ignored with the default\n   * value of `undefined`.\n   */\n  steps?: number;\n}\n\n/**\n * Configuration for calls to `LayersModel.compile()`.\n */\nexport interface ModelCompileArgs {\n  /**\n   * An instance of `tf.train.Optimizer` or a string name for an Optimizer.\n   */\n  optimizer: string|Optimizer;\n\n  /**\n   * Object function(s) or name(s) of object function(s).\n   * If the model has multiple outputs, you can use a different loss\n   * on each output by passing a dictionary or an Array of losses.\n   * The loss value that will be minimized by the model will then be the sum\n   * of all individual losses.\n   */\n  loss: string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn};\n\n  /**\n   * List of metrics to be evaluated by the model during training and testing.\n   * Typically you will use `metrics=['accuracy']`.\n   * To specify different metrics for different outputs of a multi-output\n   * model, you could also pass a dictionary.\n   */\n  metrics?: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n\n  // TODO(cais): Add lossWeights, sampleWeightMode, weightedMetrics, and\n  //   targetTensors.\n}\n\nconst LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n\n/**\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\n * for training, evaluation, prediction and saving.\n *\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class LayersModel extends Container implements tfc.InferenceModel {\n  // The class name is 'Model' rather than 'LayersModel' for backwards\n  // compatibility since this class name shows up in the serialization format.\n  /** @nocollapse */\n  static className = 'Model';\n  protected optimizer_: Optimizer;\n  // Whether the model instance owns the optimizer: `true` if and only if\n  // `optimizer` is created from a string parameter during `compile()` call.\n  protected isOptimizerOwned: boolean;\n\n  loss: string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn};\n  lossFunctions: LossOrMetricFn[];\n\n  // TODO(cais): These private variables should probably not have the string\n  //   'feed' in their names, because we are not dealing with a symbolic\n  //   backend.\n  private feedOutputShapes: Shape[];\n  private feedLossFns: LossOrMetricFn[];\n  private collectedTrainableWeights: LayerVariable[];\n  private testFunction: (data: Tensor[]) => Scalar[];\n  history: History;\n\n  // A public property that can be set by Callbacks to order early stopping\n  // during `fit()` calls.\n  protected stopTraining_: boolean;\n  protected isTraining: boolean;\n\n  metrics: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n  metricsNames: string[];\n  // Porting Note: `metrics_tensors` in PyKeras is a symbolic tensor. But given\n  //   the imperative nature of tfjs-core, `metricsTensors` is a\n  //   TypeScript function here.\n  //   Also note that due to the imperative nature of tfjs-core, `metricsTensor`\n  //   here needs an output index to keep track of which output of the\n  //   LayersModel a metric belongs to. This is unlike `metrics_tensors` in\n  //   PyKeras, which is a `list` of symbolic tensors, each of which has\n  //   implicit \"knowledge\" of the outputs it depends on.\n  metricsTensors: Array<[LossOrMetricFn, number]>;\n\n  // User defind metadata (if any).\n  private userDefinedMetadata: {};\n\n  constructor(args: ContainerArgs) {\n    super(args);\n    this.isTraining = false;\n  }\n\n  /**\n   * Print a text summary of the model's layers.\n   *\n   * The summary includes\n   * - Name and type of all layers that comprise the model.\n   * - Output shape(s) of the layers\n   * - Number of weight parameters of each layer\n   * - If the model has non-sequential-like topology, the inputs each layer\n   *   receives\n   * - The total number of trainable and non-trainable parameters of the model.\n   *\n   * ```js\n   * const input1 = tf.input({shape: [10]});\n   * const input2 = tf.input({shape: [20]});\n   * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n   * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n   * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n   * const output =\n   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n   *\n   * const model = tf.model({inputs: [input1, input2], outputs: output});\n   * model.summary();\n   * ```\n   *\n   * @param lineLength Custom line length, in number of characters.\n   * @param positions Custom widths of each of the columns, as either\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n   *   right-most (i.e., ending) position of a column.\n   * @param printFn Custom print function. Can be used to replace the default\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\n   *   messages in the console.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  summary(\n      lineLength?: number, positions?: number[],\n      printFn:\n          // tslint:disable-next-line:no-any\n      (message?: any, ...optionalParams: any[]) => void = console.log) {\n    if (!this.built) {\n      throw new ValueError(\n          `This model has never been called, thus its weights have not been ` +\n          `created yet. So no summary can be displayed. Build the model ` +\n          `first (e.g., by calling it on some test data).`);\n    }\n    printSummary(this, lineLength, positions, printFn);\n  }\n\n  /**\n   * Configures and prepares the model for training and evaluation.  Compiling\n   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n   * or `evaluate` on an un-compiled model will throw an error.\n   *\n   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n   * metrics to be used for fitting and evaluating this model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  compile(args: ModelCompileArgs): void {\n    if (args.loss == null) {\n      args.loss = [];\n    }\n    this.loss = args.loss;\n\n    if (typeof args.optimizer === 'string') {\n      this.optimizer_ = optimizers.getOptimizer(args.optimizer);\n      this.isOptimizerOwned = true;\n    } else {\n      if (!(args.optimizer instanceof Optimizer)) {\n        throw new ValueError(\n            `User-defined optimizer must be an instance of tf.Optimizer.`);\n      }\n      this.optimizer_ = args.optimizer;\n      this.isOptimizerOwned = false;\n    }\n\n    // TODO(cais): Add lossWeights.\n    // TODO(cais): Add sampleWeightMode.\n\n    // Prepare loss functions.\n    let lossFunctions: LossOrMetricFn[] = [];\n    if (!Array.isArray(args.loss) && typeof args.loss !== 'string' &&\n        typeof args.loss !== 'function') {\n      args.loss = args.loss as {[outputName: string]: string};\n      for (const name in args.loss) {\n        if (this.outputNames.indexOf(name) === -1) {\n          throw new ValueError(\n              `Unknown entry in loss dictionary: \"${name}\". ` +\n              `Only expected the following keys: ${this.outputNames}`);\n        }\n      }\n      for (const name of this.outputNames) {\n        if (args.loss[name] == null) {\n          console.warn(\n              `Output \"${name}\" is missing from loss dictionary. We assume ` +\n              `this was done on purpose, and we will not be expecting data ` +\n              `to be passed to ${name} during training`);\n        }\n        lossFunctions.push(losses.get(args.loss[name]));\n      }\n    } else if (Array.isArray(args.loss)) {\n      if (args.loss.length !== this.outputs.length) {\n        throw new ValueError(\n            `When passing an Array as loss, it should have one entry per ` +\n            `model output. The model has ${this.outputs.length} output(s), ` +\n            `but you passed loss=${args.loss}.`);\n      }\n      const theLosses = args.loss as Array<string|LossOrMetricFn>;\n      lossFunctions = theLosses.map(l => losses.get(l));\n    } else {\n      const lossFunction = losses.get(args.loss);\n      this.outputs.forEach(_ => {\n        lossFunctions.push(lossFunction);\n      });\n    }\n\n    this.lossFunctions = lossFunctions;\n\n    this.feedOutputNames = [];\n    this.feedOutputShapes = [];\n    this.feedLossFns = [];\n    for (let i = 0; i < this.outputs.length; ++i) {\n      // TODO(cais): Logic for skipping target(s).\n      const shape = this.internalOutputShapes[i];\n      const name = this.outputNames[i];\n      this.feedOutputNames.push(name);\n      this.feedOutputShapes.push(shape);\n      this.feedLossFns.push(this.lossFunctions[i]);\n    }\n\n    // TODO(cais): Add logic for output masks.\n    // TODO(cais): Add logic for sample weights.\n    const skipTargetIndices: number[] = [];\n\n    // Prepare metrics.\n    this.metrics = args.metrics;\n    // TODO(cais): Add weightedMetrics.\n    this.metricsNames = ['loss'];\n    this.metricsTensors = [];\n\n    // Compute total loss.\n    // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n    //   Here, metricsTensors are TypeScript functions. This difference is due\n    //   to the difference in symbolic/imperative property of the backends.\n    nameScope('loss', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        // TODO(cais): Add weightedLoss, sampleWeight and mask.\n        //   The following line should be weightedLoss\n        const weightedLoss = this.lossFunctions[i];\n        if (this.outputs.length > 1) {\n          this.metricsTensors.push([weightedLoss, i]);\n          this.metricsNames.push(this.outputNames[i] + '_loss');\n        }\n      }\n\n      // Porting Note: Due to the imperative nature of the backend, we calculate\n      //   the regularizer penalties in the totalLossFunction, instead of here.\n    });\n\n    const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n    // TODO(cais): Add nestedWeightedMetrics.\n\n    /**\n     * Helper function used in loop below.\n     */\n    const appendMetric =\n        (outputIndex: number, metricName: string,\n         metricTensor: LossOrMetricFn) => {\n          if (this.outputNames.length > 1) {\n            metricName = this.outputNames[outputIndex] + '_' + metricName;\n          }\n          this.metricsNames.push(metricName);\n          this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n\n    nameScope('metric', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        const outputMetrics = nestedMetrics[i];\n        // TODO(cais): Add weights and outputWeightedMetrics.\n\n        // TODO(cais): Add optional arg `weights` to the following function.\n        const handleMetrics = (metrics: Array<string|LossOrMetricFn>) => {\n          const metricNamePrefix = '';\n          let metricName: string;\n          let accFn: LossOrMetricFn;\n          let weightedMetricFn: LossOrMetricFn;\n          //  TODO(cais): Use 'weights_' for weighted metrics.\n\n          for (const metric of metrics) {\n            if (typeof metric === 'string' &&\n                ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                    -1) {\n              const outputShape = this.internalOutputShapes[i];\n\n              if (outputShape[outputShape.length - 1] === 1 ||\n                  this.lossFunctions[i] === losses.binaryCrossentropy) {\n                // case: binary accuracy/crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryCrossentropy;\n                }\n              } else if (\n                  this.lossFunctions[i] ===\n                  losses.sparseCategoricalCrossentropy) {\n                // case: categorical accuracy / crossentropy with sparse\n                // targets.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalCrossentropy;\n                }\n              } else {\n                // case: categorical accuracy / crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalCrossentropy;\n                }\n              }\n              let suffix: string;\n              if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                suffix = 'acc';\n              } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                suffix = 'ce';\n              }\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = accFn;\n              metricName = metricNamePrefix + suffix;\n            } else {\n              const metricFn = Metrics.get(metric);\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = metricFn;\n              metricName =\n                  metricNamePrefix + Metrics.getLossOrMetricName(metric);\n            }\n\n            // TODO(cais): Add weighting and masking to metricResult.\n            let metricResult: LossOrMetricFn;\n            nameScope(metricName, () => {\n              metricResult = weightedMetricFn;\n            });\n            appendMetric(i, metricName, metricResult);\n          }\n        };\n\n        handleMetrics(outputMetrics);\n        // TODO(cais): Call handleMetrics with weights.\n      }\n    });\n\n    // Porting Notes: Given the imperative backend of tfjs-core,\n    //   there is no need for constructing the symbolic graph and placeholders.\n    this.collectedTrainableWeights = this.trainableWeights;\n  }\n\n  /**\n   * Check trainable weights count consistency.\n   *\n   * This will raise a warning if `this.trainableWeights` and\n   * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n   * numbers of parameters).\n   * Inconsistency will typically arise when one modifies `model.trainable`\n   * without calling `model.compile()` again.\n   */\n  protected checkTrainableWeightsConsistency(): void {\n    if (this.collectedTrainableWeights == null) {\n      return;\n    }\n    if (this.trainableWeights.length !==\n        this.collectedTrainableWeights.length) {\n      console.warn(\n          'Discrepancy between trainableweights and collected trainable ' +\n          'weights. Did you set `model.trainable` without calling ' +\n          '`model.compile()` afterwards?');\n    }\n  }\n\n  /**\n   * Returns the loss value & metrics values for the model in test mode.\n   *\n   * Loss and metrics are specified during `compile()`, which needs to happen\n   * before calls to `evaluate()`.\n   *\n   * Computation is done in batches.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const result = model.evaluate(\n   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n   * result.print();\n   * ```\n   *\n   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple inputs.\n   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple outputs.\n   * @param args A `ModelEvaluateArgs`, containing optional fields.\n   *\n   * @return `Scalar` test loss (if the model has a single output and no\n   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n   *   and/or metrics). The attribute `model.metricsNames`\n   *   will give you the display labels for the scalar outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  evaluate(\n      x: Tensor|Tensor[], y: Tensor|Tensor[],\n      args: ModelEvaluateArgs = {}): Scalar|Scalar[] {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n\n    // TODO(cais): Standardize `config.sampleWeights` as well.\n    // Validate user data.\n    const checkBatchAxis = true;\n    const standardizedOuts =\n        this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    try {\n      // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n      // of the input to 0.\n      const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n      this.makeTestFunction();\n      const f = this.testFunction;\n      const testOuts =\n          this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n      return singletonOrArray(testOuts);\n    } finally {\n      disposeNewTensors(standardizedOuts[0], x);\n      disposeNewTensors(standardizedOuts[1], y);\n    }\n  }\n\n  // TODO(cais): Add code snippet below once real dataset objects are\n  //   available.\n  /**\n   * Evaluate model using a dataset object.\n   *\n   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for evaluation. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g.\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs. Of the two items in the array, the\n   *   first is the input feature(s) and the second is the output target(s).\n   * @param args A configuration object for the dataset-based evaluation.\n   * @returns Loss and metric values as an Array of `Scalar` objects.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async evaluateDataset(dataset: Dataset<{}>, args?: ModelEvaluateDatasetArgs):\n      Promise<Scalar|Scalar[]> {\n    this.makeTestFunction();\n    return evaluateDataset(this, dataset, args);\n  }\n\n  /**\n   * Get number of samples provided for training, evaluation or prediction.\n   *\n   * @param ins Input `tf.Tensor`.\n   * @param batchSize Integer batch size, optional.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring loop finished. Optional.\n   * @param stepsName The public API's parameter name for `steps`.\n   * @returns Number of samples provided.\n   */\n  private checkNumSamples(\n      ins: Tensor|Tensor[], batchSize?: number, steps?: number,\n      stepsName = 'steps'): number {\n    let numSamples: number;\n    if (steps != null) {\n      numSamples = null;\n      if (batchSize != null) {\n        throw new ValueError(\n            `If ${stepsName} is set, batchSize must be null or undefined.` +\n            `Got batchSize = ${batchSize}`);\n      }\n    } else if (ins != null) {\n      if (Array.isArray(ins)) {\n        numSamples = ins[0].shape[0];\n      } else {\n        numSamples = ins.shape[0];\n      }\n    } else {\n      throw new ValueError(\n          `Either the input data should have a defined shape, or ` +\n          `${stepsName} shoud be specified.`);\n    }\n    return numSamples;\n  }\n\n  /**\n   * Execute internal tensors of the model with input data feed.\n   * @param inputs Input data feed. Must match the inputs of the model.\n   * @param outputs Names of the output tensors to be fetched. Must match\n   *   names of the SymbolicTensors that belong to the graph.\n   * @returns Fetched values for `outputs`.\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs: string|string[]):\n      Tensor|Tensor[] {\n    if (Array.isArray(outputs) && outputs.length === 0) {\n      throw new ValueError(\n          '`outputs` is an empty Array, which is not allowed.');\n    }\n\n    const outputsIsArray = Array.isArray(outputs);\n    const outputNames =\n        (outputsIsArray ? outputs : [outputs]);\n    const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n\n    // Format the input into a FeedDict.\n    const feedDict = new FeedDict();\n    if (inputs instanceof Tensor) {\n      inputs = [inputs];\n    }\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== this.inputs.length) {\n        throw new ValueError(\n            `The number of inputs provided (${inputs.length}) ` +\n            `does not match the number of inputs of this model ` +\n            `(${this.inputs.length}).`);\n      }\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n    } else {\n      for (const input of this.inputs) {\n        const tensorValue = inputs[input.name];\n        if (tensorValue == null) {\n          throw new ValueError(\n              `No value is provided for the model's input ${input.name}`);\n        }\n        feedDict.add(input, tensorValue);\n      }\n    }\n\n    // Run execution.\n    const executeOutputs = execute(outputSymbolicTensors, feedDict) as Tensor[];\n    return outputsIsArray ? executeOutputs : executeOutputs[0];\n  }\n\n  /**\n   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n   */\n  private retrieveSymbolicTensors(symbolicTensorNames: string[]):\n      SymbolicTensor[] {\n    const outputSymbolicTensors: SymbolicTensor[] =\n        pyListRepeat(null, symbolicTensorNames.length);\n    let outputsRemaining = symbolicTensorNames.length;\n    for (const layer of this.layers) {\n      const layerOutputs: SymbolicTensor[] =\n          Array.isArray(layer.output) ? layer.output : [layer.output];\n      const layerOutputNames = layerOutputs.map(output => output.name);\n      for (let i = 0; i < symbolicTensorNames.length; ++i) {\n        const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n        if (index !== -1) {\n          outputSymbolicTensors[i] = layerOutputs[index];\n          outputsRemaining--;\n        }\n        if (outputsRemaining === 0) {\n          break;\n        }\n      }\n      if (outputsRemaining === 0) {\n        break;\n      }\n    }\n\n    if (outputsRemaining > 0) {\n      const remainingNames: string[] = [];\n      outputSymbolicTensors.forEach((tensor, i) => {\n        if (tensor == null) {\n          remainingNames.push(symbolicTensorNames[i]);\n        }\n      });\n      throw new ValueError(\n          `Cannot find SymbolicTensors for output name(s): ` +\n          `${JSON.stringify(remainingNames)}`);\n    }\n    return outputSymbolicTensors;\n  }\n\n  /**\n   * Helper method to loop over some data in batches.\n   *\n   * Porting Note: Not using the functional approach in the Python equivalent\n   *   due to the imperative backend.\n   * Porting Note: Does not support step mode currently.\n   *\n   * @param ins: input data\n   * @param batchSize: integer batch size.\n   * @param verbose: verbosity model\n   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n   *   `tf.Tensor` (if multipe outputs).\n   */\n  private predictLoop(ins: Tensor|Tensor[], batchSize = 32, verbose = false):\n      Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins);\n      if (verbose) {\n        throw new NotImplementedError(\n            'Verbose predictLoop() is not implemented yet.');\n      }\n\n      // Sample-based predictions.\n      // Porting Note: Tensor currently does not support sliced assignments as\n      //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n      //   iterating over the batches.\n\n      const batches = makeBatches(numSamples, batchSize);\n      const outsBatches: Tensor[][] = this.outputs.map(output => []);\n\n      // TODO(cais): Can the scope() be pushed down inside the for loop?\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchOuts = tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          // TODO(cais): Take care of the case of the last element is a flag for\n          //   training/test.\n          const insBatch = sliceArrays(ins, batchStart, batchEnd);\n\n          // Construct the feeds for execute();\n          const feeds = [];\n          if (Array.isArray(insBatch)) {\n            for (let i = 0; i < insBatch.length; ++i) {\n              feeds.push({key: this.inputs[i], value: insBatch[i]});\n            }\n          } else {\n            feeds.push({key: this.inputs[0], value: insBatch});\n          }\n          const feedDict = new FeedDict(feeds);\n          return execute(this.outputs, feedDict) as Tensor[];\n        });\n        batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n      }\n      return singletonOrArray(\n          outsBatches.map(batches => tfc.concat(batches, 0)));\n    });\n  }\n\n  /**\n   * Generates output predictions for the input samples.\n   *\n   * Computation is done in batches.\n   *\n   * Note: the \"step\" mode of predict() is currently not supported.\n   *   This is because the TensorFlow.js core backend is imperative only.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n   * ```\n   *\n   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n   *   the model has multiple inputs.\n   * @param args A `ModelPredictArgs` object containing optional fields.\n   *\n   * @return Prediction results as a `tf.Tensor`(s).\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and the model's expectations, or in case a stateful model receives a\n   *   number of samples that is not a multiple of the batch size.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(x: Tensor|Tensor[], args: ModelPredictArgs = {}): Tensor|Tensor[] {\n    const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n    checkInputData(\n        xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n    try {\n      // TODO(cais): Take care of stateful models.\n      //   if (this.stateful) ...\n      // TODO(cais): Take care of the learning_phase boolean flag.\n      //   if (this.useLearningPhase) ...\n      const batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n      return this.predictLoop(xsRank2OrHigher, batchSize);\n    } finally {\n      disposeNewTensors(xsRank2OrHigher, x);\n    }\n  }\n\n  /**\n   * Returns predictions for a single batch of samples.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predictOnBatch(tf.ones([8, 10])).print();\n   * ```\n   * @param x: Input samples, as a Tensor (for models with exactly one\n   *   input) or an array of Tensors (for models with more than one input).\n   * @return Tensor(s) of predictions\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predictOnBatch(x: Tensor|Tensor[]): Tensor|Tensor[] {\n    checkInputData(x, this.inputNames, this.feedInputShapes, true);\n    // TODO(cais): Take care of the learning_phase boolean flag.\n    //   if (this.useLearningPhase) ...\n    const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n    return this.predictLoop(x, batchSize);\n  }\n\n  protected standardizeUserDataXY(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor}, checkBatchAxis = true,\n      batchSize?: number): [Tensor[], Tensor[]] {\n    // TODO(cais): Add sampleWeight, classWeight\n    if (this.optimizer_ == null) {\n      throw new RuntimeError(\n          'You must compile a model before training/testing. Use ' +\n          'LayersModel.compile(modelCompileArgs).');\n    }\n    const outputShapes: Shape[] = [];\n    for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n      const outputShape = this.feedOutputShapes[i];\n      const lossFn = this.feedLossFns[i];\n      if (lossFn === losses.sparseCategoricalCrossentropy) {\n        outputShapes.push(\n            outputShape.slice(0, outputShape.length - 1).concat([1]));\n      } else {\n        // Porting Note: Because of strong typing `lossFn` must be a function.\n        outputShapes.push(outputShape);\n      }\n    }\n    x = standardizeInputData(\n        x, this.feedInputNames, this.feedInputShapes, false, 'input');\n    y = standardizeInputData(\n        y, this.feedOutputNames, outputShapes, false, 'target');\n    // TODO(cais): Standardize sampleWeights & classWeights.\n    checkArrayLengths(x, y, null);\n    // TODO(cais): Check sampleWeights as well.\n    checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n    if (this.stateful && batchSize != null && batchSize > 0) {\n      if (x[0].shape[0] % batchSize !== 0) {\n        throw new ValueError(\n            `In a stateful network, you should only pass inputs with a ` +\n            `number of samples that is divisible by the batch size ` +\n            `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n      }\n    }\n    return [x, y];\n  }\n\n  protected async standardizeUserData(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      sampleWeight?: Tensor|Tensor[]|{[outputName: string]: Tensor},\n      classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap,\n      checkBatchAxis = true,\n      batchSize?: number): Promise<[Tensor[], Tensor[], Tensor[]]> {\n    const [standardXs, standardYs] =\n        this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    // TODO(cais): Handle sampleWeights.\n    if (sampleWeight != null) {\n      throw new Error('sample weight is not supported yet.');\n    }\n\n    let standardSampleWeights: Tensor[] = null;\n    if (classWeight != null) {\n      const classWeights =\n          standardizeClassWeights(classWeight, this.outputNames);\n      standardSampleWeights = [];\n      for (let i = 0; i < classWeights.length; ++i) {\n        standardSampleWeights.push(\n            await standardizeWeights(standardYs[i], null, classWeights[i]));\n      }\n    }\n\n    // TODO(cais): Deal with the case of model.stateful == true.\n    return [standardXs, standardYs, standardSampleWeights];\n  }\n\n  /**\n   * Loop over some test data in batches.\n   * @param f A Function returning a list of tensors.\n   * @param ins Array of tensors to be fed to `f`.\n   * @param batchSize Integer batch size or `null` / `undefined`.\n   * @param verbose verbosity mode.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring test finished. Ignored with the default value of `null` /\n   * `undefined`.\n   * @returns Array of Scalars.\n   */\n  private testLoop(\n      f: (data: Tensor[]) => Scalar[], ins: Tensor[], batchSize?: number,\n      verbose = 0, steps?: number): Scalar[] {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n      const outs: Scalar[] = [];\n      if (verbose > 0) {\n        throw new NotImplementedError('Verbose mode is not implemented yet.');\n      }\n      // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n      if (steps != null) {\n        throw new NotImplementedError(\n            'steps mode in testLoop() is not implemented yet');\n      } else {\n        const batches = makeBatches(numSamples, batchSize);\n        const indexArray = tensor1d(range(0, numSamples));\n        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds =\n              K.sliceAlongFirstAxis(\n                  indexArray, batchStart, batchEnd - batchStart) as Tensor1D;\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds) as Scalar[];\n          const batchOuts = f(insBatch);\n          if (batchIndex === 0) {\n            for (let i = 0; i < batchOuts.length; ++i) {\n              outs.push(scalar(0));\n            }\n          }\n          for (let i = 0; i < batchOuts.length; ++i) {\n            const batchOut = batchOuts[i];\n            outs[i] =\n                tfc.add(outs[i], tfc.mul(batchEnd - batchStart, batchOut));\n          }\n        }\n        for (let i = 0; i < outs.length; ++i) {\n          outs[i] = tfc.div(outs[i], numSamples);\n        }\n      }\n      return outs;\n    });\n  }\n\n  protected getDedupedMetricsNames(): string[] {\n    const outLabels = this.metricsNames;\n    // Rename duplicated metrics names (can happen with an output layer\n    // shared among multiple dataflows).\n    const dedupedOutLabels = [];\n    for (let i = 0; i < outLabels.length; ++i) {\n      const label = outLabels[i];\n      let newLabel = label;\n      if (count(outLabels, label) > 1) {\n        const dupIndex = count(outLabels.slice(0, i), label);\n        newLabel += `_${dupIndex}`;\n      }\n      dedupedOutLabels.push(newLabel);\n    }\n    return dedupedOutLabels;\n  }\n\n  /**\n   * Creates a function that performs the following actions:\n   *\n   * 1. computes the losses\n   * 2. sums them to get the total loss\n   * 3. call the optimizer computes the gradients of the LayersModel's\n   *    trainable weights w.r.t. the total loss and update the variables\n   * 4. calculates the metrics\n   * 5. returns the values of the losses and metrics.\n   */\n  protected makeTrainFunction(): (data: Tensor[]) => Scalar[] {\n    return (data: Tensor[]) => {\n      const lossValues: Scalar[] = [];\n\n      const inputs = data.slice(0, this.inputs.length);\n      const targets = data.slice(\n          this.inputs.length, this.inputs.length + this.outputs.length);\n      const sampleWeights = data.slice(\n          this.inputs.length + this.outputs.length,\n          this.inputs.length + this.outputs.length * 2);\n\n      const metricsValues: Scalar[] = [];\n\n      // Create a function that computes the total loss based on the\n      // inputs. This function is used for obtaining gradients through\n      // backprop.\n      const totalLossFunction = () => {\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({key: this.inputs[i], value: inputs[i]});\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs =\n            execute(this.outputs, feedDict, {'training': true}) as Tensor[];\n        // TODO(cais): Take care of the case of multiple outputs from a\n        //   single layer?\n\n        let totalLoss: Tensor;\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          let loss = lossFunction(targets[i], outputs[i]);\n          if (sampleWeights[i] != null) {\n            loss = computeWeightedLoss(loss, sampleWeights[i]);\n          }\n\n          // TODO(cais): push Scalar instead.\n          const meanLoss: Scalar = tfc.mean(loss);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          lossValues.push(meanLoss);\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n        }\n\n        // Compute the metrics.\n        // TODO(cais): These should probably be calculated outside\n        //   totalLossFunction to benefit speed?\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          let weightedMetric: Scalar;\n\n          if (this.outputs.length > 1 && i < this.outputs.length) {\n            weightedMetric = lossValues[i];\n          } else {\n            const metric = this.metricsTensors[i][0];\n            const outputIndex = this.metricsTensors[i][1];\n            weightedMetric =\n                tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          }\n\n          tfc.keep(weightedMetric);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          metricsValues.push(weightedMetric);\n        }\n\n        totalLoss = tfc.mean(totalLoss);\n\n        // Add regularizer penalties.\n        this.calculateLosses().forEach(regularizerLoss => {\n          totalLoss = tfc.add(totalLoss, regularizerLoss);\n        });\n\n        return totalLoss as Scalar;\n      };\n\n      const variables = this.collectedTrainableWeights.map(\n          param => param.read() as tfc.Variable);\n      const returnCost = true;\n      const totalLossValue =\n          this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n\n      return [totalLossValue].concat(metricsValues);\n    };\n  }\n\n  /**\n   * Create a function which, when invoked with an array of `tf.Tensor`s as a\n   * batch of inputs, returns the prespecified loss and metrics of the model\n   * under the batch of input data.\n   */\n  private makeTestFunction() {\n    this.testFunction = (data: Tensor[]) => {\n      return tfc.tidy(() => {\n        const valOutputs: Scalar[] = [];\n        let totalLoss: Scalar;\n        const inputs = data.slice(0, this.inputs.length);\n        const targets = data.slice(\n            this.inputs.length, this.inputs.length + this.outputs.length);\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({key: this.inputs[i], value: inputs[i]});\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict) as Tensor[];\n        // Compute total loss.\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          // TODO(cais): Add sample weighting and replace the simple\n          // averaging.\n          const loss: Scalar = tfc.mean(lossFunction(targets[i], outputs[i]));\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n          valOutputs.push(totalLoss);\n        }\n        // Compute the metrics.\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          const metric = this.metricsTensors[i][0];\n          const outputIndex = this.metricsTensors[i][1];\n          // TODO(cais): Replace K.mean() with a proper weighting function.\n          const meanMetric =\n              tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          valOutputs.push(meanMetric as Scalar);\n        }\n        return valOutputs;\n      });\n    };\n  }\n\n  /**\n   * Trains the model for a fixed number of epochs (iterations on a\n   * dataset).\n   *\n   * ```js\n   * const model = tf.sequential({\n   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * for (let i = 1; i < 5 ; ++i) {\n   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *       batchSize: 4,\n   *       epochs: 3\n   *   });\n   *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n   * }\n   * ```\n   *\n   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n   * model has multiple inputs. If all inputs in the model are named, you\n   * can also pass a dictionary mapping input names to `tf.Tensor`s.\n   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n   * the model has multiple outputs. If all outputs in the model are named,\n   * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n   * @param args A `ModelFitArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @exception ValueError In case of mismatch between the provided input\n   * data and what the model expects.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async fit(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      args: ModelFitArgs = {}): Promise<History> {\n    if (this.isTraining) {\n      throw new Error(\n          'Cannot start training because another fit() call is ongoing.');\n    }\n    this.isTraining = true;\n    let inputs: Tensor[];\n    let targets: Tensor[];\n    let originalInputs: Tensor[];\n    let originalTargets: Tensor[];\n    let inputValX: Tensor|Tensor[];\n    let inputValY: Tensor|Tensor[];\n    let valX: Tensor|Tensor[];\n    let valY: Tensor|Tensor[];\n    let sampleWeights: Tensor[];\n    try {\n      const batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n\n      // Validate user data.\n      // TODO(cais): Support sampleWeight.\n      const checkBatchAxis = false;\n      const standardizedOuts =\n          await this.standardizeUserData(\n              x, y, args.sampleWeight, args.classWeight, checkBatchAxis,\n              batchSize) as [Tensor[], Tensor[], Tensor[]];\n      inputs = standardizedOuts[0];\n      targets = standardizedOuts[1];\n      sampleWeights = standardizedOuts[2];\n\n      // Prepare validation data.\n      let doValidation = false;\n      let valIns: Tensor[];\n      if (args.validationData != null && args.validationData.length > 0) {\n        doValidation = true;\n        if (args.validationData.length === 2) {\n          // config.validationData consists of valX and valY.\n          inputValX = args.validationData[0];\n          inputValY = args.validationData[1];\n        } else if (args.validationData.length === 3) {\n          throw new NotImplementedError(\n              'validationData including sample weights is not supported yet.');\n        } else {\n          throw new ValueError(\n              `When passing validation data, it must contain 2 (valX, valY) ` +\n              `or 3 (valX, valY, valSampleWeight) items; ` +\n              `${args.validationData} is invalid.`);\n        }\n\n        const checkBatchAxis = true;\n        const valStandardized =\n            await this.standardizeUserData(\n                inputValX, inputValY, null, /** Unused sample weights. */\n                null,                       /** Unused class weights. */\n                checkBatchAxis, batchSize) as [Tensor[], Tensor[], Tensor[]];\n        valX = valStandardized[0];\n        valY = valStandardized[1];\n        valIns = valX.concat(valY);\n        // TODO(cais): Add useLearningPhase data properly.\n      } else if (\n          args.validationSplit != null && args.validationSplit > 0 &&\n          args.validationSplit < 1) {\n        doValidation = true;\n        // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n        const splitAt =\n            Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n        const originalBatchSize = inputs[0].shape[0];\n        valX = sliceArrays(inputs, splitAt, originalBatchSize) as Tensor[];\n        originalInputs = inputs;\n        inputs = sliceArrays(inputs, 0, splitAt) as Tensor[];\n        valY = sliceArrays(targets, splitAt, originalBatchSize) as Tensor[];\n        originalTargets = targets;\n        targets = sliceArrays(targets, 0, splitAt) as Tensor[];\n        // TODO(cais): Once sampleWeights becomes available, slice it to get\n        //   valSampleWeights.\n        valIns = valX.concat(valY);\n\n        // TODO(cais): Add useLearningPhase data properly.\n      } else if (args.validationSteps != null) {\n        doValidation = true;\n        // TODO(cais): Add useLearningPhase.\n      }\n\n      const ins = inputs.concat(targets).concat(sampleWeights);\n\n      this.checkTrainableWeightsConsistency();\n\n      // TODO(cais): Handle use_learning_phase and learning_phase?\n\n      // Porting Note: Here we see a key deviation of tfjs-layers from\n      // Keras.\n      //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n      //  we do not construct symbolic computation graphs to embody the\n      //  training process. Instead, we define a function that performs the\n      //  training action. In PyKeras, the data (inputs and targets) are fed\n      //  through graph placeholders. In tfjs-layers, the data are fed as\n      //  function arguments. Since the function are defined below in the\n      //  scope, we don't have equivalents of PyKeras's\n      //  `_make_train_funciton`.\n      const trainFunction = this.makeTrainFunction();\n      const outLabels = this.getDedupedMetricsNames();\n\n      let valFunction: (data: Tensor[]) => Scalar[];\n      let callbackMetrics: string[];\n      if (doValidation) {\n        this.makeTestFunction();\n        valFunction = this.testFunction;\n        callbackMetrics =\n            outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n      } else {\n        valFunction = null;\n        valIns = [];\n        callbackMetrics = outLabels.slice();\n      }\n\n      const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n      const out = await this.fitLoop(\n          trainFunction, ins, outLabels, batchSize, args.epochs,\n          args.verbose, callbacks, valFunction, valIns, args.shuffle,\n          callbackMetrics, args.initialEpoch, null, null);\n      return out;\n    } finally {\n      this.isTraining = false;\n      // Memory clean up.\n      disposeNewTensors(inputs, x);\n      disposeNewTensors(targets, y);\n      disposeNewTensors(originalInputs, x);\n      disposeNewTensors(originalTargets, y);\n      disposeNewTensors(valX as Tensor[], inputValX);\n      disposeNewTensors(valY as Tensor[], inputValY);\n      if (sampleWeights != null) {\n        tfc.dispose(sampleWeights);\n      }\n    }\n    // TODO(cais): Add value to outLabels.\n  }\n\n  /**\n   * Abstract fit function for `f(ins)`.\n   * @param f A Function returning a list of tensors. For training, this\n   *   function is expected to perform the updates to the variables.\n   * @param ins List of tensors to be fed to `f`.\n   * @param outLabels List of strings, display names of the outputs of `f`.\n   * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n   * @param epochs Number of times to iterate over the data. Default : 1.\n   * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n   * @param callbacks List of callbacks to be called during training.\n   * @param valF Function to call for validation.\n   * @param valIns List of tensors to be fed to `valF`.\n   * @param shuffle Whether to shuffle the data at the beginning of every\n   * epoch. Default : true.\n   * @param callbackMetrics List of strings, the display names of the metrics\n   *   passed to the callbacks. They should be the concatenation of the\n   *   display names of the outputs of `f` and the list of display names\n   *   of the outputs of `valF`.\n   * @param initialEpoch Epoch at which to start training (useful for\n   *   resuming a previous training run). Default : 0.\n   * @param stepsPerEpoch Total number of steps (batches on samples) before\n   *   declaring one epoch finished and starting the next epoch. Ignored with\n   *   the default value of `undefined` or `null`.\n   * @param validationSteps Number of steps to run validation for (only if\n   *   doing validation from data tensors). Not applicable for tfjs-layers.\n   * @returns A `History` object.\n   */\n  async fitLoop(\n      f: (data: Tensor[]) => Scalar[], ins: Tensor[], outLabels?:\n      string[], batchSize?: number, epochs?: number, verbose?: number,\n      callbacks?: BaseCallback[], valF?: (data: Tensor[]) => Scalar[], valIns?:\n      Tensor[], shuffle?: boolean|string, callbackMetrics?: string[],\n      initialEpoch?: number, stepsPerEpoch?: number, validationSteps?: number):\n      Promise<History> {\n    if (batchSize == null) {\n      batchSize = 32;\n    }\n    if (epochs == null) {\n      epochs = 1;\n    }\n    if (shuffle == null) {\n      shuffle = true;\n    }\n    if (initialEpoch == null) {\n      initialEpoch = 0;\n    }\n\n    // TODO(cais): Change const to let below when implementing validation.\n    let doValidation = false;\n    if (valF != null && valIns != null) {\n      doValidation = true;\n      // TODO(cais): verbose message.\n    }\n    if (validationSteps != null) {\n      doValidation = true;\n      if (stepsPerEpoch == null) {\n        throw new ValueError(\n            'Can only use `validationSteps` when doing step-wise training, ' +\n            'i.e., `stepsPerEpoch` must be set.');\n      }\n    }\n\n    const numTrainSamples =\n        this.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n    let indexArray: number[];\n    if (numTrainSamples != null) {\n      indexArray = range(0, numTrainSamples);\n    }\n\n    if (verbose == null) {\n      verbose = 1;\n    }\n\n    const {callbackList, history} = configureCallbacks(\n        callbacks, verbose, epochs, initialEpoch, numTrainSamples,\n        stepsPerEpoch, batchSize, doValidation, callbackMetrics);\n    callbackList.setModel(this);\n    this.history = history;\n    await callbackList.onTrainBegin();\n    this.stopTraining_ = false;\n    // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n    // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n\n    for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n      await callbackList.onEpochBegin(epoch);\n      const epochLogs: UnresolvedLogs = {};\n      if (stepsPerEpoch != null) {\n        throw new NotImplementedError(\n            'stepsPerEpoch mode is not implemented yet.');\n      } else {\n        if (shuffle === 'batch') {\n          throw new NotImplementedError('batch shuffling is not implemneted'\n                                        + ' yet');\n        } else if (shuffle) {\n          util.shuffle(indexArray);\n        }\n        // Convert the potentially shuffled indices to Tensor1D, to avoid the\n        // cost of repeated creation of Array1Ds later on.\n        const epochIndexArray1D = tensor1d(indexArray);\n\n        const batches = makeBatches(numTrainSamples, batchSize);\n        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          const batchLogs: UnresolvedLogs = {};\n          await callbackList.onBatchBegin(batchIndex, batchLogs);\n\n          tfc.tidy(() => {\n            const batchStart = batches[batchIndex][0];\n            const batchEnd = batches[batchIndex][1];\n            const batchIds = K.sliceAlongFirstAxis(\n                                 epochIndexArray1D, batchStart,\n                                 batchEnd - batchStart) as Tensor1D;\n            batchLogs['batch'] = batchIndex;\n            batchLogs['size'] = batchEnd - batchStart;\n\n            // TODO(cais): In ins, train flag can be a number, instead of an\n            //   Tensor? Do we need to handle this in tfjs-layers?\n            const insBatch = sliceArraysByIndices(ins, batchIds) as Tensor[];\n            const outs = f(insBatch);\n            for (let i = 0; i < outLabels.length; ++i) {\n              const label = outLabels[i];\n              const out = outs[i];\n              batchLogs[label] = out;\n              tfc.keep(out);\n              // TODO(cais): Use scope() to avoid ownership.\n            }\n\n            if (batchIndex === batches.length - 1) {  // Last batch.\n              if (doValidation) {\n                const valOuts = this.testLoop(valF, valIns, batchSize);\n                // Porting Notes: In tfjs-layers, valOuts is always an Array.\n                for (let i = 0; i < outLabels.length; ++i) {\n                  const label = outLabels[i];\n                  const out = valOuts[i];\n                  tfc.keep(out);\n                  // TODO(cais): Use scope() to avoid ownership.\n                  epochLogs['val_' + label] = out;\n                }\n              }\n            }\n          });\n\n          await callbackList.onBatchEnd(batchIndex, batchLogs);\n          disposeTensorsInLogs(batchLogs);\n\n          if (this.stopTraining_) {\n            break;\n          }\n          // TODO(cais): return outs as list of Tensor.\n        }\n\n        epochIndexArray1D.dispose();\n      }\n      // TODO(cais): Run validation at the end of the epoch.\n      await callbackList.onEpochEnd(epoch, epochLogs);\n      if (this.stopTraining_) {\n        break;\n      }\n    }\n    await callbackList.onTrainEnd();\n\n    await this.history.syncData();\n    return this.history;\n  }\n\n  // TODO(cais): Add code snippet below when it's possible to instantiate\n  //   actual dataset objects.\n  /**\n   * Trains the model using a dataset object.\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for training. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g.\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs.\n   *   Of the two items in the array, the first is the input feature(s) and\n   *   the second is the output target(s).\n   * @param args A `ModelFitDatasetArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async fitDataset<T>(dataset: Dataset<T>, args: ModelFitDatasetArgs<T>):\n      Promise<History> {\n    return fitDataset(this, dataset, args);\n  }\n\n  /**\n   * Runs a single gradient update on a single batch of data.\n   *\n   * This method differs from `fit()` and `fitDataset()` in the following\n   * regards:\n   *   - It operates on exactly one batch of data.\n   *   - It returns only the loss and metric values, instead of\n   *     returning the batch-by-batch loss and metric values.\n   *   - It doesn't support fine-grained options such as verbosity and\n   *     callbacks.\n   *\n   * @param x Input data. It could be one of the following:\n   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n   *     multiple inputs).\n   *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n   *     model has named inputs).\n   * @param y Target data. It could be either a `tf.Tensor` or multiple\n   *   `tf.Tensor`s. It should be consistent with `x`.\n   * @returns Training loss or losses (in case the model has\n   *   multiple outputs), along with metrics (if any), as numbers.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async trainOnBatch(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|\n      {[inputName: string]: Tensor}): Promise<number|number[]> {\n    // TODO(cais): Support sampleWeight and classWeight.\n    // TODO(cais): Support Dataset objects.\n    const standardizeOut = await this.standardizeUserData(x, y);\n    const inputs = standardizeOut[0];\n    const targets = standardizeOut[1];\n    const trainFunction = this.makeTrainFunction();\n    const losses = trainFunction(inputs.concat(targets));\n    const lossValues: number[] = [];\n    for (const loss of losses) {\n      const v = await loss.data();\n      lossValues.push(v[0]);\n    }\n    tfc.dispose(losses);\n    disposeNewTensors(standardizeOut[0], x);\n    disposeNewTensors(standardizeOut[1], y);\n    return singletonOrArray(lossValues);\n  }\n\n  /**\n   * Extract weight values of the model.\n   *\n   * @param config: An instance of `io.SaveConfig`, which specifies\n   * model-saving options such as whether only trainable weights are to be\n   * saved.\n   * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n   *   non-uniqueified weight names) to their values.\n   */\n  protected getNamedWeights(config?: io.SaveConfig): NamedTensor[] {\n    const namedWeights: NamedTensor[] = [];\n\n    const trainableOnly = config != null && config.trainableOnly;\n    const weights = trainableOnly ? this.trainableWeights : this.weights;\n    const weightValues = this.getWeights(trainableOnly);\n    for (let i = 0; i < weights.length; ++i) {\n      if (trainableOnly && !weights[i].trainable) {\n        // Optionally skip non-trainable weights.\n        continue;\n      }\n      namedWeights.push(\n          {name: weights[i].originalName, tensor: weightValues[i]});\n    }\n    return namedWeights;\n  }\n\n  /**\n   * Setter used for force stopping of LayersModel.fit() (i.e., training).\n   *\n   * Example:\n   *\n   * ```js\n   * const input = tf.input({shape: [10]});\n   * const output = tf.layers.dense({units: 1}).apply(input);\n   * const model = tf.model({inputs: [input], outputs: [output]});\n   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n   * const xs = tf.ones([8, 10]);\n   * const ys = tf.zeros([8, 1]);\n   *\n   * const history = await model.fit(xs, ys, {\n   *   epochs: 10,\n   *   callbacks: {\n   *     onEpochEnd: async (epoch, logs) => {\n   *       if (epoch === 2) {\n   *         model.stopTraining = true;\n   *       }\n   *     }\n   *   }\n   * });\n   *\n   * // There should be only 3 values in the loss array, instead of 10\n   * values,\n   * // due to the stopping after 3 epochs.\n   * console.log(history.history.loss);\n   * ```\n   */\n  set stopTraining(stop: boolean) {\n    this.stopTraining_ = stop;\n  }\n\n  get stopTraining(): boolean {\n    return this.stopTraining_;\n  }\n\n  get optimizer(): Optimizer {\n    return this.optimizer_;\n  }\n\n  set optimizer(optimizer: Optimizer) {\n    if (this.optimizer_ !== optimizer) {\n      this.optimizer_ = optimizer;\n      this.isOptimizerOwned = false;\n    }\n  }\n\n  override dispose(): DisposeResult {\n    const result = super.dispose();\n    if (result.refCountAfterDispose === 0 && this.optimizer != null &&\n        this.isOptimizerOwned) {\n      const numTensorsBeforeOptmizerDisposal = tfc.memory().numTensors;\n      this.optimizer_.dispose();\n      result.numDisposedVariables +=\n          numTensorsBeforeOptmizerDisposal - tfc.memory().numTensors;\n    }\n    return result;\n  }\n\n  private getLossIdentifiers(): LossIdentifier|LossIdentifier[]|\n      {[outputName: string]: LossIdentifier} {\n    let lossNames: LossIdentifier|LossIdentifier[]|\n        {[outputName: string]: LossIdentifier};\n    if (typeof this.loss === 'string') {\n      lossNames = toSnakeCase(this.loss) as LossIdentifier;\n    } else if (Array.isArray(this.loss)) {\n      for (const loss of this.loss) {\n        if (typeof loss !== 'string') {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n      lossNames = (this.loss as string[]).map(name => toSnakeCase(name)) as\n          LossIdentifier[];\n    } else {\n      const outputNames = Object.keys(this.loss);\n      lossNames = {} as {[outputName: string]: LossIdentifier};\n      const losses =\n          this.loss as {[outputName: string]: LossOrMetricFn | string};\n      for (const outputName of outputNames) {\n        if (typeof losses[outputName] === 'string') {\n          lossNames[outputName] =\n              toSnakeCase(losses[outputName] as string) as LossIdentifier;\n        } else {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n    }\n    return lossNames;\n  }\n\n  private getMetricIdentifiers(): MetricsIdentifier[]|\n      {[key: string]: MetricsIdentifier} {\n    if (typeof this.metrics === 'string' ||\n        typeof this.metrics === 'function') {\n      return [toSnakeCase(Metrics.getLossOrMetricName(this.metrics))];\n    } else if (Array.isArray(this.metrics)) {\n      return this.metrics.map(\n          metric => toSnakeCase(Metrics.getLossOrMetricName(metric)));\n    } else {\n      const metricsIdentifiers: {[key: string]: MetricsIdentifier} = {};\n      for (const key in this.metrics) {\n        metricsIdentifiers[key] =\n            toSnakeCase(Metrics.getLossOrMetricName(this.metrics[key]));\n      }\n      return metricsIdentifiers;\n    }\n  }\n\n  protected getTrainingConfig(): TrainingConfig {\n    return {\n      loss: this.getLossIdentifiers(),\n      metrics: this.getMetricIdentifiers(),\n      optimizer_config: {\n        class_name: this.optimizer.getClassName(),\n        config: this.optimizer.getConfig()\n      } as OptimizerSerialization\n    };\n    // TODO(cais): Add weight_metrics when they are supported.\n    // TODO(cais): Add sample_weight_mode when it's supported.\n    // TODO(cais): Add loss_weights when it's supported.\n  }\n\n  loadTrainingConfig(trainingConfig: TrainingConfig) {\n    if (trainingConfig.weighted_metrics != null) {\n      throw new Error('Loading weight_metrics is not supported yet.');\n    }\n    if (trainingConfig.loss_weights != null) {\n      throw new Error('Loading loss_weights is not supported yet.');\n    }\n    if (trainingConfig.sample_weight_mode != null) {\n      throw new Error('Loading sample_weight_mode is not supported yet.');\n    }\n\n    const tsConfig = convertPythonicToTs(trainingConfig.optimizer_config) as\n        serialization.ConfigDict;\n    const optimizer = deserialize(tsConfig) as Optimizer;\n\n    let loss;\n    if (typeof trainingConfig.loss === 'string') {\n      loss = toCamelCase(trainingConfig.loss);\n    } else if (Array.isArray(trainingConfig.loss)) {\n      loss = trainingConfig.loss.map(lossEntry => toCamelCase(lossEntry));\n    } else if (trainingConfig.loss != null) {\n      loss = {} as {[outputName: string]: LossIdentifier};\n      for (const key in trainingConfig.loss) {\n        loss[key] = toCamelCase(trainingConfig.loss[key]) as LossIdentifier;\n      }\n    }\n\n    let metrics;\n    if (Array.isArray(trainingConfig.metrics)) {\n      metrics = trainingConfig.metrics.map(metric => toCamelCase(metric));\n    } else if (trainingConfig.metrics != null) {\n      metrics = {} as {[outputName: string]: MetricsIdentifier};\n      for (const key in trainingConfig.metrics) {\n        metrics[key] = toCamelCase(trainingConfig.metrics[key]);\n      }\n    }\n\n    this.compile({loss, metrics, optimizer});\n  }\n\n  /**\n   * Save the configuration and/or weights of the LayersModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 2. Saving `model`'s topology and weights to browser\n   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('indexeddb://my-model-1');\n   *\n   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 3. Saving `model`'s topology and weights as two files\n   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n   * browser.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('downloads://my-model-1');\n   * ```\n   *\n   * Example 4. Send  `model`'s topology and weights to an HTTP server.\n   * See the documentation of `tf.io.http` for more details\n   * including specifying request parameters and implementation of the\n   * server.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('http://my-server/model/upload');\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new ValueError(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new ValueError(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new ValueError(\n          'LayersModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    const weightDataAndSpecs =\n        await io.encodeWeights(this.getNamedWeights(config));\n\n    const returnString = false;\n    const unusedArg: {} = null;\n    const modelConfig = this.toJSON(unusedArg, returnString);\n    const modelArtifacts: io.ModelArtifacts = {\n      modelTopology: modelConfig,\n      format: LAYERS_MODEL_FORMAT_NAME,\n      generatedBy: `TensorFlow.js tfjs-layers v${version}`,\n      convertedBy: null,\n    };\n\n    const includeOptimizer = config == null ? false : config.includeOptimizer;\n    if (includeOptimizer && this.optimizer != null) {\n      modelArtifacts.trainingConfig = this.getTrainingConfig();\n      const weightType = 'optimizer';\n      const {data: optimizerWeightData, specs: optimizerWeightSpecs} =\n          await io.encodeWeights(await this.optimizer.getWeights(), weightType);\n      weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n      weightDataAndSpecs.data = io.concatenateArrayBuffers(\n          [weightDataAndSpecs.data, optimizerWeightData]);\n    }\n\n    if (this.userDefinedMetadata != null) {\n      // Check serialized size of user-defined metadata.\n      const checkSize = true;\n      checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n      modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n    }\n\n    modelArtifacts.weightData = weightDataAndSpecs.data;\n    modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n    return handlerOrURL.save(modelArtifacts);\n  }\n\n  /**\n   * Set user-defined metadata.\n   *\n   * The set metadata will be serialized together with the topology\n   * and weights of the model during `save()` calls.\n   *\n   * @param setUserDefinedMetadata\n   */\n  setUserDefinedMetadata(userDefinedMetadata: {}): void {\n    checkUserDefinedMetadata(userDefinedMetadata, this.name);\n    this.userDefinedMetadata = userDefinedMetadata;\n  }\n\n  /**\n   * Get user-defined metadata.\n   *\n   * The metadata is supplied via one of the two routes:\n   *   1. By calling `setUserDefinedMetadata()`.\n   *   2. Loaded during model loading (if the model is constructed\n   *      via `tf.loadLayersModel()`.)\n   *\n   * If no user-defined metadata is available from either of the\n   * two routes, this function will return `undefined`.\n   */\n  getUserDefinedMetadata(): {} {\n    return this.userDefinedMetadata;\n  }\n}\nserialization.registerClass(LayersModel);\n\n/**\n * A `tf.Functional` is an alias to `tf.LayersModel`.\n *\n * See also:\n *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class Functional extends LayersModel {\n  static override className = 'Functional';\n}\nserialization.registerClass(Functional);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Optimizers.\n */\n\nimport {Optimizer, train} from '@tensorflow/tfjs-core';\n\nimport {epsilon} from './backend/common';\n\nimport {ValueError} from './errors';\n\n// Add (de)serialize()\n\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function getOptimizer(identifier: string): Optimizer {\n  const optimizerMap: {[optimizerName: string]: () => Optimizer} = {\n    'Adagrad': () => train.adagrad(0.01),\n    'Adadelta': () => train.adadelta(1, 0.95, epsilon()),\n    'Adam': () => train.adam(0.001, 0.9, 0.999, epsilon()),\n    'Adamax': () => train.adamax(0.002, 0.9, 0.999, epsilon(), 0),\n    'RMSProp': () => train.rmsprop(0.001, 0.9, 0, epsilon()),\n    'SGD': () => train.sgd(0.01)\n  };\n  optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n  optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n  optimizerMap['adam'] = optimizerMap['Adam'];\n  optimizerMap['adamax'] = optimizerMap['Adamax'];\n  optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n  optimizerMap['sgd'] = optimizerMap['SGD'];\n\n  if (identifier in optimizerMap) {\n    return optimizerMap[identifier]();\n  }\n  throw new ValueError(`Unknown Optimizer ${identifier}`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source keras/models.py */\n\nimport {dispose, io, NamedTensorMap, Optimizer, Scalar, serialization, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {getUid} from './backend/state';\nimport {History} from './base_callbacks';\nimport {Dataset} from './engine/dataset_stub';\nimport {Input} from './engine/input_layer';\nimport {getSourceInputs, Layer, Node, SymbolicTensor} from './engine/topology';\nimport {LayersModel, ModelCompileArgs, ModelEvaluateArgs} from './engine/training';\nimport {ModelEvaluateDatasetArgs, ModelFitDatasetArgs} from './engine/training_dataset';\nimport {ModelFitArgs} from './engine/training_tensors';\nimport {NotImplementedError, RuntimeError, ValueError} from './errors';\nimport {Shape} from './keras_format/common';\nimport {TrainingConfig} from './keras_format/training_config';\nimport {PyJsonDict} from './keras_format/types';\nimport {deserialize} from './layers/serialization';\nimport {Kwargs, NamedTensor} from './types';\nimport * as generic_utils from './utils/generic_utils';\nimport {convertPythonicToTs} from './utils/serialization_utils';\nimport {getExactlyOneShape} from './utils/types_utils';\n\n/**\n * Parses a JSON model configuration file and returns a model instance.\n *\n * ```js\n * // This example shows how to serialize a model using `toJSON()` and\n * // deserialize it as another model using `tf.models.modelFromJSON()`.\n * // Note: this example serializes and deserializes only the topology\n * // of the model; the weights of the loaded model will be different\n * // from those of the the original model, due to random weight\n * // initialization.\n * // To load the topology and weights of a model, use `tf.loadLayersModel()`.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.repeatVector({inputShape: [2], n: 4}));\n * // Serialize `model1` as a JSON object.\n * const model1JSON = model1.toJSON(null, false);\n * model1.summary();\n *\n * const model2 = await tf.models.modelFromJSON(model1JSON);\n * model2.summary();\n * ```\n *\n *  @param modelAndWeightsConfig JSON object or string encoding a model and\n *       weights configuration. It can also be only the topology JSON of the\n *       model, in which case the weights will not be loaded.\n *  @param custom_objects Optional dictionary mapping names\n *       (strings) to custom classes or functions to be\n *       considered during deserialization.\n * @returns A TensorFlow.js Layers `tf.LayersModel` instance (uncompiled).\n */\nexport async function modelFromJSON(\n    modelAndWeightsConfig: ModelAndWeightsConfig|PyJsonDict,\n    customObjects?: serialization.ConfigDict): Promise<LayersModel> {\n  if (!('modelTopology' in modelAndWeightsConfig)) {\n    modelAndWeightsConfig = {modelTopology: modelAndWeightsConfig};\n  }\n  modelAndWeightsConfig = modelAndWeightsConfig as ModelAndWeightsConfig;\n\n  let modelTopology = modelAndWeightsConfig.modelTopology;\n  if (modelTopology['model_config'] != null) {\n    // If the model-topology JSON contains a 'model_config' field, then it is\n    // a full model JSON (e.g., from `keras.Model.save()`), which contains\n    // not only the model's architecture in its 'model_config' field, but\n    // additional information such as the model's optimizer. We use only the\n    // 'model_config' field currently.\n    modelTopology = modelTopology['model_config'] as PyJsonDict;\n  }\n  const tsConfig =\n      convertPythonicToTs(modelTopology) as serialization.ConfigDict;\n  const model = deserialize(tsConfig, customObjects) as LayersModel;\n\n  if (modelAndWeightsConfig.weightsManifest != null) {\n    // Load the weight values keyed by the original tensor names in the model\n    // file that was loaded.  These should match the keys of the weight\n    // manifest.\n    const weightValues = await io.loadWeights(\n        modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix,\n        model.weights.map(weight => weight.originalName));\n\n    // Map the weights to the unique tensor names generated during model loading\n    const uniqueWeightValues: NamedTensorMap = {};\n    for (const weight of model.weights) {\n      uniqueWeightValues[weight.originalName] =\n          weightValues[weight.originalName];\n    }\n\n    model.loadWeights(uniqueWeightValues);\n    // Dispose temporary weight values.\n    dispose(weightValues);\n  }\n  return model;\n}\n\n/**\n * Options for loading a saved mode in TensorFlow.js format.\n */\nexport interface ModelAndWeightsConfig {\n  /**\n   * A JSON object or JSON string containing the model config.\n   *\n   * This can be either of the following two formats:\n   *   - A model archiecture-only config,  i.e., a format consistent with the\n   *     return value of`keras.Model.to_json()`.\n   *   - A full model config, containing not only model architecture, but also\n   *     training options and state, i.e., a format consistent with the return\n   *     value of `keras.models.save_model()`.\n   */\n  modelTopology: PyJsonDict;\n\n  /**\n   * A weights manifest in TensorFlow.js format.\n   */\n  weightsManifest?: io.WeightsManifestConfig;\n\n  /**\n   * Path to prepend to the paths in `weightManifest` before fetching.\n   *\n   * The path may optionally end in a slash ('/').\n   */\n  pathPrefix?: string;\n}\n\n// TODO(nielsene): Remove after: https://github.com/tensorflow/tfjs/issues/400\nexport interface ModelPredictArgs {\n  /**\n   * Optional. Batch size (Integer). If unspecified, it will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Optional. Verbosity mode. Defaults to false.\n   */\n  verbose?: boolean;\n}\n\n/**\n * Load a model composed of Layer objects, including its topology and optionally\n * weights. See the Tutorial named \"How to import a Keras Model\" for usage\n * examples.\n *\n * This method is applicable to:\n *\n * 1. Models created with the `tf.layers.*`, `tf.sequential`, and\n * `tf.model` APIs of TensorFlow.js and later saved with the\n * `tf.LayersModel.save` method.\n * 2. Models converted from Keras or TensorFlow tf.keras using the\n * [tensorflowjs_converter](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter).\n *\n * This mode is *not* applicable to TensorFlow `SavedModel`s or their converted\n * forms. For those models, use `tf.loadGraphModel`.\n *\n * Example 1. Load a model from an HTTP server.\n *\n * ```js\n * const model = await tf.loadLayersModel(\n *     'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\n * model.summary();\n * ```\n *\n * Example 2: Save `model`'s topology and weights to browser [local\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('localstorage://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 3. Saving `model`'s topology and weights to browser\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('indexeddb://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 4. Load a model from user-selected files from HTML\n * [file input\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\n *\n * ```js\n * // Note: this code snippet will not work without the HTML elements in the\n * //   page\n * const jsonUpload = document.getElementById('json-upload');\n * const weightsUpload = document.getElementById('weights-upload');\n *\n * const model = await tf.loadLayersModel(\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\n * ```\n *\n * @param pathOrIOHandler Can be either of the two formats\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\n *      the model in the canonical TensorFlow.js format. For file://\n *      (tfjs-node-only), http:// and https:// schemas, the path can be\n *      either absolute or relative. The content of the JSON file is assumed to\n *      be a JSON object with the following fields and values:\n *      - 'modelTopology': A JSON object that can be either of:\n *        1. a model architecture JSON consistent with the format of the return\n *            value of `keras.Model.to_json()`\n *        2. a full model JSON in the format of `keras.models.save_model()`.\n *      - 'weightsManifest': A TensorFlow.js weights manifest.\n *      See the Python converter function `save_model()` for more details.\n *      It is also assumed that model weights can be accessed from relative\n *      paths described by the `paths` fields in weights manifest.\n *   2. A `tf.io.IOHandler` object that loads model artifacts with its `load`\n *      method.\n * @param options Optional configuration arguments for the model loading,\n *   including:\n *   - `strict`: Require that the provided weights exactly match those required\n *     by the layers.  Default true.  Passing false means that both extra\n *     weights and missing weights will be silently ignored.\n *   - `onProgress`: A progress callback of the form:\n *     `(fraction: number) => void`. This callback can be used to monitor the\n *     model-loading process.\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\n *     loaded.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadLayersModel(\n    pathOrIOHandler: string|io.IOHandler,\n    options?: io.LoadOptions): Promise<LayersModel> {\n  if (options == null) {\n    options = {};\n  }\n  if (typeof pathOrIOHandler === 'string') {\n    const handlers = io.getLoadHandlers(pathOrIOHandler, options);\n    if (handlers.length === 0) {\n      // For backward compatibility: if no load handler can be found,\n      // assume it is a relative http path.\n      // TODO(cais): Reformat the args into a single `LoadOptions` once the core\n      // is refactored.\n      handlers.push(io.browserHTTPRequest(pathOrIOHandler, options));\n    } else if (handlers.length > 1) {\n      throw new ValueError(\n          `Found more than one (${handlers.length}) load handlers for ` +\n          `URL '${pathOrIOHandler}'`);\n    }\n    pathOrIOHandler = handlers[0];\n  }\n  return loadLayersModelFromIOHandler(pathOrIOHandler, undefined, options);\n}\n\n/**\n * Load a model and optionally its weights, using an IOHandler object.\n *\n * @param handler The instance of `IOHandler` to be used during the model\n *   loading.\n * @param customObjects Any optional custom objects to be used during model\n *   loading.\n * @param strict Whether the weight loading will be done in strict mode.\n *   Default: `true`.\n */\nexport async function loadLayersModelFromIOHandler(\n    handler: io.IOHandler, customObjects?: serialization.ConfigDict,\n    options?: io.LoadOptions): Promise<LayersModel> {\n  if (options == null) {\n    options = {};\n  }\n  if (handler.load == null) {\n    throw new ValueError(\n        'Cannot proceed with model loading because the IOHandler provided ' +\n        'does not have the `load` method implemented.');\n  }\n  const artifacts = await handler.load();\n  let modelTopology = artifacts.modelTopology as PyJsonDict;\n  if (modelTopology['model_config'] != null) {\n    modelTopology = modelTopology['model_config'] as PyJsonDict;\n  }\n\n  const strict = options.strict == null ? true : options.strict;\n  // If weights are provided and the weight-loading mode is strict, use\n  // fast weight initialization. This skips costly initializers such as\n  // 'orthogonal' and saves unnecessary computation in cases where\n  // the initialized weight values will immediately be overwritten by\n  // loaded weight values.\n  const fastWeightInit =\n      artifacts.weightData != null && artifacts.weightSpecs != null && strict;\n  const model =\n      deserialize(\n          convertPythonicToTs(modelTopology) as serialization.ConfigDict,\n          customObjects, fastWeightInit) as LayersModel;\n\n  const trainingConfig = artifacts.trainingConfig as TrainingConfig;\n  if (trainingConfig != null) {\n    model.loadTrainingConfig(trainingConfig);\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    model.setUserDefinedMetadata(artifacts.userDefinedMetadata);\n  }\n\n  // If weightData is present, load the weights into the model.\n  if (artifacts.weightData != null) {\n    // Loading weights requires weightSpecs.\n    if (artifacts.weightSpecs == null) {\n      throw new ValueError(\n          'LayersModel artifacts contains weight data, but not weight specs. ' +\n          'Therefore loading of weights cannot proceed.');\n    }\n\n    const {modelWeights, optimizerWeights} = decodeModelAndOptimizerWeights(\n        artifacts.weightData, artifacts.weightSpecs);\n    model.loadWeights(modelWeights, strict);\n\n    if (model.optimizer != null && optimizerWeights.length > 0) {\n      await model.optimizer.setWeights(optimizerWeights);\n    }\n\n    // Dispose temporary weight values.\n    dispose(modelWeights);\n    dispose(optimizerWeights.map(w => w.tensor));\n  }\n  return model;\n}\n\nfunction decodeModelAndOptimizerWeights(\n    buffer: ArrayBuffer, specs: io.WeightsManifestEntry[]):\n    {modelWeights: NamedTensorMap, optimizerWeights: NamedTensor[]} {\n  const name2Tensor = io.decodeWeights(buffer, specs);\n  const modelWeights: NamedTensorMap = {};\n  const optimizerWeights: NamedTensor[] = [];\n  specs.forEach(spec => {\n    if (spec.group === 'optimizer') {\n      optimizerWeights.push({name: spec.name, tensor: name2Tensor[spec.name]});\n    } else {\n      modelWeights[spec.name] = name2Tensor[spec.name];\n    }\n  });\n  return {modelWeights, optimizerWeights};\n}\n\n/**\n * Configuration for a Sequential model.\n */\nexport interface SequentialArgs {\n  /** Stack of layers for the model. */\n  layers?: Layer[];\n\n  /** The name of this model. */\n  name?: string;\n}\n\n/**\n * A model with a stack of layers, feeding linearly from one to the next.\n *\n * `tf.sequential` is a factory function that creates an instance of\n * `tf.Sequential`.\n *\n * ```js\n *  // Define a model for linear regression.\n *  const model = tf.sequential();\n *  model.add(tf.layers.dense({units: 1, inputShape: [1]}));\n *\n *  // Prepare the model for training: Specify the loss and the optimizer.\n *  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n *\n *  // Generate some synthetic data for training.\n *  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\n *  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n *\n *  // Train the model using the data then do inference on a data point the\n *  // model hasn't seen:\n *  await model.fit(xs, ys);\n *  model.predict(tf.tensor2d([5], [1, 1])).print();\n * ```\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class Sequential extends LayersModel {\n  /** @nocollapse */\n  static override className = 'Sequential';\n  private model: LayersModel;\n  constructor(args?: SequentialArgs) {\n    super({inputs: [], outputs: []});\n    args = args || {};\n\n    this.trainable = true;\n    this.built = false;\n\n    // Set model name.\n    this.name = (args.name != null) ? args.name : getUid('sequential_');\n\n    // Add to the model any layers passed to the constructor.\n    if (args.layers != null) {\n      for (const layer of args.layers) {\n        this.add(layer);\n      }\n    }\n  }\n\n  // Helper function to Sequential.add  Throws if the new output shape will be\n  // invalid.\n  private checkShape(layer: Layer) {\n    const shape = layer.inboundNodes[0].outputTensors[0].shape;\n    if (shape.some(x => x < 0)) {\n      throw new ValueError(\n          'Negative dimension size caused by adding layer ' +\n          `${layer.name} with input shape [` +\n          `${layer.inboundNodes[0].inputTensors[0].shape}]`);\n    }\n  }\n\n  /**\n   * Adds a layer instance on top of the layer stack.\n   *\n   * ```js\n   *  const model = tf.sequential();\n   *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));\n   *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));\n   *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));\n   *  // Note that the untrained model is random at this point.\n   *  model.predict(tf.randomNormal([10, 1])).print();\n   * ```\n   * @param layer Layer instance.\n   *\n   * @exception ValueError In case the `layer` argument does not know its\n   * input shape.\n   * @exception ValueError In case the `layer` argument has multiple output\n   *   tensors, or is already connected somewhere else (forbidden in\n   *   `Sequential` models).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  add(layer: Layer): void {\n    const isLayerModelInstance =\n        layer instanceof Sequential || layer instanceof LayersModel;\n    let modelLayer: LayersModel;\n    if (isLayerModelInstance) {\n      modelLayer = layer as LayersModel;\n      if (modelLayer.outputs.length !== 1) {\n        throw new ValueError(\n            'All layers in a Sequential model ' +\n            'should have a single output tensor. ' +\n            'For multi-output layers, ' +\n            'use the functional API.');\n      }\n      if (modelLayer.inputs.length !== 1) {\n        throw new ValueError(\n            'All layers in a Sequential model ' +\n            'should have a single input tensor. ' +\n            'For multi-input layers, ' +\n            'use the functional API.');\n      }\n    }\n\n    if (this.outputs.length === 0) {\n      // first layer in model: check that it is an input layer\n      if (layer.inboundNodes.length === 0) {\n        // create an input layer\n        if (layer.batchInputShape == null) {\n          throw new ValueError(\n              'The first layer in a Sequential model must ' +\n              'get an `inputShape` or `batchInputShape` argument.');\n        }\n        // Instantiate the input layer.\n        const x = Input({\n          batchShape: layer.batchInputShape,\n          dtype: layer.dtype,\n          name: layer.name + '_input'\n        });\n        // This will build the current layer and create the node connecting\n        // the current layer to the input layer we just created.\n        layer.apply(x);\n      }\n\n      if (isLayerModelInstance) {\n        this.outputs = modelLayer.outputs;\n        this.inputs = modelLayer.inputs;\n      } else {\n        if (layer.inboundNodes.length !== 1) {\n          throw new ValueError(\n              'A layer added to a Sequential model must not already be ' +\n              `connected somewhere else. LayersModel received layer ${\n                  layer.name} ` +\n              `which has ${layer.inboundNodes.length} pre-existing inbound ` +\n              'connections.');\n        }\n\n        if (layer.inboundNodes[0].outputTensors.length !== 1) {\n          throw new ValueError(\n              'All layers in a Sequential model ' +\n              'should have a single output tensor. ' +\n              'For multi-output layers, ' +\n              'use the functional API.');\n        }\n        this.checkShape(layer);\n        this.outputs = [layer.inboundNodes[0].outputTensors[0]];\n        this.inputs = getSourceInputs(this.outputs[0]);\n      }\n\n      this.inboundNodes = [];\n      // We create an input node, which we will keep updated\n      // as we add more layers.\n      // (This call has side effects.)\n      // tslint:disable-next-line:no-unused-expression\n      new Node({\n        outboundLayer: this,\n        inboundLayers: [],\n        nodeIndices: [],\n        tensorIndices: [],\n        inputTensors: this.inputs,\n        outputTensors: this.outputs,\n        // no model-level masking for now\n        inputMasks: generic_utils.pyListRepeat(null, this.inputs.length),\n        outputMasks: [null],\n        inputShapes: this.inputs.map(x => x.shape),\n        outputShapes: this.outputs[0].shape\n      });\n    } else {\n      const outputTensor = layer.apply(this.outputs[0]);\n      if (Array.isArray(outputTensor)) {\n        throw new TypeError(\n            'All layers in a Sequential model ' +\n            'should have a single output tensor. ' +\n            'For multi-output layers, ' +\n            'use the functional API.');\n      }\n      this.checkShape(layer);\n      this.outputs = [outputTensor as SymbolicTensor];\n      // update self.inbound_nodes\n      this.inboundNodes[0].outputTensors = this.outputs;\n      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n    }\n\n    this.layers.push(layer);\n    this.built = false;\n  }\n\n  /**\n   * Removes the last layer in the model.\n   *\n   * @exception TypeError if there are no layers in the model.\n   */\n  pop(): void {\n    if (this.layers.length === 0) {\n      throw new TypeError('There are no layers in the model.');\n    }\n\n    this.layers.pop();\n    if (this.layers.length === 0) {\n      this.outputs = [];\n      this.inboundNodes = [];\n      this.outboundNodes = [];\n    } else {\n      const lastLayerIndex = this.layers.length - 1;\n      this.layers[lastLayerIndex].outboundNodes = [];\n      this.outputs = [this.layers[lastLayerIndex].output as SymbolicTensor];\n      // update self.inbound_nodes\n      this.inboundNodes[0].outputTensors = this.outputs;\n      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.call(inputs, kwargs);\n  }\n\n  override build(inputShape?: Shape|Shape[]) {\n    // Call `getExactlyOneShape` without using its return value,\n    // to verify that exactly one input shape is provided.\n    getExactlyOneShape(inputShape);\n\n    if (this.inputs.length === 0 || this.outputs.length === 0) {\n      throw new TypeError(\n          'Sequential model cannot be built: model is empty.' +\n          ' Add some layers first.');\n    }\n    // actually create the model\n    this.model = new LayersModel({\n      inputs: this.inputs,\n      outputs: this.outputs[0],\n      name: this.name + '_model'\n    });\n    this.model.trainable = this.trainable;\n\n    // mirror model attributes\n    this.supportsMasking = this.model.supportsMasking;\n    // TODO(michaelterry): Add caches\n    this.inputLayers = this.model.inputLayers;\n    this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;\n    this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;\n    this.outputLayers = this.model.outputLayers;\n    this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;\n    this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;\n    this.nodesByDepth = this.model.nodesByDepth;\n    this.containerNodes = this.model.containerNodes;\n    this.outputNames = this.model.outputNames;\n    this.inputNames = this.model.inputNames;\n    // TODO(michaelterry): Add feedInputNames, feedInputs, if needed.\n    // TODO(michaelterry): Add callbackModel if needed.\n    this.built = true;\n  }\n\n  override countParams(): number {\n    if (!this.built) {\n      this.build();\n    }\n    return super.countParams();\n  }\n\n  /**\n   * Print a text summary of the Sequential model's layers.\n   *\n   * The summary includes\n   * - Name and type of all layers that comprise the model.\n   * - Output shape(s) of the layers\n   * - Number of weight parameters of each layer\n   * - The total number of trainable and non-trainable parameters of the\n   * model.\n   *\n   * ```js\n   * const model = tf.sequential();\n   * model.add(\n   *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));\n   * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n   *\n   * model.summary();\n   * ```\n   *\n   * @param lineLength Custom line length, in number of characters.\n   * @param positions Custom widths of each of the columns, as either\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n   *   right-most (i.e., ending) position of a column.\n   * @param printFn Custom print function. Can be used to replace the default\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\n   *   messages in the console.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  override summary(\n      lineLength?: number, positions?: number[],\n      printFn:\n          // tslint:disable-next-line:no-any\n      (message?: any, ...optionalParams: any[]) => void = console.log) {\n    if (!this.built) {\n      this.build();\n    }\n    super.summary(lineLength, positions, printFn);\n  }\n\n  /**\n   * Sets the weights of the model.\n   *\n   * @param weights Should be a list of Tensors with shapes and types matching\n   *   the output of `model.getWeights()`.\n   */\n  override setWeights(weights: Tensor[]): void {\n    if (this.model == null) {\n      this.build();\n    }\n    this.model.setWeights(weights);\n  }\n\n  /**\n   * Returns the loss value & metrics values for the model in test mode.\n   *\n   * Loss and metrics are specified during `compile()`, which needs to happen\n   * before calls to `evaluate()`.\n   *\n   * Computation is done in batches.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *   batchSize: 4,\n   * });\n   * result.print();\n   * ```\n   *\n   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple inputs.\n   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple outputs.\n   * @param args A `ModelEvaluateConfig`, containing optional fields.\n   *\n   * @return `Scalar` test loss (if the model has a single output and no\n   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n   *   and/or metrics). The attribute `model.metricsNames`\n   *   will give you the display labels for the scalar outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  override evaluate(\n      x: Tensor|Tensor[], y: Tensor|Tensor[],\n      args: ModelEvaluateArgs = {}): Scalar|Scalar[] {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before being used.');\n    }\n    return this.model.evaluate(x, y, args);\n  }\n\n  // TODO(cais): Add code snippet below once real dataset objects are\n  //   available.\n  /**\n   * Evaluate model using a dataset object.\n   *\n   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for evaluation. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g.\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs. Of the two items in the array, the\n   *   first is the input feature(s) and the second is the output target(s).\n   * @param args A configuration object for the dataset-based evaluation.\n   * @returns Loss and metric values as an Array of `Scalar` objects.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  override async evaluateDataset(dataset: Dataset<{}>,\n      args: ModelEvaluateDatasetArgs): Promise<Scalar|Scalar[]> {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before being used.');\n    }\n    return this.model.evaluateDataset(dataset, args);\n  }\n\n  /**\n   * Generates output predictions for the input samples.\n   *\n   * Computation is done in batches.\n   *\n   * Note: the \"step\" mode of predict() is currently not supported.\n   *   This is because the TensorFlow.js core backend is imperative only.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predict(tf.ones([2, 10])).print();\n   * ```\n   *\n   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n   *   the model has multiple inputs.\n   * @param conifg A `ModelPredictConfig` object containing optional fields.\n   *\n   * @return `tf.Tensor`(s) of predictions.\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and the model's expectations, or in case a stateful model receives a\n   *   number of samples that is not a multiple of the batch size.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  override predict(x: Tensor|Tensor[], args: ModelPredictArgs = {}):\n      Tensor|Tensor[] {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.predict(x, args);\n  }\n\n  /**\n   * Returns predictions for a single batch of samples.\n   *\n   * @param x: Input samples, as a Tensor, or list of Tensors (if the model\n   *   has multiple inputs).\n   * @return Tensor(s) of predictions\n   */\n  override predictOnBatch(x: Tensor): Tensor|Tensor[] {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.predictOnBatch(x);\n  }\n\n  /**\n   * See `LayersModel.compile`.\n   *\n   * @param args\n   */\n  override compile(args: ModelCompileArgs): void {\n    this.build();\n    this.model.compile(args);\n    this.optimizer_ = this.model.optimizer;\n    // tslint:disable-next-line:no-any\n    this.isOptimizerOwned = (this.model as any).isOptimizerOwned;\n    this.loss = this.model.loss;\n    this.metrics = this.model.metrics;\n    // TODO(cais): Add this.lossWeights, this.sampleWeightMode,\n    //   this.weightedMetrics, this.targets.\n    this.metricsTensors = this.model.metricsTensors;\n    this.metricsNames = this.model.metricsNames;\n    // TODO(cais): Add sampleWeights.\n  }\n\n  override get optimizer(): Optimizer {\n    return this.model == null ? undefined : this.model.optimizer;\n  }\n\n  override set optimizer(optimizer: Optimizer) {\n    this.model.optimizer = optimizer;\n  }\n\n  /**\n   * Trains the model for a fixed number of epochs (iterations on a dataset).\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *   batchSize: 4,\n   *   epochs: 3\n   * });\n   * console.log(history.history.loss[0]);\n   * ```\n   *\n   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n   * model has multiple inputs. If all inputs in the model are named, you can\n   * also pass a dictionary mapping input names to `tf.Tensor`s.\n   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n   * the model has multiple outputs. If all outputs in the model are named, you\n   *  can also pass a dictionary mapping output names to `tf.Tensor`s.\n   * @param args  A `ModelFitConfig`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and what the model expects.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  override async fit(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      args: ModelFitArgs = {}): Promise<History> {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before ' +\n          'being used.');\n    }\n    return this.model.fit(x, y, args);\n  }\n\n  /**\n   * Trains the model using a dataset object.\n   *\n   * ```js\n   * const xArray = [\n   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n   * ];\n   * const yArray = [1, 1, 1, 1];\n   * // Create a dataset from the JavaScript array.\n   * const xDataset = tf.data.array(xArray);\n   * const yDataset = tf.data.array(yArray);\n   * // Zip combines the `x` and `y` Datasets into a single Dataset, the\n   * // iterator of which will return an object containing of two tensors,\n   * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle\n   * // four such samples into a single object, with the same keys now pointing\n   * // to tensors that hold 4 examples, organized along the batch dimension.\n   * // The call to `shuffle(4)` causes each iteration through the dataset to\n   * // happen in a different order.  The size of the shuffle window is 4.\n   * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})\n   *     .batch(4)\n   *     .shuffle(4);\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const history = await model.fitDataset(xyDataset, {\n   *   epochs: 4,\n   *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}\n   * });\n   * ```\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected to\n   *   generate a dataset iterator object, the `next()` method of which is\n   *   expected to produce data batches for evaluation. The return value of the\n   *   `next()` call ought to contain a boolean `done` field and a `value`\n   *   field.\n   *\n   *   The `value` field is expected to be an object of with fields\n   *   `xs` and `ys`, which point to the feature tensor and the target tensor,\n   *   respectively. This case is for models with exactly one input and one\n   *   output (e.g. a sequential model). For example:\n   *   ```js\n   *   {value: {xs: xsTensor, ys: ysTensor}, done: false}\n   *   ```\n   *\n   *   If the model has multiple inputs, the `xs` field of `value` should\n   *   be an object mapping input names to their respective feature tensors.\n   *   For example:\n   *   ```js\n   *   {\n   *     value: {\n   *       xs: {\n   *         input_1: xsTensor1,\n   *         input_2: xsTensor2\n   *       },\n   *       ys: ysTensor\n   *     },\n   *     done: false\n   *   }\n   *   ```\n   *   If the model has multiple outputs, the `ys` field of `value` should\n   *   be an object mapping output names to their respective target tensors.\n   *   For example:\n   *   ```js\n   *   {\n   *     value: {\n   *       xs: xsTensor,\n   *       ys: {\n   *         output_1: ysTensor1,\n   *         output_2: ysTensor2\n   *       },\n   *     },\n   *     done: false\n   *   }\n   *   ```\n   * @param args A `ModelFitDatasetArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  override async fitDataset<T>(dataset: Dataset<T>,\n      args: ModelFitDatasetArgs<T>): Promise<History> {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before ' +\n          'being used.');\n    }\n    return this.model.fitDataset(dataset, args);\n  }\n\n  /**\n   * Runs a single gradient update on a single batch of data.\n   *\n   * This method differs from `fit()` and `fitDataset()` in the following\n   * regards:\n   *   - It operates on exactly one batch of data.\n   *   - It returns only the loss and metric values, instead of\n   *     returning the batch-by-batch loss and metric values.\n   *   - It doesn't support fine-grained options such as verbosity and\n   *     callbacks.\n   *\n   * @param x Input data. It could be one of the following:\n   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n   *     multiple inputs).\n   *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n   *     model has named inputs).\n   * @param y Target data. It could be either a `tf.Tensor` or multiple\n   *   `tf.Tensor`s. It should be consistent with `x`.\n   * @returns Training loss or losses (in case the model has\n   *   multiple outputs), along with metrics (if any), as numbers.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  override async trainOnBatch(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|\n      {[inputName: string]: Tensor}): Promise<number|number[]> {\n    return this.model.trainOnBatch(x, y);\n  }\n\n  /* See parent class for JsDoc */\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict,\n      fastWeightInit = false): T {\n    let configArray: serialization.ConfigDictArray;\n    let extraModelConfig: serialization.ConfigDict = {};\n    if (config instanceof Array) {\n      if (!(config[0].className != null) ||\n          config[0]['className'] === 'Merge') {\n        throw new ValueError('Legacy serialization format not supported yet.');\n      }\n      configArray = config;\n    } else {\n      util.assert(\n          config['layers'] != null,\n          () =>\n              `When the config data for a Sequential model is not an Array, ` +\n              `it must be an Object that contains the 'layers' field.`);\n      configArray = config['layers'] as serialization.ConfigDictArray;\n      delete config['layers'];\n      extraModelConfig = config;\n    }\n\n    const model = new cls(extraModelConfig);\n    if (!(model instanceof Sequential)) {\n      throw new NotImplementedError(\n          `Sequential.fromConfig called on non-Sequential input: ${model}`);\n    }\n    for (const conf of configArray) {\n      const customObjects: serialization.ConfigDict = undefined;\n      const layer = deserialize(\n                        conf as serialization.ConfigDict, customObjects,\n                        fastWeightInit) as Layer;\n      if (fastWeightInit) {\n        layer.setFastWeightInitDuringBuild(true);\n      }\n      model.add(layer);\n    }\n    return model;\n  }\n\n  /**\n   * Setter used for force stopping of LayersModel.fit() (i.e., training).\n   *\n   * Example:\n   *\n   * ```js\n   * const model = tf.sequential();\n   * model.add(tf.layers.dense({units: 1, inputShape: [10]}));\n   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n   * const xs = tf.ones([8, 10]);\n   * const ys = tf.zeros([8, 1]);\n   *\n   * const history = await model.fit(xs, ys, {\n   *   epochs: 10,\n   *   callbacks: {\n   *     onEpochEnd: async (epoch, logs) => {\n   *       if (epoch === 2) {\n   *         model.stopTraining = true;\n   *       }\n   *     }\n   *   }\n   * });\n   *\n   * // There should be only 3 values in the loss array, instead of 10 values,\n   * // due to the stopping after 3 epochs.\n   * console.log(history.history.loss);\n   * ```\n   */\n  override set stopTraining(stop: boolean) {\n    // TODO(cais): When refactoring to remove the composition pattern happens,\n    // remove this method overriding.\n    if (this.model == null) {\n      throw new ValueError(\n          'Cannot set the stopTraining property of a sequential model before ' +\n          'it is compiled.');\n    }\n    this.model.stopTraining = stop;\n  }\n\n  override get stopTraining(): boolean {\n    if (this.model == null) {\n      throw new ValueError(\n          'Cannot get the stopTraining property of a sequential model before ' +\n          'it is compiled.');\n    }\n    return this.model.stopTraining;\n  }\n\n  // TODO(cais): Override get trainableWeights() here\n\n  // tslint:disable-next-line:no-any\n  override getConfig(): any {\n    // NOTE(cais): We override the return type of getConfig() to `any` here,\n    //   because the `Sequential` class is a special case among `Container`\n    //   subtypes in that its getConfig() method returns an Array (not a\n    //   dict).\n    const layers: serialization.ConfigDict[] = [];\n    for (const layer of this.layers) {\n      const dict: serialization.ConfigDict = {};\n      dict['className'] = layer.getClassName();\n      dict['config'] = layer.getConfig();\n      layers.push(dict);\n    }\n    return {name: this.name, layers};\n  }\n}\nserialization.registerClass(Sequential);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Exported functions.\n */\n\nimport {BaseCallbackConstructor, CallbackConstructorRegistry} from './base_callbacks';\nimport {ContainerArgs} from './engine/container';\nimport {Input, InputConfig,} from './engine/input_layer';\nimport {SymbolicTensor} from './engine/topology';\nimport {LayersModel} from './engine/training';\nimport {Sequential, SequentialArgs} from './models';\n\nexport {loadLayersModel} from './models';\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// LayersModel and related factory methods.\n\n/**\n * A model is a data structure that consists of `Layers` and defines inputs\n * and outputs.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.model` is more generic, supporting an arbitrary graph (without\n * cycles) of layers. `tf.sequential` is less generic and supports only a linear\n * stack of layers.\n *\n * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers\n * are used to wire input(s) to output(s).\n *\n * For example, the following code snippet defines a model consisting of\n * two `dense` layers, with 10 and 4 units, respectively.\n *\n * ```js\n * // Define input, which has a size of 5 (not including batch dimension).\n * const input = tf.input({shape: [5]});\n *\n * // First dense layer uses relu activation.\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n * // Second dense layer uses softmax activation.\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\n *\n * // Obtain the output symbolic tensor by applying the layers on the input.\n * const output = denseLayer2.apply(denseLayer1.apply(input));\n *\n * // Create the model based on the inputs.\n * const model = tf.model({inputs: input, outputs: output});\n *\n * // The model can be used for training, evaluation and prediction.\n * // For example, the following line runs prediction with the model on\n * // some fake data.\n * model.predict(tf.ones([2, 5])).print();\n * ```\n * See also:\n *   `tf.sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nexport function model(args: ContainerArgs): LayersModel {\n  return new LayersModel(args);\n}\n\n/**\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\n * outputs of one layer are the inputs to the next layer, i.e. the model\n * topology is a simple 'stack' of layers, with no branching or skipping.\n *\n * This means that the first layer passed to a `tf.Sequential` model should have\n * a defined input shape. What that means is that it should have received an\n * `inputShape` or `batchInputShape` argument, or for some type of layers\n * (recurrent, Dense...) an `inputDim` argument.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\n * `tf.model` is more generic and supports an arbitrary graph (without\n * cycles) of layers.\n *\n * Examples:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have an input shape defined.\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output, which equals\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n * // 2nd is the output size of the model's last layer.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * It is also possible to specify a batch size (with potentially undetermined\n * batch dimension, denoted by \"null\") for the first layer using the\n * `batchInputShape` key. The following example is equivalent to the above:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have a defined input shape\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * You can also use an `Array` of already-constructed `Layer`s to create\n * a `tf.Sequential` model:\n *\n * ```js\n * const model = tf.sequential({\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n *            tf.layers.dense({units: 4})]\n * });\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nexport function sequential(config?: SequentialArgs): Sequential {\n  return new Sequential(config);\n}\n\n/**\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\n *\n * Users should call the `input` factory function for\n * consistency with other generator functions.\n *\n * Example:\n *\n * ```js\n * // Defines a simple logistic regression model with 32 dimensional input\n * // and 3 dimensional output.\n * const x = tf.input({shape: [32]});\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\n * const model = tf.model({inputs: x, outputs: y});\n * model.predict(tf.ones([2, 32])).print();\n * ```\n *\n * Note: `input` is only necessary when using `model`. When using\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\n * as the first layer.\n *\n * @doc {heading: 'Models', subheading: 'Inputs'}\n */\nexport function input(config: InputConfig): SymbolicTensor {\n  return Input(config);\n}\n\nexport function registerCallbackConstructor(\n    verbosityLevel: number,\n    callbackConstructor: BaseCallbackConstructor): void {\n  CallbackConstructorRegistry.registerCallbackConstructor(\n      verbosityLevel, callbackConstructor);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport {ActivationIdentifier} from './keras_format/activation_config';\nimport {deserializeKerasObject} from './utils/generic_utils';\n\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\nexport abstract class Activation extends serialization.Serializable {\n  abstract apply(tensor: Tensor, axis?: number): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\nexport class Elu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'elu';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x: Input.\n   * @param alpha: Scaling factor the negative section.\n   * @return Output of the ELU activation.\n   */\n  apply(x: Tensor, alpha = 1): Tensor {\n    return K.elu(x, alpha);\n  }\n}\nserialization.registerClass(Elu);\n\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\nexport class Selu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'selu';\n  apply(x: Tensor): Tensor {\n    return tfc.selu(x);\n  }\n}\nserialization.registerClass(Selu);\n\n/**\n *  Rectified linear unit\n */\nexport class Relu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'relu';\n  apply(x: Tensor): Tensor {\n    return tfc.relu(x);\n  }\n}\nserialization.registerClass(Relu);\n\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\nexport class Relu6 extends Activation {\n  /** @nocollapse */\n  static readonly className = 'relu6';\n  apply(x: Tensor): Tensor {\n    return tidy(() => tfc.minimum(6.0, tfc.relu(x)));\n  }\n}\nserialization.registerClass(Relu6);\n\n//* Linear activation (no-op) */\nexport class Linear extends Activation {\n  /** @nocollapse */\n  static readonly className = 'linear';\n  apply(x: Tensor): Tensor {\n    return x;\n  }\n}\nserialization.registerClass(Linear);\n\n/**\n * Sigmoid activation function.\n */\nexport class Sigmoid extends Activation {\n  /** @nocollapse */\n  static readonly className = 'sigmoid';\n  apply(x: Tensor): Tensor {\n    return tfc.sigmoid(x);\n  }\n}\nserialization.registerClass(Sigmoid);\n\n/**\n * Segment-wise linear approximation of sigmoid.\n */\nexport class HardSigmoid extends Activation {\n  /** @nocollapse */\n  static readonly className = 'hardSigmoid';\n  apply(x: Tensor): Tensor {\n    return K.hardSigmoid(x);\n  }\n}\nserialization.registerClass(HardSigmoid);\n\n/**\n * Softplus activation function.\n */\nexport class Softplus extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softplus';\n  apply(x: Tensor): Tensor {\n    return tfc.softplus(x);\n  }\n}\nserialization.registerClass(Softplus);\n\n/**\n * Softsign activation function.\n */\nexport class Softsign extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softsign';\n  apply(x: Tensor): Tensor {\n    return K.softsign(x);\n  }\n}\nserialization.registerClass(Softsign);\n\n/**\n * Hyperbolic tangent function.\n */\nexport class Tanh extends Activation {\n  /** @nocollapse */\n  static readonly className = 'tanh';\n  apply(x: Tensor): Tensor {\n    return tfc.tanh(x);\n  }\n}\nserialization.registerClass(Tanh);\n\n/**\n * Softmax activation function\n */\nexport class Softmax extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softmax';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x: Tensor, axis: number = (-1)): Tensor {\n    return tfc.softmax(x, axis);\n  }\n}\nserialization.registerClass(Softmax);\n\n/**\n * Log softmax activation function\n */\nexport class LogSoftmax extends Activation {\n  /** @nocollapse */\n  static readonly className = 'logSoftmax';\n  /**\n   * Calculate the activation function of log softmax:\n   * log( exp(x_i) / sum(exp(x)) )\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x: Tensor, axis: number = (-1)): Tensor {\n    return tfc.logSoftmax(x, axis);\n  }\n}\nserialization.registerClass(LogSoftmax);\n\n/**\n * Swish activation function\n */\nexport class Swish extends Activation {\n  /** @nocollapse */\n  static readonly className = 'swish';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @param alpha Scaling factor for the sigmoid function.\n   * @returns a Tensor of the same shape as x\n   */\n  apply(x: Tensor, alpha = 1): Tensor {\n    return tidy(() => tfc.mul(tfc.sigmoid(tfc.mul(x, alpha)), x));\n  }\n}\nserialization.registerClass(Swish);\n\n/**\n * Mish activation function\n */\nexport class Mish extends Activation {\n  /** @nocollapse */\n  static readonly className = 'mish';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @returns a Tensor of the same shape as x\n   */\n  apply(x: Tensor): Tensor {\n    return tidy(() => tfc.mul(x, tfc.tanh(tfc.softplus(x))));\n  }\n}\nserialization.registerClass(Mish);\n\nexport function serializeActivation(activation: Activation): string {\n  return activation.getClassName();\n}\n\nexport function deserializeActivation(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Activation {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'activation');\n}\n\nexport function getActivation(identifier: ActivationIdentifier|\n                              serialization.ConfigDict|Activation): Activation {\n  if (identifier == null) {\n    const config: serialization.ConfigDict = {};\n    config['className'] = 'linear';\n    config['config'] = {};\n    return deserializeActivation(config);\n  }\n  if (typeof identifier === 'string') {\n    const config: serialization.ConfigDict = {};\n    config['className'] = identifier;\n    config['config'] = {};\n    return deserializeActivation(config);\n  } else if (identifier instanceof Activation) {\n    return identifier;\n  } else {\n    return deserializeActivation(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* original source: keras/regularizers.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {abs, add, Scalar, serialization, sum, Tensor, tidy, zeros} from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\nfunction assertObjectArgs(args: L1Args|L2Args|L1L2Args): void {\n  if (args != null && typeof args !== 'object') {\n    throw new Error(\n        `Argument to L1L2 regularizer's constructor is expected to be an ` +\n        `object, but received: ${args}`);\n  }\n}\n\n/**\n * Regularizer base class.\n */\nexport abstract class Regularizer extends serialization.Serializable {\n  abstract apply(x: Tensor): Scalar;\n}\n\nexport interface L1L2Args {\n  /** L1 regularization rate. Defaults to 0.01. */\n  l1?: number;\n  /** L2 regularization rate. Defaults to 0.01. */\n  l2?: number;\n}\n\nexport interface L1Args {\n  /** L1 regularization rate. Defaults to 0.01. */\n  l1: number;\n}\n\nexport interface L2Args {\n  /** L2 regularization rate. Defaults to 0.01. */\n  l2: number;\n}\n\nexport class L1L2 extends Regularizer {\n  /** @nocollapse */\n  static className = 'L1L2';\n\n  private readonly l1: number;\n  private readonly l2: number;\n  private readonly hasL1: boolean;\n  private readonly hasL2: boolean;\n  constructor(args?: L1L2Args) {\n    super();\n\n    assertObjectArgs(args);\n\n    this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    this.hasL1 = this.l1 !== 0;\n    this.hasL2 = this.l2 !== 0;\n  }\n\n  /**\n   * Porting note: Renamed from __call__.\n   * @param x Variable of which to calculate the regularization score.\n   */\n  apply(x: Tensor): Scalar {\n    return tidy(() => {\n      let regularization: Tensor = zeros([1]);\n      if (this.hasL1) {\n        regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n      }\n      if (this.hasL2) {\n        regularization =\n            add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n      }\n      return tfc.reshape(regularization, []);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {'l1': this.l1, 'l2': this.l2};\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    return new cls({l1: config['l1'] as number, l2: config['l2'] as number});\n  }\n}\nserialization.registerClass(L1L2);\n\nexport function l1(args?: L1Args) {\n  assertObjectArgs(args);\n  return new L1L2({l1: args != null ? args.l1 : null, l2: 0});\n}\n\nexport function l2(args: L2Args) {\n  assertObjectArgs(args);\n  return new L1L2({l2: args != null ? args.l2 : null, l1: 0});\n}\n\n/** @docinline */\nexport type RegularizerIdentifier = 'l1l2'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in RegularizerIdentifier]: string} = {\n      'l1l2': 'L1L2'\n    };\n\nexport function serializeRegularizer(constraint: Regularizer):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeRegularizer(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Regularizer {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'regularizer');\n}\n\nexport function getRegularizer(identifier: RegularizerIdentifier|\n                               serialization.ConfigDict|\n                               Regularizer): Regularizer {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n *  Advanced activation layers.\n */\n\nimport {cast, clipByValue, elu, greater, leakyRelu, mul, prelu, relu, serialization, Tensor} from '@tensorflow/tfjs-core';\n\nimport {Softmax as softmaxActivation} from '../activations';\nimport {Constraint, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface ReLULayerArgs extends LayerArgs {\n  /**\n   * Float, the maximum output value.\n   */\n  maxValue?: number;\n}\n\nexport class ReLU extends Layer {\n  /** @nocollapse */\n  static className = 'ReLU';\n  maxValue: number;\n\n  constructor(args?: ReLULayerArgs) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n    if (args != null) {\n      this.maxValue = args.maxValue;\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    inputs = getExactlyOneTensor(inputs);\n    let output = relu(inputs);\n    if (this.maxValue != null) {\n      output = clipByValue(output, 0, this.maxValue);\n    }\n    return output;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {maxValue: this.maxValue};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ReLU);\n\nexport declare interface LeakyReLULayerArgs extends LayerArgs {\n  /**\n   * Float `>= 0`. Negative slope coefficient. Defaults to `0.3`.\n   */\n  alpha?: number;\n}\n\nexport class LeakyReLU extends Layer {\n  /** @nocollapse */\n  static className = 'LeakyReLU';\n  readonly alpha: number;\n\n  readonly DEFAULT_ALPHA = 0.3;\n\n  constructor(args?: LeakyReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return leakyRelu(x, this.alpha);\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {alpha: this.alpha};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LeakyReLU);\n\nexport declare interface PReLULayerArgs extends LayerArgs {\n  /**\n   * Initializer for the learnable alpha.\n   */\n  alphaInitializer?: Initializer|InitializerIdentifier;\n\n  /**\n   * Regularizer for the learnable alpha.\n   */\n  alphaRegularizer?: Regularizer;\n\n  /**\n   * Constraint for the learnable alpha.\n   */\n  alphaConstraint?: Constraint;\n\n  /**\n   * The axes along which to share learnable parameters for the activation\n   * function. For example, if the incoming feature maps are from a 2D\n   * convolution with output shape `[numExamples, height, width, channels]`,\n   * and you wish to share parameters across space (height and width) so that\n   * each filter channels has only one set of parameters, set\n   * `shared_axes: [1, 2]`.\n   */\n  sharedAxes?: number|number[];\n}\n\nexport class PReLU extends Layer {\n  /** @nocollapse */\n  static className = 'PReLU';\n  private readonly alphaInitializer: Initializer;\n  private readonly alphaRegularizer: Regularizer;\n  private readonly alphaConstraint: Constraint;\n  private readonly sharedAxes: number[];\n  private alpha: LayerVariable;\n\n  readonly DEFAULT_ALPHA_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args?: PReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    this.supportsMasking = true;\n    this.alphaInitializer =\n        getInitializer(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);\n    this.alphaRegularizer = getRegularizer(args.alphaRegularizer);\n    this.alphaConstraint = getConstraint(args.alphaConstraint);\n    if (args.sharedAxes == null) {\n      this.sharedAxes = null;\n    } else if (Array.isArray(args.sharedAxes)) {\n      this.sharedAxes = args.sharedAxes;\n    } else if (typeof args.sharedAxes === 'number') {\n      this.sharedAxes = [args.sharedAxes];\n    } else {\n      throw new ValueError(\n          `Expected sharedAxes to be a number or an array of numbers, ` +\n          `but got ${args.sharedAxes}`);\n    }\n  }\n\n  override build(inputShape: Shape|Shape[]) {\n    inputShape = getExactlyOneShape(inputShape);\n    const paramShape: Shape = inputShape.slice(1);\n    if (this.sharedAxes != null) {\n      for (const i of this.sharedAxes) {\n        paramShape[i - 1] = 1;\n      }\n    }\n    this.alpha = this.addWeight(\n        'alpha', paramShape, 'float32', this.alphaInitializer,\n        this.alphaRegularizer, true, this.alphaConstraint);\n    // Set input spec.\n    const axes: {[axis: number]: number} = {};\n    if (this.sharedAxes != null) {\n      for (let i = 1; i < inputShape.length; ++i) {\n        axes[i] = inputShape[i];\n      }\n    }\n    this.inputSpec = [new InputSpec({\n      ndim: inputShape.length,\n      axes,\n    })];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    inputs = getExactlyOneTensor(inputs);\n    return prelu(inputs, this.alpha.read());\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      alphaInitializer: serializeInitializer(this.alphaInitializer),\n      alphaRegularizer: serializeRegularizer(this.alphaRegularizer),\n      alphaConstraint: serializeConstraint(this.alphaConstraint),\n      sharedAxes: this.sharedAxes\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(PReLU);\n\nexport declare interface ELULayerArgs extends LayerArgs {\n  /**\n   * Float `>= 0`. Negative slope coefficient. Defaults to `1.0`.\n   */\n  alpha?: number;\n}\n\nexport class ELU extends Layer {\n  /** @nocollapse */\n  static className = 'ELU';\n  readonly alpha: number;\n\n  readonly DEFAULT_ALPHA = 1.0;\n\n  constructor(args?: ELULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) {\n      throw new NotImplementedError(\n          `Non-default alpha value (${args.alpha}) is not supported by the ` +\n          `ELU layer yet.`);\n    }\n\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return elu(x);\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {alpha: this.alpha};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ELU);\n\nexport declare interface ThresholdedReLULayerArgs extends LayerArgs {\n  /**\n   * Float >= 0. Threshold location of activation.\n   */\n  theta?: number;\n}\n\nexport class ThresholdedReLU extends Layer {\n  /** @nocollapse */\n  static className = 'ThresholdedReLU';\n  readonly theta: number;\n\n  readonly DEFAULT_THETA = 1.0;\n\n  constructor(args?: ThresholdedReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return mul(x, cast(greater(x, this.theta), 'float32'));\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {theta: this.theta};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ThresholdedReLU);\n\nexport declare interface SoftmaxLayerArgs extends LayerArgs {\n  /**\n   * Integer, axis along which the softmax normalization is applied.\n   * Defaults to `-1` (i.e., the last axis).\n   */\n  axis?: number;\n}\n\nexport class Softmax extends Layer {\n  /** @nocollapse */\n  static className = 'Softmax';\n  readonly axis: number;\n  readonly softmax: (t: Tensor, a?: number) => Tensor;\n  readonly DEFAULT_AXIS = 1.0;\n\n  constructor(args?: SoftmaxLayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n    this.softmax = new softmaxActivation().apply;\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return this.softmax(x, this.axis);\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {axis: this.axis};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Softmax);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {ValueError} from '../errors';\nimport {PaddingMode} from '../keras_format/common';\n\nimport {pyListRepeat} from './generic_utils';\nimport {isInteger, max} from './math_utils';\n\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\nexport function normalizeArray(\n    value: number|number[], n: number, name: string): number[] {\n  if (typeof value === 'number') {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(\n          `The ${name} argument must be an integer or tuple of ${n} integers.` +\n          ` Received: ${value.length} elements.`);\n    }\n    for (let i = 0; i < n; ++i) {\n      const singleValue = value[i];\n      if (!isInteger(singleValue)) {\n        throw new ValueError(\n            `The ${name} argument must be an integer or tuple of ${n}` +\n            ` integers. Received: ${JSON.stringify(value)} including a` +\n            ` non-integer number ${singleValue}`);\n      }\n    }\n    return value;\n  }\n}\n\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\nexport function convOutputLength(\n    inputLength: number, filterSize: number, padding: PaddingMode,\n    stride: number, dilation = 1): number {\n  if (inputLength == null) {\n    return inputLength;\n  }\n  const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  let outputLength: number;\n  if (padding === 'same') {\n    outputLength = inputLength;\n  } else {  // VALID\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n  return Math.floor((outputLength + stride - 1) / stride);\n}\n\nexport function deconvLength(\n    dimSize: number, strideSize: number, kernelSize: number,\n    padding: PaddingMode): number {\n  if (dimSize == null) {\n    return null;\n  }\n\n  if (padding === 'valid') {\n    dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n  } else if (padding === 'same') {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(`Unsupport padding mode: ${padding}.`);\n  }\n  return dimSize;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {fused, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, tidy} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkInterpolationFormat, checkPaddingMode} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, InterpolationFormat, PaddingMode, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength, deconvLength, normalizeArray} from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]);  // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    // Check the ranks of x, kernel and bias.\n    if (x.shape.length !== 3) {\n      throw new ValueError(\n          `The input of a conv1dWithBias operation should be 3, but is ` +\n          `${x.shape.length} instead.`);\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(\n          `The kernel for a conv1dWithBias operation should be 3, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(\n          `The bias for a conv1dWithBias operation should be 1, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    // TODO(cais): Support CAUSAL padding mode.\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]);  // NCW -> NWC.\n    }\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    let y: Tensor = tfc.conv1d(\n        x as Tensor2D | Tensor3D, kernel as Tensor3D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    return y;\n  });\n}\n\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(\n    x: Tensor, kernel: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(\n    x: Tensor, kernel: Tensor, strides = [1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat, dilationRate?: [number, number],\n    activation: fused.Activation = null): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.fused.conv2d({\n      x: y as Tensor3D | Tensor4D,\n      filter: kernel as Tensor4D,\n      strides: strides as [number, number],\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(\n    x: Tensor, kernel: Tensor, strides = [1, 1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    let y = preprocessConv3DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv3dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.conv3d(\n        y as Tensor4D | tfc.Tensor<tfc.Rank.R5>,\n        kernel as tfc.Tensor<tfc.Rank.R5>, strides as [number, number, number],\n        padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias as Tensor1D);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\n\n/**\n * Base LayerConfig for depthwise and non-depthwise convolutional layers.\n */\nexport declare interface BaseConvLayerArgs extends LayerArgs {\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two or three integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number]|[number, number, number];\n\n  /**\n   * Activation function of the layer.\n   *\n   * If you don't specify the activation, none is applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector. Defaults to `true`.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the convolutional kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the convolutional kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n/**\n * LayerConfig for non-depthwise convolutional layers.\n * Applies to non-depthwise convolution of all ranks (e.g, Conv1D, Conv2D,\n * Conv3D).\n */\nexport declare interface ConvLayerArgs extends BaseConvLayerArgs {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n}\n\n/**\n * Abstract convolution layer.\n */\nexport abstract class BaseConv extends Layer {\n  protected readonly rank: number;\n  protected readonly kernelSize: number[];\n  protected readonly strides: number[];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n  protected readonly activation: Activation;\n  protected readonly useBias: boolean;\n  protected readonly dilationRate: number[];\n\n  // Bias-related members are here because all convolution subclasses use the\n  // same configuration parmeters to control bias.  Kernel-related members\n  // are in subclass `Conv` because some subclasses use different parameters to\n  // control kernel properties, for instance, `DepthwiseConv2D` uses\n  // `depthwiseInitializer` instead of `kernelInitializer`.\n  protected readonly biasInitializer?: Initializer;\n  protected readonly biasConstraint?: Constraint;\n  protected readonly biasRegularizer?: Regularizer;\n\n  protected bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(rank: number, args: BaseConvLayerArgs) {\n    super(args as LayerArgs);\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(\n          `Convolution layer for rank other than 1, 2, or 3 (${\n              this.rank}) is ` +\n          `not implemented yet.`);\n    }\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(\n        args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(\n        args.dilationRate == null ? 1 : args.dilationRate, rank,\n        'dilationRate');\n    if (this.rank === 1 &&\n        (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n      throw new ValueError(\n          `dilationRate must be a number or an array of a single number ` +\n          `for 1D convolution, but received ` +\n          `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(\n            `dilationRate must be a number or array of two numbers for 2D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate =\n            [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(\n            `dilationRate must be a number or array of three numbers for 3D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  protected static verifyArgs(args: BaseConvLayerArgs) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert(\n        'kernelSize' in args, `required key 'kernelSize' not in config`);\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(\n          `BaseConv expects config.kernelSize to be number or number[] with ` +\n          `length 1, 2, or 3, but received ${\n              JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport abstract class Conv extends BaseConv {\n  protected readonly filters: number;\n\n  protected kernel: LayerVariable = null;\n\n  // Bias-related properties are stored in the superclass `BaseConv` because all\n  // convolution subclasses use the same configuration parameters to control\n  // bias. Kernel-related properties are defined here rather than in the\n  // superclass because some convolution subclasses use different names and\n  // configuration parameters for their internal kernel state.\n  protected readonly kernelInitializer?: Initializer;\n  protected readonly kernelConstraint?: Constraint;\n  protected readonly kernelRegularizer?: Regularizer;\n\n  constructor(rank: number, args: ConvLayerArgs) {\n    super(rank, args as BaseConvLayerArgs);\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{ndim: this.rank + 2, axes: {[channelAxis]: inputDim}}];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs: Tensor;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(\n          this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(\n            inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n            this.dataFormat, this.dilationRate as [number, number],\n            fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides[0],\n              this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number]);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number, number]);\n        } else {\n          throw new NotImplementedError(\n              'convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace: number[] = [];\n    const space = (this.dataFormat === 'channelsLast') ?\n        inputShape.slice(1, inputShape.length - 1) :\n        inputShape.slice(2);\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(\n          space[i], this.kernelSize[i], this.padding, this.strides[i],\n          typeof this.dilationRate === 'number' ? this.dilationRate :\n                                                  this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n    return outputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' ||\n        args.filters < 1) {\n      throw new ValueError(\n          `Convolution layer expected config.filters to be a 'number' > 0 ` +\n          `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n}\n\nexport class Conv2D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv2D';\n  constructor(args: ConvLayerArgs) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if ((typeof args.kernelSize !== 'number') &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(\n          `Conv2D expects config.kernelSize to be number or number[] with ` +\n          `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv2D);\n\nexport class Conv3D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv3D';\n  constructor(args: ConvLayerArgs) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) &&\n            (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(\n            `Conv3D expects config.kernelSize to be number or` +\n            ` [number, number, number], but received ${\n                JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n}\nserialization.registerClass(Conv3D);\n\nexport class Conv2DTranspose extends Conv2D {\n  /** @nocollapse */\n  static override className = 'Conv2DTranspose';\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv2DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError(\n          'Input should have rank 4; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 4, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 4) {\n        throw new ValueError(\n            `Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1];\n\n      // Infer the dynamic output shape.\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n      const outputShape: [number, number, number, number] =\n          [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n      let outputs = tfc.conv2dTranspose(\n          input as Tensor4D, this.kernel.read() as Tensor4D, outputShape,\n          this.strides as [number, number], this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor4D;\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs) as Tensor4D;\n      }\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv2DTranspose);\n\nexport class Conv3DTranspose extends Conv3D {\n  /** @nocollapse */\n  static override className = 'Conv3DTranspose';\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 5})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv3DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 5) {\n      throw new ValueError(\n          'Input should have rank 5; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 5, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy<tfc.Tensor5D>(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 5) {\n        throw new ValueError(\n            `Conv3DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      let dAxis: number;\n\n      if (this.dataFormat === 'channelsFirst') {\n        dAxis = 2;\n        hAxis = 3;\n        wAxis = 4;\n      } else {\n        dAxis = 1;\n        hAxis = 2;\n        wAxis = 3;\n      }\n\n      const depth = inputShape[dAxis];\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelD = this.kernelSize[0];\n      const kernelH = this.kernelSize[1];\n      const kernelW = this.kernelSize[2];\n      const strideD = this.strides[0];\n      const strideH = this.strides[1];\n      const strideW = this.strides[2];\n\n      // Infer the dynamic output shape.\n      const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Same as `conv2dTranspose`. We always assumes channelsLast.\n      const outputShape: [number, number, number, number, number] =\n          [batchSize, outDepth, outHeight, outWidth, this.filters];\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n      }\n      let outputs = tfc.conv3dTranspose(\n          input as Tensor5D, this.kernel.read() as Tensor5D, outputShape,\n          this.strides as [number, number, number],\n          this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n      }\n\n      if (this.bias !== null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor5D;\n      }\n      if (this.activation !== null) {\n        outputs = this.activation.apply(outputs) as Tensor5D;\n      }\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let depthAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      depthAxis = 2;\n      heightAxis = 3;\n      widthAxis = 4;\n    } else {\n      channelAxis = 4;\n      depthAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    }\n\n    const kernelD = this.kernelSize[0];\n    const kernelH = this.kernelSize[1];\n    const kernelW = this.kernelSize[2];\n    const strideD = this.strides[0];\n    const strideH = this.strides[1];\n    const strideW = this.strides[2];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[depthAxis] =\n        deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv3DTranspose);\n\nexport declare interface SeparableConvLayerArgs extends ConvLayerArgs {\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal\n   * to `filtersIn * depthMultiplier`. Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the pointwise kernel matrix.\n   */\n  pointwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the pointwise kernel matrix.\n   */\n  pointwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the pointwise kernel matrix.\n   */\n  pointwiseConstraint?: ConstraintIdentifier|Constraint;\n}\n\nexport class SeparableConv extends Conv {\n  /** @nocollapse */\n  static className = 'SeparableConv';\n\n  readonly depthMultiplier: number;\n\n  protected readonly depthwiseInitializer?: Initializer;\n  protected readonly depthwiseRegularizer?: Regularizer;\n  protected readonly depthwiseConstraint?: Constraint;\n  protected readonly pointwiseInitializer?: Initializer;\n  protected readonly pointwiseRegularizer?: Regularizer;\n  protected readonly pointwiseConstraint?: Constraint;\n\n  readonly DEFAULT_DEPTHWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n  readonly DEFAULT_POINTWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n\n  protected depthwiseKernel: LayerVariable = null;\n  protected pointwiseKernel: LayerVariable = null;\n\n  constructor(rank: number, config?: SeparableConvLayerArgs) {\n    super(rank, config);\n\n    if (config.filters == null) {\n      throw new ValueError(\n          'The `filters` configuration field is required by SeparableConv, ' +\n          'but is unspecified.');\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n        config.kernelConstraint != null) {\n      throw new ValueError(\n          'Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n          'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n          'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n          'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n    if (config.padding != null && config.padding !== 'same' &&\n        config.padding !== 'valid') {\n      throw new ValueError(\n          `SeparableConv${this.rank}D supports only padding modes: ` +\n          `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier =\n        config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(\n          `Inputs to SeparableConv${this.rank}D should have rank ` +\n          `${this.rank + 2}, but received input shape: ` +\n          `${JSON.stringify(inputShape)}`);\n    }\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          `The channel dimension of the inputs should be defined, ` +\n          `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape =\n        this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, 'float32',\n        this.depthwiseInitializer, this.depthwiseRegularizer, trainable,\n        this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight(\n        'pointwise_kernel', pointwiseKernelShape, 'float32',\n        this.pointwiseInitializer, this.pointwiseRegularizer, trainable,\n        this.pointwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec =\n        [new InputSpec({ndim: this.rank + 2, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      let output: Tensor;\n      if (this.rank === 1) {\n        throw new NotImplementedError(\n            '1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]);  // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(\n            inputs as Tensor4D, this.depthwiseKernel.read() as Tensor4D,\n            this.pointwiseKernel.read() as Tensor4D,\n            this.strides as [number, number], this.padding as 'same' | 'valid',\n            this.dilationRate as [number, number], 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]);  // NHWC -> NCHW.\n      }\n      return output;\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] =\n        serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] =\n        serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] =\n        serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n}\n\nexport class SeparableConv2D extends SeparableConv {\n  /** @nocollapse */\n  static override className = 'SeparableConv2D';\n  constructor(args?: SeparableConvLayerArgs) {\n    super(2, args);\n  }\n}\nserialization.registerClass(SeparableConv2D);\n\nexport class Conv1D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv1D';\n  constructor(args: ConvLayerArgs) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(\n          `Conv1D expects config.kernelSize to be number or number[] with ` +\n          `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv1D);\n\nexport declare interface Cropping2DLayerArgs extends LayerArgs {\n  /**\n   * Dimension of the cropping along the width and the height.\n   * - If integer: the same symmetric cropping\n   *  is applied to width and height.\n   * - If list of 2 integers:\n   *   interpreted as two different\n   *   symmetric cropping values for height and width:\n   *   `[symmetric_height_crop, symmetric_width_crop]`.\n   * - If a list of 2 lists of 2 integers:\n   *   interpreted as\n   *   `[[top_crop, bottom_crop], [left_crop, right_crop]]`\n   */\n  cropping: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   * `channels_first` corresponds to inputs with shape\n   *   `(batch, channels, ...)`\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class Cropping2D extends Layer {\n  /** @nocollapse */\n  static className = 'Cropping2D';\n  protected readonly cropping: [[number, number], [number, number]];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Cropping2DLayerArgs) {\n    super(args);\n    if (typeof args.cropping === 'number') {\n      this.cropping =\n          [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [\n        [args.cropping[0], args.cropping[0]],\n        [args.cropping[1] as number, args.cropping[1] as number]\n      ];\n    } else {\n      this.cropping = args.cropping as [[number, number], [number, number]];\n    }\n    this.dataFormat =\n        args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{ndim: 4}];\n  }\n\n  override computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      return [\n        inputShape[0], inputShape[1],\n        inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n      ];\n    } else {\n      return [\n        inputShape[0],\n        inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n      ];\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {cropping: this.cropping, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Cropping2D);\n\nexport declare interface UpSampling2DLayerArgs extends LayerArgs {\n  /**\n   * The upsampling factors for rows and columns.\n   *\n   * Defaults to `[2, 2]`.\n   */\n  size?: number[];\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `\"channelsLast\"` corresponds to inputs with shape\n   *   `[batch, ..., channels]`\n   *\n   *  `\"channelsFirst\"` corresponds to inputs with shape `[batch, channels,\n   * ...]`.\n   *\n   * Defaults to `\"channelsLast\"`.\n   */\n  dataFormat?: DataFormat;\n  /**\n   * The interpolation mechanism, one of `\"nearest\"` or `\"bilinear\"`, default\n   * to `\"nearest\"`.\n   */\n  interpolation?: InterpolationFormat;\n}\n\nexport class UpSampling2D extends Layer {\n  /** @nocollapse */\n  static className = 'UpSampling2D';\n  protected readonly DEFAULT_SIZE = [2, 2];\n  protected readonly size: number[];\n  protected readonly dataFormat: DataFormat;\n  protected readonly interpolation: InterpolationFormat;\n\n  constructor(args: UpSampling2DLayerArgs) {\n    super(args);\n    this.inputSpec = [{ndim: 4}];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation =\n        args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n\n  override computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      const height =\n          inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height =\n          inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs) as Tensor4D;\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n\n        const resized = this.interpolation === 'nearest' ?\n            tfc.image.resizeNearestNeighbor(input, [height, width]) :\n            tfc.image.resizeBilinear(input, [height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === 'nearest' ?\n            tfc.image.resizeNearestNeighbor(input, [height, width]) :\n            tfc.image.resizeBilinear(input, [height, width]);\n      }\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n        size: this.size,\n        dataFormat: this.dataFormat,\n        interpolation: this.interpolation\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(UpSampling2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nimport {BaseConv, BaseConvLayerArgs, ConvLayerArgs, preprocessConv2DInput} from './convolutional';\n\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(\n    x: Tensor, depthwiseKernel: Tensor, strides: [number, number] = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (x.rank !== 4) {\n      throw new ValueError(\n          `Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n          `${x.rank}-D`);\n    }\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(\n          `depthwiseKernel is required to be 4-D, but is instead ` +\n          `${depthwiseKernel.rank}-D`);\n    }\n    y = tfc.depthwiseConv2d(\n        y as Tensor4D, depthwiseKernel as Tensor4D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\nexport declare interface DepthwiseConv2DLayerArgs extends BaseConvLayerArgs {\n  /**\n   * An integer or Array of 2 integers, specifying the width and height of the\n   * 2D convolution window. Can be a single integer to specify the same value\n   * for all spatial dimensions.\n   */\n  kernelSize: number|[number, number];\n\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal to\n   * `filtersIn * depthMultiplier`.\n   * Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   * Default: GlorotNormal.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function for the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class DepthwiseConv2D extends BaseConv {\n  /** @nocollapse */\n  static className = 'DepthwiseConv2D';\n  private readonly depthMultiplier: number;\n  private readonly depthwiseInitializer: Initializer;\n  private readonly depthwiseConstraint: Constraint;\n  private readonly depthwiseRegularizer: Regularizer;\n\n  private depthwiseKernel: LayerVariable = null;\n\n  constructor(args: DepthwiseConv2DLayerArgs) {\n    super(2, args as ConvLayerArgs);\n    this.depthMultiplier =\n        args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 4) {\n      throw new ValueError(\n          `Inputs to DepthwiseConv2D should have rank 4. ` +\n          `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          'The channel dimension of the inputs to DepthwiseConv2D should ' +\n          `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape: Shape = [\n      this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n    ];\n\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, null,\n        this.depthwiseInitializer, this.depthwiseRegularizer, true,\n        this.depthwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [inputDim * this.depthMultiplier], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(\n          inputs, this.depthwiseKernel.read(), this.strides as [number, number],\n          this.padding, this.dataFormat, null);\n      // TODO(cais): Add support for dilation.\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ?\n        inputShape[1] * this.depthMultiplier :\n        inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(\n        rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(\n        cols, this.kernelSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n}\nserialization.registerClass(DepthwiseConv2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {nameScope} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, SymbolicTensor} from '../engine/topology';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {AttributeError, NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, Ones, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, RnnStepFunction} from '../types';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes} from '../utils/types_utils';\nimport {batchGetValue, batchSetValue, LayerVariable} from '../variables';\n\nimport {deserialize} from './serialization';\n\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(\n    inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    initialState: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    constants: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    numConstants?: number): {\n  inputs: Tensor|SymbolicTensor,\n  initialState: Tensor[]|SymbolicTensor[],\n  constants: Tensor[]|SymbolicTensor[]\n} {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError(\n          'When inputs is an array, neither initialState or constants ' +\n          'should be provided');\n    }\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n    inputs = inputs[0];\n  }\n\n  function toListOrNull(x: Tensor|Tensor[]|SymbolicTensor|\n                        SymbolicTensor[]): Tensor[]|SymbolicTensor[] {\n    if (x == null || Array.isArray(x)) {\n      return x as Tensor[] | SymbolicTensor[];\n    } else {\n      return [x] as Tensor[] | SymbolicTensor[];\n    }\n  }\n\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n\n  return {inputs, initialState, constants};\n}\n\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(\n    stepFunction: RnnStepFunction, inputs: Tensor, initialStates: Tensor[],\n    goBackwards = false, mask?: Tensor, constants?: Tensor[], unroll = false,\n    needPerStepOutputs = false): [Tensor, Tensor, Tensor[]] {\n  return tfc.tidy(() => {\n    const ndim = inputs.shape.length;\n    if (ndim < 3) {\n      throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n    }\n\n    // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n    // ...].\n    const axes = [1, 0].concat(math_utils.range(2, ndim));\n    inputs = tfc.transpose(inputs, axes);\n\n    if (constants != null) {\n      throw new NotImplementedError(\n          'The rnn() functoin of the deeplearn.js backend does not support ' +\n          'constants yet.');\n    }\n\n    // Porting Note: the unroll option is ignored by the imperative backend.\n    if (unroll) {\n      console.warn(\n          'Backend rnn(): the unroll = true option is not applicable to the ' +\n          'imperative deeplearn.js backend.');\n    }\n\n    if (mask != null) {\n      mask = tfc.cast(tfc.cast(mask, 'bool'), 'float32');\n      if (mask.rank === ndim - 1) {\n        mask = tfc.expandDims(mask, -1);\n      }\n      mask = tfc.transpose(mask, axes);\n    }\n\n    if (goBackwards) {\n      inputs = tfc.reverse(inputs, 0);\n      if (mask != null) {\n        mask = tfc.reverse(mask, 0);\n      }\n    }\n\n    // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n    //   use the usual TypeScript control flow to iterate over the time steps in\n    //   the inputs.\n    // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n    // outputs.\n    //   This is not idiomatic in TypeScript. The info regarding whether we are\n    //   in a learning (i.e., training) phase for RNN is passed in a different\n    //   way.\n\n    const perStepOutputs: Tensor[] = [];\n    let lastOutput: Tensor;\n    let states = initialStates;\n    const timeSteps = inputs.shape[0];\n    const perStepInputs = tfc.unstack(inputs);\n    let perStepMasks: Tensor[];\n    if (mask != null) {\n      perStepMasks = tfc.unstack(mask);\n    }\n\n    for (let t = 0; t < timeSteps; ++t) {\n      const currentInput = perStepInputs[t];\n      const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        const maskedOutputs = tfc.tidy(() => {\n          const stepMask = perStepMasks[t];\n          const negStepMask = tfc.sub(tfc.onesLike(stepMask), stepMask);\n          // TODO(cais): Would tfc.where() be better for performance?\n          const output = tfc.add(\n              tfc.mul(stepOutputs[0], stepMask),\n              tfc.mul(states[0], negStepMask));\n          const newStates = states.map((state, i) => {\n            return tfc.add(\n                tfc.mul(stepOutputs[1][i], stepMask),\n                tfc.mul(state, negStepMask));\n          });\n          return {output, newStates};\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    }\n    let outputs: Tensor;\n    if (needPerStepOutputs) {\n      const axis = 1;\n      outputs = tfc.stack(perStepOutputs, axis);\n    }\n    return [lastOutput, outputs, states] as [Tensor, Tensor, Tensor[]];\n  });\n}\n\nexport declare interface BaseRNNLayerArgs extends LayerArgs {\n  /**\n   * A RNN cell instance. A RNN cell is a class that has:\n   *   - a `call()` method, which takes `[Tensor, Tensor]` as the\n   *     first input argument. The first item is the input at time t, and\n   *     second item is the cell state at time t.\n   *     The `call()` method returns `[outputAtT, statesAtTPlus1]`.\n   *     The `call()` method of the cell can also take the argument `constants`,\n   *     see section \"Note on passing external constants\" below.\n   *     Porting Node: PyKeras overrides the `call()` signature of RNN cells,\n   *       which are Layer subtypes, to accept two arguments. tfjs-layers does\n   *       not do such overriding. Instead we preseve the `call()` signature,\n   *       which due to its `Tensor|Tensor[]` argument and return value is\n   *       flexible enough to handle the inputs and states.\n   *   - a `stateSize` attribute. This can be a single integer (single state)\n   *     in which case it is the size of the recurrent state (which should be\n   *     the same as the size of the cell output). This can also be an Array of\n   *     integers (one size per state). In this case, the first entry\n   *     (`stateSize[0]`) should be the same as the size of the cell output.\n   * It is also possible for `cell` to be a list of RNN cell instances, in which\n   * case the cells get stacked on after the other in the RNN, implementing an\n   * efficient stacked RNN.\n   */\n  cell?: RNNCell|RNNCell[];\n\n  /**\n   * Whether to return the last output in the output sequence, or the full\n   * sequence.\n   */\n  returnSequences?: boolean;\n\n  /**\n   * Whether to return the last state in addition to the output.\n   */\n  returnState?: boolean;\n\n  /**\n   * If `true`, process the input sequence backwards and return the reversed\n   * sequence (default: `false`).\n   */\n  goBackwards?: boolean;\n\n  /**\n   * If `true`, the last state for each sample at index i in a batch will be\n   * used as initial state of the sample of index i in the following batch\n   * (default: `false`).\n   *\n   * You can set RNN layers to be \"stateful\", which means that the states\n   * computed for the samples in one batch will be reused as initial states\n   * for the samples in the next batch. This assumes a one-to-one mapping\n   * between samples in different successive batches.\n   *\n   * To enable \"statefulness\":\n   *   - specify `stateful: true` in the layer constructor.\n   *   - specify a fixed batch size for your model, by passing\n   *     - if sequential model:\n   *       `batchInputShape: [...]` to the first layer in your model.\n   *     - else for functional model with 1 or more Input layers:\n   *       `batchShape: [...]` to all the first layers in your model.\n   *     This is the expected shape of your inputs\n   *     *including the batch size*.\n   *     It should be a tuple of integers, e.g., `[32, 10, 100]`.\n   *   - specify `shuffle: false` when calling `LayersModel.fit()`.\n   *\n   * To reset the state of your model, call `resetStates()` on either the\n   * specific layer or on the entire model.\n   */\n  stateful?: boolean;\n  // TODO(cais): Explore whether we can warn users when they fail to set\n  //   `shuffle: false` when training a model consisting of stateful RNNs\n  //   and any stateful Layers in general.\n\n  /**\n   * If `true`, the network will be unrolled, else a symbolic loop will be\n   * used. Unrolling can speed up a RNN, although it tends to be more\n   * memory-intensive. Unrolling is only suitable for short sequences (default:\n   * `false`).\n   * Porting Note: tfjs-layers has an imperative backend. RNNs are executed with\n   *   normal TypeScript control flow. Hence this property is inapplicable and\n   *   ignored in tfjs-layers.\n   */\n  unroll?: boolean;\n\n  /**\n   * Dimensionality of the input (integer).\n   *   This option (or alternatively, the option `inputShape`) is required when\n   *   this layer is used as the first layer in a model.\n   */\n  inputDim?: number;\n\n  /**\n   * Length of the input sequences, to be specified when it is constant.\n   * This argument is required if you are going to connect `Flatten` then\n   * `Dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed). Note that if the recurrent layer is not the first layer in\n   * your model, you would need to specify the input length at the level of the\n   * first layer (e.g., via the `inputShape` option).\n   */\n  inputLength?: number;\n}\n\nexport class RNN extends Layer {\n  /** @nocollapse */\n  static className = 'RNN';\n  public readonly cell: RNNCell;\n  public readonly returnSequences: boolean;\n  public readonly returnState: boolean;\n  public readonly goBackwards: boolean;\n  public readonly unroll: boolean;\n\n  public stateSpec: InputSpec[];\n  protected states_: Tensor[];\n\n  // NOTE(cais): For stateful RNNs, the old states cannot be disposed right\n  // away when new states are set, because the old states may need to be used\n  // later for backpropagation through time (BPTT) and other purposes. So we\n  // keep them here for final disposal when the state is reset completely\n  // (i.e., through no-arg call to `resetStates()`).\n  protected keptStates: Tensor[][];\n\n  private numConstants: number;\n\n  constructor(args: RNNLayerArgs) {\n    super(args);\n    let cell: RNNCell;\n    if (args.cell == null) {\n      throw new ValueError(\n          'cell property is missing for the constructor of RNN.');\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({cells: args.cell});\n    } else {\n      cell = args.cell;\n    }\n    if (cell.stateSize == null) {\n      throw new ValueError(\n          'The RNN cell should have an attribute `stateSize` (tuple of ' +\n          'integers, one integer per RNN state).');\n    }\n    this.cell = cell;\n    this.returnSequences =\n        args.returnSequences == null ? false : args.returnSequences;\n    this.returnState = args.returnState == null ? false : args.returnState;\n    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    this._stateful = args.stateful == null ? false : args.stateful;\n    this.unroll = args.unroll == null ? false : args.unroll;\n\n    this.supportsMasking = true;\n    this.inputSpec = [new InputSpec({ndim: 3})];\n    this.stateSpec = null;\n    this.states_ = null;\n    // TODO(cais): Add constantsSpec and numConstants.\n    this.numConstants = null;\n    // TODO(cais): Look into the use of initial_state in the kwargs of the\n    //   constructor.\n\n    this.keptStates = [];\n  }\n\n  // Porting Note: This is the equivalent of `RNN.states` property getter in\n  //   PyKeras.\n  getStates(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      return math_utils.range(0, numStates).map(x => null);\n    } else {\n      return this.states_;\n    }\n  }\n\n  // Porting Note: This is the equivalent of the `RNN.states` property setter in\n  //   PyKeras.\n  setStates(states: Tensor[]): void {\n    this.states_ = states;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    // TODO(cais): Remove the casting once stacked RNN cells become supported.\n    let stateSize = this.cell.stateSize;\n    if (!Array.isArray(stateSize)) {\n      stateSize = [stateSize];\n    }\n    const outputDim = stateSize[0];\n    let outputShape: Shape|Shape[];\n    if (this.returnSequences) {\n      outputShape = [inputShape[0], inputShape[1], outputDim];\n    } else {\n      outputShape = [inputShape[0], outputDim];\n    }\n\n    if (this.returnState) {\n      const stateShape: Shape[] = [];\n      for (const dim of stateSize) {\n        stateShape.push([inputShape[0], dim]);\n      }\n      return [outputShape].concat(stateShape);\n    } else {\n      return outputShape;\n    }\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    return tfc.tidy(() => {\n      if (Array.isArray(mask)) {\n        mask = mask[0];\n      }\n      const outputMask = this.returnSequences ? mask : null;\n\n      if (this.returnState) {\n        const stateMask = this.states.map(s => null);\n        return [outputMask].concat(stateMask);\n      } else {\n        return outputMask;\n      }\n    });\n  }\n\n  /**\n   * Get the current state tensors of the RNN.\n   *\n   * If the state hasn't been set, return an array of `null`s of the correct\n   * length.\n   */\n  get states(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      const output: Tensor[] = [];\n      for (let i = 0; i < numStates; ++i) {\n        output.push(null);\n      }\n      return output;\n    } else {\n      return this.states_;\n    }\n  }\n\n  set states(s: Tensor[]) {\n    this.states_ = s;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    // Note inputShape will be an Array of Shapes of initial states and\n    // constants if these are passed in apply().\n    const constantShape: Shape[] = null;\n    if (this.numConstants != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    }\n\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    const batchSize: number = this.stateful ? inputShape[0] : null;\n    const inputDim = inputShape.slice(2);\n    this.inputSpec[0] = new InputSpec({shape: [batchSize, null, ...inputDim]});\n\n    // Allow cell (if RNNCell Layer) to build before we set or validate\n    // stateSpec.\n    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (constantShape != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    } else {\n      this.cell.build(stepInputShape);\n    }\n\n    // Set or validate stateSpec.\n    let stateSize: number[];\n    if (Array.isArray(this.cell.stateSize)) {\n      stateSize = this.cell.stateSize;\n    } else {\n      stateSize = [this.cell.stateSize];\n    }\n\n    if (this.stateSpec != null) {\n      if (!util.arraysEqual(\n              this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]),\n              stateSize)) {\n        throw new ValueError(\n            `An initialState was passed that is not compatible with ` +\n            `cell.stateSize. Received stateSpec=${this.stateSpec}; ` +\n            `However cell.stateSize is ${this.cell.stateSize}`);\n      }\n    } else {\n      this.stateSpec =\n          stateSize.map(dim => new InputSpec({shape: [null, dim]}));\n    }\n    if (this.stateful) {\n      this.resetStates();\n    }\n  }\n\n  /**\n   * Reset the state tensors of the RNN.\n   *\n   * If the `states` argument is `undefined` or `null`, will set the\n   * state tensor(s) of the RNN to all-zero tensors of the appropriate\n   * shape(s).\n   *\n   * If `states` is provided, will set the state tensors of the RNN to its\n   * value.\n   *\n   * @param states Optional externally-provided initial states.\n   * @param training Whether this call is done during training. For stateful\n   *   RNNs, this affects whether the old states are kept or discarded. In\n   *   particular, if `training` is `true`, the old states will be kept so\n   *   that subsequent backpropgataion through time (BPTT) may work properly.\n   *   Else, the old states will be discarded.\n   */\n  override resetStates(states?: Tensor|Tensor[], training = false): void {\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\n            'Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n      const batchSize = this.inputSpec[0].shape[0];\n      if (batchSize == null) {\n        throw new ValueError(\n            'If an RNN is stateful, it needs to know its batch size. Specify ' +\n            'the batch size of your input tensors: \\n' +\n            '- If using a Sequential model, specify the batch size by ' +\n            'passing a `batchInputShape` option to your first layer.\\n' +\n            '- If using the functional API, specify the batch size by ' +\n            'passing a `batchShape` option to your Input layer.');\n      }\n      // Initialize state if null.\n      if (this.states_ == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_);\n        // For stateful RNNs, fully dispose kept old states.\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n        if (states.length !== this.states_.length) {\n          throw new ValueError(\n              `Layer ${this.name} expects ${this.states_.length} state(s), ` +\n              `but it received ${states.length} state value(s). Input ` +\n              `received: ${states}`);\n        }\n\n        if (training === true) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const dim = Array.isArray(this.cell.stateSize) ?\n              this.cell.stateSize[index] :\n              this.cell.stateSize;\n          const expectedShape = [batchSize, dim];\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(\n                `State ${index} is incompatible with layer ${this.name}: ` +\n                `expected shape=${expectedShape}, received shape=${\n                    value.shape}`);\n          }\n          this.states_[index] = value;\n        }\n      }\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  override apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n    let initialState: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['initialState'];\n    let constants: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['constants'];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n\n    const standardized =\n        standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n\n    // If any of `initial_state` or `constants` are specified and are\n    // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n    // the input_spec to include them.\n\n    let additionalInputs: Array<Tensor|SymbolicTensor> = [];\n    let additionalSpecs: InputSpec[] = [];\n    if (initialState != null) {\n      kwargs['initialState'] = initialState;\n      additionalInputs = additionalInputs.concat(initialState);\n      this.stateSpec = [];\n      for (const state of initialState) {\n        this.stateSpec.push(new InputSpec({shape: state.shape}));\n      }\n      // TODO(cais): Use the following instead.\n      // this.stateSpec = initialState.map(state => new InputSpec({shape:\n      // state.shape}));\n      additionalSpecs = additionalSpecs.concat(this.stateSpec);\n    }\n    if (constants != null) {\n      kwargs['constants'] = constants;\n      additionalInputs = additionalInputs.concat(constants);\n      // TODO(cais): Add this.constantsSpec.\n      this.numConstants = constants.length;\n    }\n\n    const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n    if (isTensor) {\n      // Compute full input spec, including state and constants.\n      const fullInput =\n          [inputs].concat(additionalInputs) as Tensor[] | SymbolicTensor[];\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      // Perform the call with temporarily replaced inputSpec.\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    // Input shape: `[samples, time (padded with zeros), input_dim]`.\n    // Note that the .build() method of subclasses **must** define\n    // this.inputSpec and this.stateSpec owith complete input shapes.\n    return tidy(() => {\n      const mask = kwargs == null ? null : kwargs['mask'] as Tensor;\n      const training = kwargs == null ? null : kwargs['training'];\n      let initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n\n      inputs = getExactlyOneTensor(inputs);\n      if (initialState == null) {\n        if (this.stateful) {\n          initialState = this.states_;\n        } else {\n          initialState = this.getInitialState(inputs);\n        }\n      }\n\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      if (initialState.length !== numStates) {\n        throw new ValueError(\n            `RNN Layer has ${numStates} state(s) but was passed ` +\n            `${initialState.length} initial state(s).`);\n      }\n      if (this.unroll) {\n        console.warn(\n            'Ignoring unroll = true for RNN layer, due to imperative backend.');\n      }\n\n      const cellCallKwargs: Kwargs = {training};\n\n      // TODO(cais): Add support for constants.\n      const step = (inputs: Tensor, states: Tensor[]) => {\n        // `inputs` and `states` are concatenated to form a single `Array` of\n        // `tf.Tensor`s as the input to `cell.call()`.\n        const outputs =\n            this.cell.call([inputs].concat(states), cellCallKwargs) as Tensor[];\n        // Marshall the return value into output and new states.\n        return [outputs[0], outputs.slice(1)] as [Tensor, Tensor[]];\n      };\n\n      // TODO(cais): Add support for constants.\n\n      const rnnOutputs =\n          rnn(step, inputs, initialState, this.goBackwards, mask, null,\n              this.unroll, this.returnSequences);\n      const lastOutput = rnnOutputs[0];\n      const outputs = rnnOutputs[1];\n      const states = rnnOutputs[2];\n\n      if (this.stateful) {\n        this.resetStates(states, training);\n      }\n\n      const output = this.returnSequences ? outputs : lastOutput;\n\n      // TODO(cais): Porperty set learning phase flag.\n\n      if (this.returnState) {\n        return [output].concat(states);\n      } else {\n        return output;\n      }\n    });\n  }\n\n  getInitialState(inputs: Tensor): Tensor[] {\n    return tidy(() => {\n      // Build an all-zero tensor of shape [samples, outputDim].\n      // [Samples, timeSteps, inputDim].\n      let initialState = tfc.zeros(inputs.shape);\n      // [Samples].\n      initialState = tfc.sum(initialState, [1, 2]);\n      initialState = K.expandDims(initialState);  // [Samples, 1].\n\n      if (Array.isArray(this.cell.stateSize)) {\n        return this.cell.stateSize.map(\n            dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n      } else {\n        return this.cell.stateSize > 1 ?\n            [K.tile(initialState, [1, this.cell.stateSize])] :\n            [initialState];\n      }\n    });\n  }\n\n  override get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    return this.cell.trainableWeights;\n  }\n\n  override get nonTrainableWeights(): LayerVariable[] {\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    if (!this.trainable) {\n      return this.cell.weights;\n    }\n    return this.cell.nonTrainableWeights;\n  }\n\n  override setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.cell != null) {\n      this.cell.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      returnSequences: this.returnSequences,\n      returnState: this.returnState,\n      goBackwards: this.goBackwards,\n      stateful: this.stateful,\n      unroll: this.unroll,\n    };\n\n    if (this.numConstants != null) {\n      config['numConstants'] = this.numConstants;\n    }\n\n    const cellConfig = this.cell.getConfig();\n\n    if (this.getClassName() === RNN.className) {\n      config['cell'] = {\n        'className': this.cell.getClassName(),\n        'config': cellConfig,\n      } as serialization.ConfigDictValue;\n    }\n\n    // this order is necessary, to prevent cell name from replacing layer name\n    return {...cellConfig, ...baseConfig, ...config};\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cellConfig = config['cell'] as serialization.ConfigDict;\n    const cell = deserialize(cellConfig, customObjects) as RNNCell;\n    return new cls(Object.assign(config, {cell}));\n  }\n}\nserialization.registerClass(RNN);\n\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\nexport abstract class RNNCell extends Layer {\n  /**\n   * Size(s) of the states.\n   * For RNN cells with only a single state, this is a single integer.\n   */\n  // See\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#properties-overriding-accessors-and-vice-versa-is-an-error\n  public abstract stateSize: number|number[];\n  public dropoutMask: Tensor|Tensor[];\n  public recurrentDropoutMask: Tensor|Tensor[];\n}\n\nexport declare interface SimpleRNNCellLayerArgs extends LayerArgs {\n  /**\n   * units: Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   * Default: hyperbolic tangent ('tanh').\n   * If you pass `null`,  'linear' activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the `kernel` weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the `recurrent_kernel` weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the `kernel` weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the `recurrentKernel` weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n\n  /**\n   * This is added for test DI purpose.\n   */\n  dropoutFunc?: Function;\n}\n\nexport class SimpleRNNCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'SimpleRNNCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number;\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args: SimpleRNNCellLayerArgs) {\n    super(args);\n    this.units = args.units;\n    assertPositiveInteger(this.units, `units`);\n    this.activation = getActivation(\n        args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    // TODO(cais): Use regularizer.\n    this.kernel = this.addWeight(\n        'kernel', [inputShape[inputShape.length - 1], this.units], null,\n        this.kernelInitializer, this.kernelRegularizer, true,\n        this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n  //   `inputs` and `states`. Here, the two tensors are combined into an\n  //   `Tensor[]` Array as the first input argument.\n  //   Similarly, PyKeras' equivalent of this method returns two values:\n  //    `output` and `[output]`. Here the two are combined into one length-2\n  //    `Tensor[]`, consisting of `output` repeated.\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n      }\n      let prevOutput = inputs[1];\n      inputs = inputs[0];\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             dropoutFunc: this.dropoutFunc,\n                           }) as Tensor;\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(prevOutput),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      dropoutFunc: this.dropoutFunc,\n                                    }) as Tensor;\n      }\n      let h: Tensor;\n      const dpMask: Tensor = this.dropoutMask as Tensor;\n      const recDpMask: Tensor = this.recurrentDropoutMask as Tensor;\n      if (dpMask != null) {\n        h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n      } else {\n        h = K.dot(inputs, this.kernel.read());\n      }\n      if (this.bias != null) {\n        h = K.biasAdd(h, this.bias.read());\n      }\n      if (recDpMask != null) {\n        prevOutput = tfc.mul(prevOutput, recDpMask);\n      }\n      let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      // TODO(cais): Properly set learning phase on output tensor?\n      return [output, output];\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(SimpleRNNCell);\n\nexport declare interface SimpleRNNLayerArgs extends BaseRNNLayerArgs {\n  /**\n   * Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   *\n   * Defaults to  hyperbolic tangent (`tanh`)\n   *\n   * If you pass `null`, no activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the recurrentKernel weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the kernel weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the recurrentKernel weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n\n  /**\n   * This is added for test DI purpose.\n   */\n  dropoutFunc?: Function;\n}\n\n/**\n * RNNLayerConfig is identical to BaseRNNLayerConfig, except it makes the\n * `cell` property required. This interface is to be used with constructors\n * of concrete RNN layer subtypes.\n */\nexport declare interface RNNLayerArgs extends BaseRNNLayerArgs {\n  cell: RNNCell|RNNCell[];\n}\n\nexport class SimpleRNN extends RNN {\n  /** @nocollapse */\n  static override className = 'SimpleRNN';\n  constructor(args: SimpleRNNLayerArgs) {\n    args.cell = new SimpleRNNCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    return new cls(config);\n  }\n}\nserialization.registerClass(SimpleRNN);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport declare interface GRUCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n\n  /**\n   * GRU convention (whether to apply reset gate after or before matrix\n   * multiplication). false = \"before\", true = \"after\" (only false is\n   * supported).\n   */\n  resetAfter?: boolean;\n}\n\nexport class GRUCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'GRUCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number;\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION: ActivationIdentifier = 'hardSigmoid';\n\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: GRUCellLayerArgs) {\n    super(args);\n    if (args.resetAfter) {\n      throw new ValueError(\n          `GRUCell does not support reset_after parameter set to true.`);\n    }\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 3], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 3], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units * 3], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `GRUCell expects 2 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      let hTMinus1 = inputs[1];  // Previous memory state.\n      inputs = inputs[0];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2, regardless of the actual value of\n      // config.implementation.\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             count: 3,\n                             dropoutFunc: this.dropoutFunc,\n                           }) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: 3,\n                                      dropoutFunc: this.dropoutFunc,\n                                    }) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor];\n      const recDpMask = this.recurrentDropoutMask as [Tensor, Tensor, Tensor];\n      let z: Tensor;\n      let r: Tensor;\n      let hh: Tensor;\n\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let matrixX = K.dot(inputs, this.kernel.read());\n      if (this.useBias) {\n        matrixX = K.biasAdd(matrixX, this.bias.read());\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n\n      const recurrentKernelValue = this.recurrentKernel.read();\n      const [rk1, rk2] = tfc.split(\n          recurrentKernelValue, [2 * this.units, this.units],\n          recurrentKernelValue.rank - 1);\n      const matrixInner = K.dot(hTMinus1, rk1);\n\n      const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n      const [recurrentZ, recurrentR] =\n          tfc.split(matrixInner, 2, matrixInner.rank - 1);\n      z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n      r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n\n      const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n      hh = this.activation.apply(tfc.add(xH, recurrentH));\n\n      const h =\n          tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h];\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n      resetAfter: false\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(GRUCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport declare interface GRULayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   * smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class GRU extends RNN {\n  /** @nocollapse */\n  static override className = 'GRU';\n  constructor(args: GRULayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new GRUCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(GRU);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport declare interface LSTMCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf)\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class LSTMCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'LSTMCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n  readonly unitForgetBias: boolean;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number[];\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n\n  readonly DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: LSTMCellLayerArgs) {\n    super(args);\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.unitForgetBias = args.unitForgetBias;\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = [this.units, this.units];\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 4], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 4], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    let biasInitializer: Initializer;\n    if (this.useBias) {\n      if (this.unitForgetBias) {\n        const capturedBiasInit = this.biasInitializer;\n        const capturedUnits = this.units;\n        biasInitializer = new (class CustomInit extends Initializer {\n          /** @nocollapse */\n          static className = 'CustomInit';\n\n          apply(shape: Shape, dtype?: DataType): Tensor {\n            // TODO(cais): More informative variable names?\n            const bI = capturedBiasInit.apply([capturedUnits]);\n            const bF = (new Ones()).apply([capturedUnits]);\n            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n            return K.concatAlongFirstAxis(\n                K.concatAlongFirstAxis(bI, bF), bCAndH);\n          }\n        })();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n      this.bias = this.addWeight(\n          'bias', [this.units * 4], null, biasInitializer, this.biasRegularizer,\n          true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 3) {\n        throw new ValueError(\n            `LSTMCell expects 3 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n      let hTMinus1 = inputs[1];    // Previous memory state.\n      const cTMinus1 = inputs[2];  // Previous carry state.\n      inputs = inputs[0];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             count: 4,\n                             dropoutFunc: this.dropoutFunc\n                           }) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: 4,\n                                      dropoutFunc: this.dropoutFunc\n                                    }) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor, Tensor];\n      const recDpMask =\n          this.recurrentDropoutMask as [Tensor, Tensor, Tensor, Tensor];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2 regardless of the actual value of\n      // config.implementation.\n      let i: Tensor;\n      let f: Tensor;\n      let c: Tensor;\n      let o: Tensor;\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let z = K.dot(inputs, this.kernel.read());\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n      z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n      if (this.useBias) {\n        z = K.biasAdd(z, this.bias.read());\n      }\n\n      const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n\n      i = this.recurrentActivation.apply(z0);\n      f = this.recurrentActivation.apply(z1);\n      c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n      o = this.recurrentActivation.apply(z3);\n\n      const h = tfc.mul(o, this.activation.apply(c));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h, c];\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(LSTMCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport declare interface LSTMLayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf)\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *   Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions, whereas mode 2 will\n   *   batch them into fewer, larger operations. These modes will\n   *   have different performance profiles on different hardware and\n   *   for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this config field.\n   */\n  implementation?: number;\n}\n\nexport class LSTM extends RNN {\n  /** @nocollapse */\n  static override className = 'LSTM';\n  constructor(args: LSTMLayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new LSTMCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(LSTM);\n\nexport declare interface StackedRNNCellsArgs extends LayerArgs {\n  /**\n   * An `Array` of `RNNCell` instances.\n   */\n  cells: RNNCell[];\n}\n\nexport class StackedRNNCells extends RNNCell {\n  /** @nocollapse */\n  static className = 'StackedRNNCells';\n  protected cells: RNNCell[];\n\n  constructor(args: StackedRNNCellsArgs) {\n    super(args);\n    this.cells = args.cells;\n  }\n\n  get stateSize(): number[] {\n    // States are a flat list in reverse order of the cell stack.\n    // This allows perserving the requirement `stack.statesize[0] ===\n    // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n    // assuming one LSTM has states `[h, c]`.\n    const stateSize: number[] = [];\n    for (const cell of this.cells.slice().reverse()) {\n      if (Array.isArray(cell.stateSize)) {\n        stateSize.push(...cell.stateSize);\n      } else {\n        stateSize.push(cell.stateSize);\n      }\n    }\n    return stateSize;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      let states = inputs.slice(1);\n\n      // Recover per-cell states.\n      const nestedStates: Tensor[][] = [];\n      for (const cell of this.cells.slice().reverse()) {\n        if (Array.isArray(cell.stateSize)) {\n          nestedStates.push(states.splice(0, cell.stateSize.length));\n        } else {\n          nestedStates.push(states.splice(0, 1));\n        }\n      }\n      nestedStates.reverse();\n\n      // Call the cells in order and store the returned states.\n      const newNestedStates: Tensor[][] = [];\n      let callInputs: Tensor[];\n      for (let i = 0; i < this.cells.length; ++i) {\n        const cell = this.cells[i];\n        states = nestedStates[i];\n        // TODO(cais): Take care of constants.\n        if (i === 0) {\n          callInputs = [inputs[0]].concat(states);\n        } else {\n          callInputs = [callInputs[0]].concat(states);\n        }\n        callInputs = cell.call(callInputs, kwargs) as Tensor[];\n        newNestedStates.push(callInputs.slice(1));\n      }\n\n      // Format the new states as a flat list in reverse cell order.\n      states = [];\n      for (const cellStates of newNestedStates.slice().reverse()) {\n        states.push(...cellStates);\n      }\n      return [callInputs[0]].concat(states);\n    });\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    if (isArrayOfShapes(inputShape)) {\n      // TODO(cais): Take care of input constants.\n      // const constantShape = inputShape.slice(1);\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n    let outputDim: number;\n    this.cells.forEach((cell, i) => {\n      nameScope(`RNNCell_${i}`, () => {\n        // TODO(cais): Take care of input constants.\n\n        cell.build(inputShape);\n        if (Array.isArray(cell.stateSize)) {\n          outputDim = cell.stateSize[0];\n        } else {\n          outputDim = cell.stateSize;\n        }\n        inputShape = [inputShape[0], outputDim] as Shape;\n      });\n    });\n    this.built = true;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const getCellConfig = (cell: RNNCell) => {\n      return {\n        'className': cell.getClassName(),\n        'config': cell.getConfig(),\n      };\n    };\n\n    const cellConfigs = this.cells.map(getCellConfig);\n\n    const config = {'cells': cellConfigs};\n\n    return {...baseConfig, ...config};\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cells: RNNCell[] = [];\n    for (const cellConfig of (config['cells'] as serialization.ConfigDict[])) {\n      cells.push(deserialize(cellConfig, customObjects) as RNNCell);\n    }\n    return new cls({cells});\n  }\n\n  override get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.trainableWeights);\n    }\n    return weights;\n  }\n\n  override get nonTrainableWeights(): LayerVariable[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights: LayerVariable[] = [];\n      for (const cell of this.cells) {\n        trainableWeights.push(...cell.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n\n  /**\n   * Retrieve the weights of a the model.\n   *\n   * @returns A flat `Array` of `tf.Tensor`s.\n   */\n  override getWeights(): Tensor[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.weights);\n    }\n    return batchGetValue(weights);\n  }\n\n  /**\n   * Set the weights of the model.\n   *\n   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n   *     the output of `getWeights()`.\n   */\n  override setWeights(weights: Tensor[]): void {\n    const tuples: Array<[LayerVariable, Tensor]> = [];\n    for (const cell of this.cells) {\n      const numParams = cell.weights.length;\n      const inputWeights = weights.splice(numParams);\n      for (let i = 0; i < cell.weights.length; ++i) {\n        tuples.push([cell.weights[i], inputWeights[i]]);\n      }\n    }\n    batchSetValue(tuples);\n  }\n\n  // TODO(cais): Maybe implemnt `losses` and `getLossesFor`.\n}\nserialization.registerClass(StackedRNNCells);\n\nexport function generateDropoutMask(args: {\n  ones: () => tfc.Tensor,\n  rate: number,\n  training?: boolean,\n  count?: number,\n  dropoutFunc?: Function,\n}): tfc.Tensor|tfc.Tensor[] {\n  const {ones, rate, training = false, count = 1, dropoutFunc} = args;\n\n  const droppedInputs = () =>\n      dropoutFunc != null ? dropoutFunc(ones(), rate) : K.dropout(ones(), rate);\n\n  const createMask = () => K.inTrainPhase(droppedInputs, ones, training);\n\n  // just in case count is provided with null or undefined\n  if (!count || count <= 1) {\n    return tfc.keep(createMask().clone());\n  }\n\n  const masks = Array(count).fill(undefined).map(createMask);\n\n  return masks.map(m => tfc.keep(m.clone()));\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {Activation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkPaddingMode} from '../common';\nimport {Constraint} from '../constraints';\nimport {InputSpec} from '../engine/topology';\nimport {AttributeError, NotImplementedError, ValueError} from '../errors';\nimport {Initializer} from '../initializers';\nimport {DataFormat, DataType, PaddingMode, Shape} from '../keras_format/common';\nimport {Regularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength, normalizeArray} from '../utils/conv_utils';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport {getExactlyOneShape} from '../utils/types_utils';\n\nimport {BaseRNNLayerArgs, generateDropoutMask, LSTMCell, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNNCellLayerArgs} from './recurrent';\n\ndeclare interface ConvRNN2DCellArgs extends\n    Omit<SimpleRNNCellLayerArgs, 'units'> {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two or three integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number];\n}\n\nabstract class ConvRNN2DCell extends RNNCell {\n  readonly filters: number;\n  readonly kernelSize: number[];\n  readonly strides: number[];\n  readonly padding: PaddingMode;\n  readonly dataFormat: DataFormat;\n  readonly dilationRate: number[];\n\n  readonly activation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n}\n\ndeclare interface ConvRNN2DLayerArgs extends BaseRNNLayerArgs,\n                                             ConvRNN2DCellArgs {}\n\n/**\n * Base class for convolutional-recurrent layers.\n */\nclass ConvRNN2D extends RNN {\n  /** @nocollapse */\n  static override className = 'ConvRNN2D';\n\n  declare readonly cell: ConvRNN2DCell;\n\n  constructor(args: ConvRNN2DLayerArgs) {\n    if (args.unroll) {\n      throw new NotImplementedError(\n          'Unrolling is not possible with convolutional RNNs.');\n    }\n\n    if (Array.isArray(args.cell)) {\n      throw new NotImplementedError(\n          'It is not possible at the moment to stack convolutional cells.');\n    }\n\n    super(args as RNNLayerArgs);\n\n    this.inputSpec = [new InputSpec({ndim: 5})];\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      if (kwargs && kwargs['constants']) {\n        throw new ValueError('ConvRNN2D cell does not support constants');\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n\n      const training = kwargs == null ? null : kwargs['training'];\n\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape): Shape|Shape[] {\n    let outShape: Shape = this.computeSingleOutputShape(inputShape);\n\n    if (!this.returnSequences) {\n      outShape = [outShape[0], ...outShape.slice(2)];\n    }\n\n    if (this.returnState) {\n      outShape =\n          [outShape, ...Array(2).fill([inputShape[0], ...outShape.slice(-3)])];\n    }\n\n    return outShape;\n  }\n\n  override getInitialState(inputs: tfc.Tensor): tfc.Tensor[] {\n    return tfc.tidy(() => {\n      const {stateSize} = this.cell;\n\n      const inputShape = inputs.shape;\n\n      const outputShape = this.computeSingleOutputShape(inputShape);\n\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n\n      const initialState = tfc.zeros(stateShape);\n\n      if (Array.isArray(stateSize)) {\n        return Array(stateSize.length).fill(initialState);\n      }\n\n      return [initialState];\n    });\n  }\n\n  override resetStates(states?: Tensor|Tensor[], training = false): void {\n    tfc.tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\n            'Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n\n      const inputShape = this.inputSpec[0].shape;\n\n      const outputShape = this.computeSingleOutputShape(inputShape);\n\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n\n      const batchSize = inputShape[0];\n\n      if (batchSize == null) {\n        throw new ValueError(\n            'If an RNN is stateful, it needs to know its batch size. Specify ' +\n            'the batch size of your input tensors: \\n' +\n            '- If using a Sequential model, specify the batch size by ' +\n            'passing a `batchInputShape` option to your first layer.\\n' +\n            '- If using the functional API, specify the batch size by ' +\n            'passing a `batchShape` option to your Input layer.');\n      }\n\n      // Initialize state if null.\n      if (this.getStates() == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n        } else {\n          this.states_ = [tfc.zeros(stateShape)];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_);\n\n        // For stateful RNNs, fully dispose kept old states.\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n        } else {\n          this.states_[0] = tfc.zeros(stateShape);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n\n        if (states.length !== this.states_.length) {\n          throw new ValueError(\n              `Layer ${this.name} expects ${this.states_.length} state(s), ` +\n              `but it received ${states.length} state value(s). Input ` +\n              `received: ${states}`);\n        }\n\n        if (training) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n\n          const expectedShape = stateShape;\n\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(\n                `State ${index} is incompatible with layer ${this.name}: ` +\n                `expected shape=${expectedShape}, received shape=${\n                    value.shape}`);\n          }\n\n          this.states_[index] = value;\n        }\n      }\n\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  protected computeSingleOutputShape(inputShape: Shape): Shape {\n    const {dataFormat, filters, kernelSize, padding, strides, dilationRate} =\n        this.cell;\n\n    const isChannelsFirst = dataFormat === 'channelsFirst';\n\n    const h = inputShape[isChannelsFirst ? 3 : 2];\n    const w = inputShape[isChannelsFirst ? 4 : 3];\n\n    const hOut = convOutputLength(\n        h, kernelSize[0], padding, strides[0], dilationRate[0]);\n    const wOut = convOutputLength(\n        w, kernelSize[1], padding, strides[1], dilationRate[1]);\n\n    const outShape: Shape = [\n      ...inputShape.slice(0, 2),\n      ...(isChannelsFirst ? [filters, hOut, wOut] : [hOut, wOut, filters])\n    ];\n\n    return outShape;\n  }\n}\n\nexport declare interface ConvLSTM2DCellArgs extends\n    Omit<LSTMCellLayerArgs, 'units'>, ConvRNN2DCellArgs {}\n\nexport class ConvLSTM2DCell extends LSTMCell implements ConvRNN2DCell {\n  /** @nocollapse */\n  static override className = 'ConvLSTM2DCell';\n\n  readonly filters: number;\n  readonly kernelSize: number[];\n  readonly strides: number[];\n  readonly padding: PaddingMode;\n  readonly dataFormat: DataFormat;\n  readonly dilationRate: number[];\n\n  constructor(args: ConvLSTM2DCellArgs) {\n    const {\n      filters,\n      kernelSize,\n      strides,\n      padding,\n      dataFormat,\n      dilationRate,\n    } = args;\n\n    super({...args, units: filters});\n\n    this.filters = filters;\n    assertPositiveInteger(this.filters, 'filters');\n\n    this.kernelSize = normalizeArray(kernelSize, 2, 'kernelSize');\n    this.kernelSize.forEach(size => assertPositiveInteger(size, 'kernelSize'));\n\n    this.strides = normalizeArray(strides || 1, 2, 'strides');\n    this.strides.forEach(stride => assertPositiveInteger(stride, 'strides'));\n\n    this.padding = padding || 'valid';\n    checkPaddingMode(this.padding);\n\n    this.dataFormat = dataFormat || 'channelsLast';\n    checkDataFormat(this.dataFormat);\n\n    this.dilationRate = normalizeArray(dilationRate || 1, 2, 'dilationRate');\n    this.dilationRate.forEach(\n        rate => assertPositiveInteger(rate, 'dilationRate'));\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n\n    const numOfKernels = 4;\n\n    const kernelShape =\n        this.kernelSize.concat([inputDim, this.filters * numOfKernels]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n\n    const recurrentKernelShape =\n        this.kernelSize.concat([this.filters, this.filters * numOfKernels]);\n\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', recurrentKernelShape, null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n\n    if (this.useBias) {\n      let biasInitializer: Initializer;\n\n      if (this.unitForgetBias) {\n        const init = this.biasInitializer;\n\n        const filters = this.filters;\n\n        biasInitializer = new (class CustomInit extends Initializer {\n          /** @nocollapse */\n          static className = 'CustomInit';\n\n          apply(shape: Shape, dtype?: DataType): tfc.Tensor {\n            const biasI = init.apply([filters]);\n            const biasF = tfc.ones([filters]);\n            const biasCAndO = init.apply([filters * 2]);\n            return K.concatenate([biasI, biasF, biasCAndO]);\n          }\n        })();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n\n      this.bias = this.addWeight(\n          'bias', [this.filters * numOfKernels], null, biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.built = true;\n  }\n\n  override call(inputs: tfc.Tensor[], kwargs: Kwargs): tfc.Tensor[] {\n    return tfc.tidy(() => {\n      if (inputs.length !== 3) {\n        throw new ValueError(\n            `ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] || false;\n\n      const x = inputs[0];         // Current input\n      const hTMinus1 = inputs[1];  // Previous memory state.\n      const cTMinus1 = inputs[2];  // Previous carry state.\n\n      const numOfKernels = 4;\n\n      type DropoutMasks = [tfc.Tensor, tfc.Tensor, tfc.Tensor, tfc.Tensor];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(x),\n                             rate: this.dropout,\n                             training,\n                             count: numOfKernels,\n                             dropoutFunc: this.dropoutFunc\n                           }) as tfc.Tensor[];\n      }\n\n      const dropoutMask = this.dropoutMask as DropoutMasks;\n\n      const applyDropout =\n          (x: tfc.Tensor, mask: tfc.Tensor[], index: number) => {\n            if (!mask || !mask[index]) {\n              return x;\n            }\n\n            return tfc.mul(mask[index], x);\n          };\n\n      let xI = applyDropout(x, dropoutMask, 0);\n      let xF = applyDropout(x, dropoutMask, 1);\n      let xC = applyDropout(x, dropoutMask, 2);\n      let xO = applyDropout(x, dropoutMask, 3);\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: numOfKernels,\n                                      dropoutFunc: this.dropoutFunc\n                                    }) as tfc.Tensor[];\n      }\n\n      const recDropoutMask = this.recurrentDropoutMask as DropoutMasks;\n\n      let hI = applyDropout(hTMinus1, recDropoutMask, 0);\n      let hF = applyDropout(hTMinus1, recDropoutMask, 1);\n      let hC = applyDropout(hTMinus1, recDropoutMask, 2);\n      let hO = applyDropout(hTMinus1, recDropoutMask, 3);\n\n      const kernelChannelAxis = 3;\n\n      const [kernelI, kernelF, kernelC, kernelO]: tfc.Tensor[] =\n          tfc.split(this.kernel.read(), numOfKernels, kernelChannelAxis);\n\n      const [biasI, biasF, biasC, biasO]: tfc.Tensor[] = this.useBias ?\n          tfc.split(this.bias.read(), numOfKernels) :\n          [null, null, null, null];\n\n      xI = this.inputConv(xI, kernelI, biasI, this.padding);\n      xF = this.inputConv(xF, kernelF, biasF, this.padding);\n      xC = this.inputConv(xC, kernelC, biasC, this.padding);\n      xO = this.inputConv(xO, kernelO, biasO, this.padding);\n\n      const [recKernelI, recKernelF, recKernelC, recKernelO]: tfc.Tensor[] =\n          tfc.split(\n              this.recurrentKernel.read(), numOfKernels, kernelChannelAxis);\n\n      hI = this.recurrentConv(hI, recKernelI);\n      hF = this.recurrentConv(hF, recKernelF);\n      hC = this.recurrentConv(hC, recKernelC);\n      hO = this.recurrentConv(hO, recKernelO);\n\n      const i = this.recurrentActivation.apply(tfc.add(xI, hI));\n      const f = this.recurrentActivation.apply(tfc.add(xF, hF));\n      const c = tfc.add(\n          tfc.mul(f, cTMinus1),\n          tfc.mul(i, this.activation.apply(tfc.add(xC, hC))));\n      const h = tfc.mul(\n          this.recurrentActivation.apply(tfc.add(xO, hO)),\n          this.activation.apply(c));\n\n      return [h, h, c];\n    });\n  }\n\n  override getConfig(): tfc.serialization.ConfigDict {\n    const {'units': _, ...baseConfig} = super.getConfig();\n\n    const config: tfc.serialization.ConfigDict = {\n      filters: this.filters,\n      kernelSize: this.kernelSize,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      strides: this.strides,\n    };\n\n    return {...baseConfig, ...config};\n  }\n\n  inputConv(x: Tensor, w: Tensor, b?: Tensor, padding?: PaddingMode) {\n    const out = tfc.conv2d(\n        x as tfc.Tensor3D, w as tfc.Tensor4D, this.strides as [number, number],\n        (padding || 'valid') as 'same' | 'valid',\n        this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC',\n        this.dilationRate as [number, number]);\n\n    if (b) {\n      return K.biasAdd(out, b, this.dataFormat) as tfc.Tensor3D;\n    }\n\n    return out;\n  }\n\n  recurrentConv(x: Tensor, w: Tensor) {\n    const strides = 1;\n\n    return tfc.conv2d(\n        x as tfc.Tensor3D, w as tfc.Tensor4D, strides, 'same',\n        this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC');\n  }\n}\n\ntfc.serialization.registerClass(ConvLSTM2DCell);\n\nexport declare interface ConvLSTM2DArgs extends\n    Omit<LSTMLayerArgs, 'units'|'cell'>, ConvRNN2DLayerArgs {}\n\nexport class ConvLSTM2D extends ConvRNN2D {\n  /** @nocollapse */\n  static override className = 'ConvLSTM2D';\n\n  constructor(args: ConvLSTM2DArgs) {\n    const cell = new ConvLSTM2DCell(args);\n\n    super({...args, cell} as ConvRNN2DLayerArgs);\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends tfc.serialization.Serializable>(\n      cls: tfc.serialization.SerializableConstructor<T>,\n      config: tfc.serialization.ConfigDict): T {\n    return new cls(config);\n  }\n}\n\ntfc.serialization.registerClass(ConvLSTM2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Basic Layers.\n */\n\nimport {any, cast, mul, notEqual, reshape, serialization, Tensor, tidy, transpose, util} from '@tensorflow/tfjs-core';\n\nimport {Activation as ActivationFn, getActivation, serializeActivation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {DisposeResult, InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {LayerConfig} from '../keras_format/topology_config';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {assertPositiveInteger, mapActivationToFusedKernel} from '../utils/generic_utils';\nimport {arrayProd, range} from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface DropoutLayerArgs extends LayerArgs {\n  /** Float between 0 and 1. Fraction of the input units to drop. */\n  rate: number;\n\n  /**\n   * Integer array representing the shape of the binary dropout mask that will\n   * be multiplied with the input.\n   *\n   * For instance, if your inputs have shape `(batchSize, timesteps, features)`\n   * and you want the dropout mask to be the same for all timesteps, you can use\n   * `noise_shape=(batch_size, 1, features)`.\n   */\n  noiseShape?: number[];\n\n  /** An integer to use as random seed. */\n  seed?: number;\n}\n\nexport class Dropout extends Layer {\n  /** @nocollapse */\n  static className = 'Dropout';\n  private readonly rate: number;\n  private readonly noiseShape: number[];\n  private readonly seed: number;\n\n  constructor(args: DropoutLayerArgs) {\n    super(args);\n    this.rate = Math.max(Math.min(args.rate, 1), 0);\n    // So that the scalar doesn't get tidied up between executions.\n    this.noiseShape = args.noiseShape;\n    this.seed = args.seed;\n    this.supportsMasking = true;\n  }\n\n  protected getNoiseShape(input: Tensor): Shape {\n    if (this.noiseShape == null) {\n      return this.noiseShape;\n    }\n    const inputShape = input.shape;\n    const noiseShape: Shape = [];\n    for (let i = 0; i < this.noiseShape.length; ++i) {\n      noiseShape.push(\n          this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n    }\n    return noiseShape;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      if (0 < this.rate && this.rate < 1) {\n        const training =\n            kwargs['training'] == null ? false : kwargs['training'];\n        const noiseShape = this.getNoiseShape(input);\n        const output = K.inTrainPhase(\n            () => K.dropout(input, this.rate, noiseShape, this.seed),\n            () => input, training);\n        return output;\n      }\n      return inputs;\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      rate: this.rate,\n      noiseShape: this.noiseShape,\n      seed: this.seed,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override dispose(): DisposeResult {\n    return super.dispose();\n  }\n}\nserialization.registerClass(Dropout);\n\nexport declare interface DenseLayerArgs extends LayerArgs {\n  /** Positive integer, dimensionality of the output space. */\n  units: number;\n  /**\n   * Activation function to use.\n   *\n   * If unspecified, no activation is applied.\n   */\n  activation?: ActivationIdentifier;\n  /** Whether to apply a bias. */\n  useBias?: boolean;\n  /**\n   * Initializer for the dense kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * If specified, defines inputShape as `[inputDim]`.\n   */\n  inputDim?: number;\n\n  /**\n   * Constraint for the kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the dense kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport interface SpatialDropout1DLayerConfig extends LayerConfig {\n  /** Float between 0 and 1. Fraction of the input units to drop. */\n  rate: number;\n\n  /** An integer to use as random seed. */\n  seed?: number;\n}\n\nexport class SpatialDropout1D extends Dropout {\n  /** @nocollapse */\n  static override className = 'SpatialDropout1D';\n\n  constructor(args: SpatialDropout1DLayerConfig) {\n    super(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  protected override getNoiseShape(input: Tensor): Shape {\n    const inputShape = input.shape;\n    return [inputShape[0], 1, inputShape[2]];\n  }\n}\nserialization.registerClass(SpatialDropout1D);\n\nexport class Dense extends Layer {\n  /** @nocollapse */\n  static className = 'Dense';\n  private units: number;\n  // Default activation: Linear (none).\n  private activation: ActivationFn = null;\n  private useBias = true;\n  private kernelInitializer: Initializer;\n  private biasInitializer: Initializer;\n  private kernel: LayerVariable = null;\n  private bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n  private readonly kernelConstraint?: Constraint;\n  private readonly biasConstraint?: Constraint;\n  private readonly kernelRegularizer?: Regularizer;\n  private readonly biasRegularizer?: Regularizer;\n\n  constructor(args: DenseLayerArgs) {\n    super(args);\n    if (args.batchInputShape == null && args.inputShape == null &&\n        args.inputDim != null) {\n      // This logic is copied from Layer's constructor, since we can't\n      // do exactly what the Python constructor does for Dense().\n      let batchSize: number = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      this.batchInputShape = [batchSize, args.inputDim];\n    }\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(args.activation);\n    if (args.useBias != null) {\n      this.useBias = args.useBias;\n    }\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.supportsMasking = true;\n\n    this.inputSpec = [{minNDim: 2}];\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputLastDim = inputShape[inputShape.length - 1];\n    if (this.kernel == null) {\n      this.kernel = this.addWeight(\n          'kernel', [inputLastDim, this.units], null, this.kernelInitializer,\n          this.kernelRegularizer, true, this.kernelConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight(\n            'bias', [this.units], null, this.biasInitializer,\n            this.biasRegularizer, true, this.biasConstraint);\n      }\n    }\n\n    this.inputSpec = [{minNDim: 2, axes: {[-1]: inputLastDim}}];\n    this.built = true;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    outputShape[outputShape.length - 1] = this.units;\n    return outputShape;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Dense layer accepts only a single input.\n      const input = getExactlyOneTensor(inputs);\n      const fusedActivationName =\n          mapActivationToFusedKernel(this.activation.getClassName());\n      let output: Tensor;\n\n      if (fusedActivationName != null) {\n        output = K.dot(\n            input, this.kernel.read(), fusedActivationName,\n            this.bias ? this.bias.read() : null);\n      } else {\n        output = K.dot(input, this.kernel.read());\n        if (this.bias != null) {\n          output = K.biasAdd(output, this.bias.read());\n        }\n        if (this.activation != null) {\n          output = this.activation.apply(output);\n        }\n      }\n\n      return output;\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Dense);\n\nexport declare interface FlattenLayerArgs extends LayerArgs {\n  /** Image data format: channelsLast (default) or channelsFirst. */\n  dataFormat?: DataFormat;\n}\n\nexport class Flatten extends Layer {\n  private dataFormat: DataFormat;\n\n  /** @nocollapse */\n  static className = 'Flatten';\n  constructor(args?: FlattenLayerArgs) {\n    args = args || {};\n    super(args);\n    this.inputSpec = [{minNDim: 3}];\n    this.dataFormat = args.dataFormat;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    for (const dim of inputShape.slice(1)) {\n      if (dim == null) {\n        throw new ValueError(\n            `The shape of the input to \"Flatten\" is not fully defined ` +\n            `(got ${inputShape.slice(1)}). Make sure to pass a complete ` +\n            `\"input_shape\" or \"batch_input_shape\" argument to the first ` +\n            `layer in your model.`);\n      }\n    }\n    return [inputShape[0], arrayProd(inputShape, 1)];\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n\n      let input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsFirst' && input.rank > 1) {\n        const permutation: number[] = [0];\n        for (let i = 2; i < input.rank; ++i) {\n          permutation.push(i);\n        }\n        permutation.push(1);\n        input = transpose(input, permutation);\n      }\n\n      return K.batchFlatten(input);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {};\n    if (this.dataFormat != null) {\n      config['dataFormat'] = this.dataFormat;\n    }\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Flatten);\n\nexport declare interface ActivationLayerArgs extends LayerArgs {\n  /**\n   * Name of the activation function to use.\n   */\n  activation: ActivationIdentifier;\n}\n\nexport class Activation extends Layer {\n  /** @nocollapse */\n  static className = 'Activation';\n  activation: ActivationFn;\n\n  constructor(args: ActivationLayerArgs) {\n    super(args);\n    this.supportsMasking = true;\n    this.activation = getActivation(args.activation);\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      return this.activation.apply(input);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {activation: serializeActivation(this.activation)};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Activation);\n\nexport declare interface ReshapeLayerArgs extends LayerArgs {\n  /** The target shape. Does not include the batch axis. */\n  targetShape: Shape;\n}\n\nexport declare interface RepeatVectorLayerArgs extends LayerArgs {\n  /**\n   * The integer number of times to repeat the input.\n   */\n  n: number;\n}\n\nexport class RepeatVector extends Layer {\n  /** @nocollapse */\n  static className = 'RepeatVector';\n  readonly n: number;\n\n  constructor(args: RepeatVectorLayerArgs) {\n    super(args);\n    this.n = args.n;\n    this.inputSpec = [{ndim: 2}];\n  }\n\n  override computeOutputShape(inputShape: Shape): Shape {\n    return [inputShape[0], this.n, inputShape[1]];\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      return K.repeat(inputs, this.n);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      n: this.n,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(RepeatVector);\n\nexport class Reshape extends Layer {\n  /** @nocollapse */\n  static className = 'Reshape';\n  private targetShape: Shape;\n\n  constructor(args: ReshapeLayerArgs) {\n    super(args);\n    this.targetShape = args.targetShape;\n\n    // Make sure that all unknown dimensions are represented as `null`.\n    for (let i = 0; i < this.targetShape.length; ++i) {\n      if (this.isUnknown(this.targetShape[i])) {\n        this.targetShape[i] = null;\n      }\n    }\n  }\n\n  private isUnknown(dim: number): boolean {\n    return dim < 0 || dim == null;\n  }\n\n  /**\n   * Finds and replaces a missing dimension in output shape.\n   *\n   * This is a near direct port of the internal Numpy function\n   * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\n   *\n   * @param inputShape: Original shape of array begin reshape.\n   * @param outputShape: Target shape of the array, with at most a single\n   * `null` or negative number, which indicates an underdetermined dimension\n   * that should be derived from `inputShape` and the known dimensions of\n   *   `outputShape`.\n   * @returns: The output shape with `null` replaced with its computed value.\n   * @throws: ValueError: If `inputShape` and `outputShape` do not match.\n   */\n  private fixUnknownDimension(inputShape: Shape, outputShape: Shape): Shape {\n    const errorMsg = 'Total size of new array must be unchanged.';\n    const finalShape = outputShape.slice();\n    let known = 1;\n    let unknown = null;\n    for (let i = 0; i < finalShape.length; ++i) {\n      const dim = finalShape[i];\n      if (this.isUnknown(dim)) {\n        if (unknown === null) {\n          unknown = i;\n        } else {\n          throw new ValueError('Can only specifiy one unknown dimension.');\n        }\n      } else {\n        known *= dim;\n      }\n    }\n\n    const originalSize = arrayProd(inputShape);\n    if (unknown !== null) {\n      if (known === 0 || originalSize % known !== 0) {\n        throw new ValueError(errorMsg);\n      }\n      finalShape[unknown] = originalSize / known;\n    } else if (originalSize !== known) {\n      throw new ValueError(errorMsg);\n    }\n\n    return finalShape;\n  }\n\n  override computeOutputShape(inputShape: Shape): Shape {\n    let anyUnknownDims = false;\n    for (let i = 0; i < inputShape.length; ++i) {\n      if (this.isUnknown(inputShape[i])) {\n        anyUnknownDims = true;\n        break;\n      }\n    }\n\n    if (anyUnknownDims) {\n      return inputShape.slice(0, 1).concat(this.targetShape);\n    } else {\n      return inputShape.slice(0, 1).concat(\n          this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const outputShape = inputShape.slice(0, 1).concat(\n          this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n      return reshape(input, outputShape);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      targetShape: this.targetShape,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Reshape);\n\nexport declare interface PermuteLayerArgs extends LayerArgs {\n  /**\n   * Array of integers. Permutation pattern. Does not include the\n   * sample (batch) dimension. Index starts at 1.\n   * For instance, `[2, 1]` permutes the first and second dimensions\n   * of the input.\n   */\n  dims: number[];\n}\n\nexport class Permute extends Layer {\n  /** @nocollapse */\n  static className = 'Permute';\n  readonly dims: number[];\n  private readonly dimsIncludingBatch: number[];\n\n  constructor(args: PermuteLayerArgs) {\n    super(args);\n    if (args.dims == null) {\n      throw new Error(\n          'Required configuration field `dims` is missing during Permute ' +\n          'constructor call.');\n    }\n    if (!Array.isArray(args.dims)) {\n      throw new Error(\n          'Permute constructor requires `dims` to be an Array, but received ' +\n          `${args.dims} instead.`);\n    }\n\n    // Check the validity of the permutation indices.\n    const expectedSortedIndices = range(1, args.dims.length + 1);\n    if (!util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n      throw new Error(\n          'Invalid permutation `dims`: ' + JSON.stringify(args.dims) +\n          ' `dims` must contain consecutive integers starting from 1.');\n    }\n\n    this.dims = args.dims;\n    this.dimsIncludingBatch = [0].concat(this.dims);\n    this.inputSpec = [new InputSpec({ndim: this.dims.length + 1})];\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    this.dims.forEach((dim: number, i: number) => {\n      outputShape[i + 1] = (inputShape as Shape)[dim];\n    });\n    return outputShape;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      dims: this.dims,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Permute);\n\nexport declare interface MaskingArgs extends LayerArgs {\n  /**\n   * Masking Value. Defaults to `0.0`.\n   */\n  maskValue?: number;\n}\n\nexport class Masking extends Layer {\n  /** @nocollapse */\n  static className = 'Masking';\n  maskValue: number;\n\n  constructor(args?: MaskingArgs) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n    if (args != null) {\n      this.maskValue = args.maskValue == null ? 0 : args.maskValue;\n    } else {\n      this.maskValue = 0;\n    }\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {maskValue: this.maskValue};\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]):\n      Tensor {\n    const input = getExactlyOneTensor(inputs);\n    const axis = -1;\n    return any(notEqual(input, this.maskValue), axis);\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const axis = -1;\n      const keepDims = true;\n      const booleanMask = any(notEqual(input, this.maskValue), axis, keepDims);\n      const output = mul(input, cast(booleanMask, input.dtype));\n      return output;\n    });\n  }\n}\nserialization.registerClass(Masking);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport {notEqual, reshape, serialization, Tensor, tidy, zerosLike} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface EmbeddingLayerArgs extends LayerArgs {\n  /**\n   * Integer > 0. Size of the vocabulary, i.e. maximum integer index + 1.\n   */\n  inputDim: number;\n  /**\n   * Integer >= 0. Dimension of the dense embedding.\n   */\n  outputDim: number;\n  /**\n   * Initializer for the `embeddings` matrix.\n   */\n  embeddingsInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * Regularizer function applied to the `embeddings` matrix.\n   */\n  embeddingsRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Constraint function applied to the `embeddings` matrix.\n   */\n  embeddingsConstraint?: ConstraintIdentifier|Constraint;\n  /**\n   * Whether the input value 0 is a special \"padding\" value that should be\n   * masked out. This is useful when using recurrent layers which may take\n   * variable length input.\n   *\n   * If this is `True` then all subsequent layers in the model need to support\n   * masking or an exception will be raised. If maskZero is set to `True`, as a\n   * consequence, index 0 cannot be used in the vocabulary (inputDim should\n   * equal size of vocabulary + 1).\n   */\n  maskZero?: boolean;\n  /**\n   * Length of input sequences, when it is constant.\n   *\n   * This argument is required if you are going to connect `flatten` then\n   * `dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed).\n   */\n  inputLength?: number|number[];\n}\n\nexport class Embedding extends Layer {\n  /** @nocollapse */\n  static className = 'Embedding';\n  private inputDim: number;\n  private outputDim: number;\n  private embeddingsInitializer: Initializer;\n  private maskZero: boolean;\n  private inputLength: number|number[];\n\n  private embeddings: LayerVariable = null;\n\n  readonly DEFAULT_EMBEDDINGS_INITIALIZER: InitializerIdentifier =\n      'randomUniform';\n  private readonly embeddingsRegularizer?: Regularizer;\n  private readonly embeddingsConstraint?: Constraint;\n\n  constructor(args: EmbeddingLayerArgs) {\n    super(args);\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      let batchSize: number = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        this.batchInputShape =\n            [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n    this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n    this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n    this.embeddingsInitializer = getInitializer(\n        args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    this.embeddings = this.addWeight(\n        'embeddings', [this.inputDim, this.outputDim], this.dtype,\n        this.embeddingsInitializer, this.embeddingsRegularizer, true,\n        this.embeddingsConstraint);\n    this.built = true;\n  }\n\n  // Override warnOnIncompatibleInputShape because an embedding layer allows\n  // the input to have varying ranks.\n  protected override warnOnIncompatibleInputShape(inputShape: Shape) {}\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]):\n      Tensor {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs));\n      }\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    }\n    // inputLength can be an array if input is 3D or higher.\n    const inLens: number[] = generic_utils.toList(this.inputLength);\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(\n          `\"inputLength\" is ${this.inputLength}, but received ` +\n          `input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n        if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n          throw new ValueError(\n              `\"inputLength\" is ${this.inputLength}, but received ` +\n              `input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n        i++;\n      }\n    }\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Embedding layer accepts only a single input.\n      let input = getExactlyOneTensor(inputs);\n      if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n      }\n      const output =\n          K.gather(this.embeddings.read(), reshape(input, [input.size]));\n      return reshape(\n          output, getExactlyOneShape(this.computeOutputShape(input.shape)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Embedding);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Merge Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport {Layer, LayerArgs, SymbolicTensor} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {l2Normalize} from '../losses';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport {getExactlyOneShape} from '../utils/types_utils';\n\n/**\n * Generic Merge layer for element-wise merge functions.\n *\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\n */\nexport abstract class Merge extends Layer {\n  protected reshapeRequired: boolean;\n\n  constructor(args?: LayerArgs) {\n    super(args || {});\n    this.supportsMasking = true;\n  }\n\n  /**\n   * Logic for merging multiple tensors, to be overridden by subclasses.\n   * @param inputs\n   */\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    throw new NotImplementedError();\n  }\n\n  /**\n   * Computes the shape of the result of an elementwise operation.\n   *\n   * @param shape1: Shape of the first tensor.\n   * @param shape2: Shape of the second tensor.\n   * @returns Expected output shape when an elementwise operation is carried\n   *   out on 2 tensors with shapes `shape1` and `shape2`.\n   * @throws ValueError: If `shape1` and `shape2` are not compatible for\n   *   element-wise operations.\n   */\n  private computeElementwiseOpOutputShape(shape1: Shape, shape2: Shape): Shape {\n    if (shape1 == null || shape2 == null) {\n      return null;\n    } else if (shape1.length < shape2.length) {\n      return this.computeElementwiseOpOutputShape(shape2, shape1);\n    } else if (shape2.length === 0) {\n      return shape1;\n    }\n    const outputShape: Shape = shape1.slice(0, shape1.length - shape2.length);\n    for (let k = 0; k < shape2.length; ++k) {\n      const i = shape1[shape1.length - shape2.length + k];\n      const j = shape2[k];\n      if (i == null || j == null || i < 0 || j < 0) {\n        outputShape.push(null);\n      } else if (i === 1) {\n        outputShape.push(j);\n      } else if (j === 1) {\n        outputShape.push(i);\n      } else {\n        if (i !== j) {\n          throw new ValueError(\n              'Operands could not be broadcast together with shapes ' +\n              JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n        }\n        outputShape.push(i);\n      }\n    }\n    return outputShape;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    // Used purely for shape validation.\n    if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n      // Make sure that inputShape is an Array of shape.\n      inputShape = [getExactlyOneShape(inputShape)];\n    }\n    inputShape = inputShape as Shape[];\n    if (inputShape.length < 2) {\n      throw new ValueError(\n          'A merge layer should be called on an Array of at least 2 inputs.' +\n          ` Got ${inputShape.length} input(s).`);\n    }\n\n    // Make sure that there is at most one unique batch size among the input\n    // shapes.\n    let batchSizes: number[] = [];\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n    batchSizes = generic_utils.unique(batchSizes);\n    if (batchSizes.length > 1) {\n      throw new ValueError(\n          `Can not merge tensors with different batch sizes. ` +\n          `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);\n    }\n\n    let outputShape: Shape =\n        inputShape[0] == null ? null : inputShape[0].slice(1);\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n    // If the inputs have different ranks, we have to reshape them to make them\n    // broadcastable.\n    const allRanks = inputShape.map(shape => shape.length);\n    if (inputShape.indexOf(null) === -1 &&\n        generic_utils.unique(allRanks).length === 1) {\n      this.reshapeRequired = false;\n    } else {\n      this.reshapeRequired = true;\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (this.reshapeRequired) {\n        const reshapedInputs: Tensor[] = [];\n        const inputDims = inputs.map(input => input.rank);\n        if (inputDims.indexOf(null) === -1) {\n          // If ranks of all inputs are available, we simply expand each of them\n          // at axis=1 until all of them have the same rank.\n          const maxNDim = mathUtils.max(inputDims);\n          for (let x of inputs) {\n            const xNDim = x.rank;\n            for (let k = 0; k < maxNDim - xNDim; ++k) {\n              x = K.expandDims(x, 1);\n            }\n            reshapedInputs.push(x);\n          }\n          return this.mergeFunction(reshapedInputs);\n        } else {\n          // Transpose all inputs so that batch size is the last dimension.\n          // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\n          let transposed = false;\n          for (const x of inputs) {\n            const xNDim = x.rank;\n            if (xNDim == null) {\n              const xShape = x.shape;\n              const batchSize = xShape[0];\n              const newShape = xShape.slice(1).concat([batchSize]);\n              let xTransposed = tfc.reshape(\n                  x, [batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n              xTransposed = tfc.transpose(xTransposed, [1, 0]);\n              xTransposed = tfc.reshape(xTransposed, newShape);\n              reshapedInputs.push(xTransposed);\n              transposed = true;\n            } else if (xNDim > 1) {\n              const dims = mathUtils.range(1, xNDim).concat([0]);\n              reshapedInputs.push(tfc.transpose(x, dims));\n              transposed = true;\n            } else {\n              // We don't transpose inputs if they are 1D vectors or scalars.\n              reshapedInputs.push(x);\n            }\n          }\n          let y = this.mergeFunction(reshapedInputs);\n          const yNDim = y.rank;\n          if (transposed) {\n            // If inputs have been transposed, we have to transpose the output\n            // too.\n            if (yNDim == null) {\n              const yShape = y.shape;\n              const yNDim = yShape.length;\n              const batchSize = yShape[yNDim - 1];\n              const newShape =\n                  [batchSize].concat(yShape.slice(0, yShape.length - 1));\n              y = tfc.reshape(\n                  tfc.transpose(tfc.reshape(y, [-1, batchSize]), [1, 0]),\n                  newShape);\n            } else if (yNDim > 1) {\n              const dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n              y = tfc.transpose(y, dims);\n            }\n          }\n          return y;\n        }\n      } else {\n        return this.mergeFunction(inputs);\n      }\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = inputShape as Shape[];\n    let outputShape: Shape;\n    if (inputShape[0] == null) {\n      outputShape = null;\n    } else {\n      outputShape = inputShape[0].slice(1);\n    }\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n\n    let batchSizes: number[] = [];\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n    batchSizes = generic_utils.unique(batchSizes);\n    if (batchSizes.length === 1) {\n      outputShape = batchSizes.concat(outputShape);\n    } else {\n      outputShape = [null].concat(outputShape);\n    }\n    return outputShape;\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]):\n      Tensor {\n    return tfc.tidy(() => {\n      if (mask == null) {\n        return null;\n      }\n      if (!Array.isArray(mask)) {\n        throw new ValueError('`mask` should be an Array');\n      }\n      if (!Array.isArray(inputs)) {\n        throw new ValueError('`inputs` should be an Array');\n      }\n      if (mask.length !== inputs.length) {\n        throw new ValueError(\n            `The Array 'inputs' and 'mask' are expected to have the same ` +\n            `length, but have different lengths ` +\n            `(${inputs.length} vs ${mask.length})`);\n      }\n      if (mask.every(m => m == null)) {\n        return null;\n      }\n      mask = mask.map(m => m == null ? m : tfc.expandDims(m, 0));\n      let output = mask[0];\n      for (let i = 1; i < mask.length - 1; ++i) {\n        output = tfc.logicalAnd(output, mask[i]);\n      }\n      return output;\n    });\n  }\n}\n\nexport class Add extends Merge {\n  /** @nocollapse */\n  static className = 'Add';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.add(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Add);\n\n/**\n * Calculate the element-wise sum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Add` layer, by using no input argument\n *    or a single configuration argument. The resultant `Add` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const addLayer = tf.layers.add();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = addLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.add([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.add([input1, input2]).print();\n * // Gives [[11, 22], [33, 44]].\n *\n */\nexport function add(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Add({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Add(config);\n  }\n}\n\nexport class Multiply extends Merge {\n  /** @nocollapse */\n  static className = 'Multiply';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.mul(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Multiply);\n\n/**\n * Calculate the element-wise product of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Multiply` layer, by using no input argument\n *    or a single configuration argument. The resultant `Multiply` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const multiplyLayer = tf.layers.multiply();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = multiplyLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.multiply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.multiply([input1, input2]).print();\n * // Gives [[10, 40], [90, 160]].\n *\n */\nexport function multiply(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Multiply({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Multiply(config);\n  }\n}\n\nexport class Average extends Merge {\n  /** @nocollapse */\n  static className = 'Average';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.add(output, inputs[i]);\n      }\n      return tfc.mul(1 / inputs.length, output);\n    });\n  }\n}\nserialization.registerClass(Average);\n\n/**\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\n * shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Average` layer, by using no input argument\n *    or a single configuration argument. The resultant `Average` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const averageLayer = tf.layers.average();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = averageLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.average([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.average([input1, input2]).print();\n * // Gives [[5.5, 11], [16.5, 22]].\n *\n */\nexport function average(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Average({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Average(config);\n  }\n}\n\nexport class Maximum extends Merge {\n  /** @nocollapse */\n  static className = 'Maximum';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0];\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.maximum(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Maximum);\n\n/**\n * Calculate the element-wise maximum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Maximum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Maximum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const maximumLayer = tf.layers.maximum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = maximumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.maximum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.maximum([input1, input2]).print();\n * // Gives [[10, 20], [30, 40]].\n *\n */\nexport function maximum(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Maximum({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Maximum(config);\n  }\n}\n\nexport class Minimum extends Merge {\n  /** @nocollapse */\n  static className = 'Minimum';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0];\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.minimum(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Minimum);\n\n/**\n * Calculate the element-wise minimum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Minimum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Minimum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const minimumLayer = tf.layers.minimum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = minimumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.minimum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.minimum([input1, input2]).print();\n * // Gives [[1, 2], [3, 4]].\n *\n */\nexport function minimum(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Minimum({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Minimum(config);\n  }\n}\n\nexport declare interface ConcatenateLayerArgs extends LayerArgs {\n  /**\n   * Axis along which to concatenate.\n   */\n  axis?: number;\n}\n\nexport class Concatenate extends Merge {\n  /** @nocollapse */\n  static className = 'Concatenate';\n  readonly DEFAULT_AXIS = -1;\n  private readonly axis: number;\n\n  constructor(args?: ConcatenateLayerArgs) {\n    super(args);\n    if (args == null) {\n      args = {};\n    }\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    // Used purely for shape validation.]\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) ||\n        inputShape.length === 1) {\n      throw new ValueError(\n          'A `Concatenate` layer should be called on a list of at least 2 ' +\n          'inputs');\n    }\n    inputShape = inputShape as Shape[];\n\n    let allNoneShape = true;\n    for (const shape of inputShape) {\n      if (shape != null) {\n        allNoneShape = false;\n        break;\n      }\n    }\n    if (allNoneShape) {\n      return;\n    }\n\n    const shapeSet: Shape[] = [];\n    for (let i = 0; i < inputShape.length; ++i) {\n      const shapeWithoutConcatAxis = inputShape[i].slice();\n      shapeWithoutConcatAxis.splice(this.axis, 1);\n      let exists = false;\n      for (const shape of shapeSet) {\n        if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n          exists = true;\n          break;\n        }\n      }\n      if (!exists) {\n        shapeSet.push(shapeWithoutConcatAxis);\n      }\n    }\n    if (shapeSet.length > 1) {\n      throw new ValueError(\n          'A `Concatenate` layer requires inputs with matching shapes ' +\n          'except for the concat axis. Got input shapes: ' +\n          JSON.stringify(inputShape));\n    }\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      return K.concatenate(inputs, this.axis);\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n      throw new ValueError(\n          'A `Concatenate` layer should be called on a list of inputs.');\n    }\n    const inputShapes = inputShape as Shape[];\n    const outputShape = inputShapes[0].slice();\n    const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n    // Porting Note: the line above is because TypeScript doesn't support\n    //   negative indices.\n    for (const shape of inputShapes.slice(1)) {\n      if (outputShape[axis] == null || shape[axis] == null) {\n        outputShape[axis] = null;\n        break;\n      }\n      outputShape[axis] += shape[axis];\n    }\n    return outputShape;\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]):\n      Tensor {\n    if (mask == null) {\n      return null;\n    }\n    if (!Array.isArray(mask)) {\n      throw new ValueError('`mask` should be an array for Concatenate');\n    }\n    if (!Array.isArray(inputs)) {\n      throw new ValueError('`inputs` should be an array for Concatenate');\n    }\n    if (mask.length !== inputs.length) {\n      throw new ValueError(\n          `Mismatch in the length of mask (${mask.length}) ` +\n          `and the legnth of inputs (${inputs.length})`);\n    }\n    return tfc.tidy(() => {\n      let allNullMasks = true;\n      mask.forEach(m => {\n        if (m != null) {\n          allNullMasks = false;\n          return;\n        }\n      });\n      if (allNullMasks) {\n        return null;\n      }\n      const outputMasks: Tensor[] = [];\n      for (let i = 0; i < inputs.length; ++i) {\n        if (mask[i] == null) {\n          // Input is unmasked. Append all 1's to masks.\n          outputMasks.push(tfc.cast(tfc.onesLike(inputs[i]), 'bool'));\n        } else if (mask[i].rank < inputs[i].rank) {\n          // Mask is smaller than the input, expand it.\n          outputMasks.push(tfc.expandDims(mask[i], -1));\n        } else {\n          outputMasks.push(mask[i]);\n        }\n      }\n      const concatenatedMasks = tfc.concat(outputMasks, this.axis);\n      return tfc.all(concatenatedMasks, -1, false);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'axis': this.axis,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Concatenate);\n\n/**\n * Concatenate an `Array` of inputs.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\n *    or a single configuration argument. The resultant `Concatenate` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const concatLayer = tf.layers.concatenate();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = concatLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = tf.layers.concatenate([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\n * tf.layers.concatenate([input1, input2]).print();\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\n *\n */\nexport function concatenate(config?: SymbolicTensor[]|Tensor[]|\n                            ConcatenateLayerArgs): Layer|SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Concatenate({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Concatenate(config);\n  }\n}\n\nexport declare interface DotLayerArgs extends LayerArgs {\n  /**\n   * Axis or axes along which the dot product will be taken.\n   *\n   * Integer or an Array of integers.\n   */\n  axes: number|[number, number];\n\n  /**\n   * Whether to L2-normalize samples along the dot product axis\n   * before taking the dot product.\n   *\n   * If set to `true`, the output of the dot product is the cosine\n   * proximity between the two samples.\n   */\n  normalize?: boolean;\n}\n\n/**\n * Interpretable potentially negative axis index.\n *\n * For example, given axis = -1, and dim = 3, this function will return 2.\n *\n * @param axis The axis index, may be a positive, zero or negative integer.\n * @param dim Total number of dimensions, a positive integer.\n * @returns A non-negative axis index equivalent to the input `axis`.\n */\nfunction interpretAxis(axis: number, dim: number): number {\n  while (axis < 0) {\n    axis += dim;\n  }\n  return axis;\n}\n\nfunction batchDot(x: Tensor, y: Tensor, axes: number|[number, number]): Tensor {\n  if (x.shape.length > 3 || y.shape.length > 3) {\n    throw new NotImplementedError(\n        'batchDot is not implemented for tensors of 4D or higher rank yet');\n  }\n  tfc.util.assert(\n      x.shape.length >= 2,\n      () => `batchDot requires the rank of x to be >= 2, ` +\n          `but got ${x.shape.length}`);\n  tfc.util.assert(\n      x.shape.length >= 2,\n      () => `batchDot requires the rank of y to be >= 2, ` +\n          `but got ${y.shape.length}`);\n\n  if (typeof axes === 'number') {\n    axes = [axes, axes];\n  }\n\n  if (x.dtype === 'complex64' || y.dtype === 'complex64') {\n    throw new NotImplementedError(\n        'batchDot is not implemented for complex64-type Tensors yet.');\n  }\n\n  const xNDim = x.shape.length;\n  const yNDim = y.shape.length;\n  if (axes == null) {\n    // Behave like batchMatmul by default.\n    axes = [xNDim - 1, yNDim - 2];\n  }\n  const axesArray = axes as [number, number];\n\n  return tfc.tidy(() => {\n    let diff: number;\n    if (xNDim > yNDim) {\n      diff = xNDim - yNDim;\n      const diffShape: Shape = [];\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      y = tfc.reshape(y, y.shape.concat(diffShape));\n    } else if (yNDim > xNDim) {\n      diff = yNDim - xNDim;\n      const diffShape: Shape = [];\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      x = tfc.reshape(x, x.shape.concat(diffShape));\n    } else {\n      diff = 0;\n    }\n\n    let out: Tensor;\n    if (x.shape.length === 2 && y.shape.length === 2) {\n      if (axesArray[0] === axesArray[1]) {\n        out = tfc.sum(tfc.mul(x, y), axesArray[0]);\n      } else {\n        out = tfc.sum(tfc.mul(tfc.transpose(x, [1, 0]), y), axesArray[1]);\n      }\n    } else {\n      const adjX = axesArray[0] !== x.shape.length - 1;\n      const adjY = axesArray[1] === y.shape.length - 1;\n      out = tfc.matMul(x, y, adjX, adjY);\n    }\n\n    if (diff > 0) {\n      let idx: number;\n      if (xNDim > yNDim) {\n        idx = xNDim + yNDim - 3;\n      } else {\n        idx = xNDim - 1;\n      }\n      const squeezeAxes: number[] = [];\n      for (let i = idx; i < idx + diff; ++i) {\n        squeezeAxes.push(i);\n      }\n      out = tfc.squeeze(out, squeezeAxes);\n    }\n    if (out.shape.length === 1) {\n      out = tfc.expandDims(out, 1);\n    }\n    return out;\n  });\n}\n\nexport class Dot extends Merge {\n  /** @nocollapse */\n  static className = 'Dot';\n\n  private axes: number|[number, number];\n  private normalize: boolean;\n\n  constructor(args: DotLayerArgs) {\n    super(args);\n    this.axes = args.axes;\n    this.normalize = args.normalize == null ? false : args.normalize;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    tfc.util.assert(\n        Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]),\n        () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n    const shape1 = inputShape[0] as Shape;\n    const shape2 = inputShape[1] as Shape;\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError(\n          'Dot layer does not support tensors of 4D or higher rank yet.');\n    }\n\n    const axes = this.interpretAxes(shape1, shape2);\n    if (shape1[axes[0]] !== shape2[axes[1]]) {\n      throw new ValueError(\n          `Dimension incompatibility: ` +\n          `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);\n    }\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    if (inputs.length !== 2) {\n      throw new ValueError(\n          'A `Dot` layer must be called on exactly 2 inputs, ' +\n          `but received ${inputs.length} input(s).`);\n    }\n\n    let x1 = inputs[0];\n    let x2 = inputs[1];\n    let axes: [number, number];\n    if (!Array.isArray(this.axes)) {\n      axes = [\n        interpretAxis(this.axes, x1.shape.length),\n        interpretAxis(this.axes, x2.shape.length)\n      ];\n    } else {\n      axes = this.axes.map(\n                 (axis, i) => interpretAxis(\n                     axis, inputs[i].shape.length)) as [number, number];\n    }\n    if (this.normalize) {\n      x1 = l2Normalize(x1, axes[0]);\n      x2 = l2Normalize(x2, axes[1]);\n    }\n    return batchDot(x1, x2, axes);\n  }\n\n  private interpretAxes(shape1: Shape, shape2: Shape): number[] {\n    let axes: number[];\n    if (!Array.isArray(this.axes)) {\n      // `this.axes` is a single integer.\n      axes = [\n        interpretAxis(this.axes, shape1.length),\n        interpretAxis(this.axes, shape2.length)\n      ];\n    } else {\n      // `this.axes` is an Array of integers.\n      axes = this.axes;\n    }\n    return axes;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    tfc.util.assert(\n        Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]),\n        () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n    const shape1 = (inputShape[0] as Shape).slice();\n    const shape2 = (inputShape[1] as Shape).slice();\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError(\n          'Dot layer does not support tensors of 4D or higher rank yet.');\n    }\n\n    const axes = this.interpretAxes(shape1, shape2);\n    shape1.splice(axes[0], 1);\n    shape2.splice(axes[1], 1);\n    shape2.splice(0, 1);\n    const outputShape = shape1.concat(shape2);\n    if (outputShape.length === 1) {\n      outputShape.push(1);\n    }\n    return outputShape;\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]):\n      Tensor {\n    return null;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'axes': this.axes,\n      'normalize': this.normalize\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Dot);\n\n// TODO(cais): Add functional interfaces for the merge layers.\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\n\nimport {add, greaterEqual, mul, randomUniform, serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\nimport {getExactlyOneTensor} from '../utils/types_utils';\n\nexport declare interface GaussianNoiseArgs extends LayerArgs {\n  /** Standard Deviation.  */\n  stddev: number;\n}\n\nexport class GaussianNoise extends Layer {\n  /** @nocollapse */\n  static className = 'GaussianNoise';\n  readonly stddev: number;\n\n  constructor(args: GaussianNoiseArgs) {\n    super(args);\n    this.supportsMasking = true;\n    this.stddev = args.stddev;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {stddev: this.stddev};\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const noised = () =>\n          add(K.randomNormal(input.shape, 0, this.stddev), input);\n      const output =\n          K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n      return output;\n    });\n  }\n}\nserialization.registerClass(GaussianNoise);\n\nexport declare interface GaussianDropoutArgs extends LayerArgs {\n  /** drop probability.  */\n  rate: number;\n}\n\nexport class GaussianDropout extends Layer {\n  /** @nocollapse */\n  static className = 'GaussianDropout';\n  readonly rate: number;\n\n  constructor(args: GaussianDropoutArgs) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {rate: this.rate};\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      if (this.rate > 0 && this.rate < 1) {\n        const noised = () => {\n          const stddev = Math.sqrt(this.rate / (1 - this.rate));\n          return mul(input, K.randomNormal(input.shape, 1, stddev));\n        };\n        return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n      }\n      return input;\n    });\n  }\n}\nserialization.registerClass(GaussianDropout);\n\nexport declare interface AlphaDropoutArgs extends LayerArgs {\n  /** drop probability.  */\n  rate: number;\n  /**\n   * A 1-D `Tensor` of type `int32`, representing the\n   * shape for randomly generated keep/drop flags.\n   */\n  noiseShape?: Shape;\n}\n\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\nexport class AlphaDropout extends Layer {\n  /** @nocollapse */\n  static className = 'AlphaDropout';\n  readonly rate: number;\n  readonly noiseShape: Shape;\n\n  constructor(args: AlphaDropoutArgs) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n    this.noiseShape = args.noiseShape;\n  }\n\n  _getNoiseShape(inputs: Tensor|Tensor[]) {\n    return this.noiseShape || getExactlyOneTensor(inputs).shape;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {rate: this.rate};\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.rate < 1 && this.rate > 0) {\n        const noiseShape = this._getNoiseShape(inputs);\n\n        const droppedInputs = () => {\n          const input = getExactlyOneTensor(inputs);\n\n          const alpha = 1.6732632423543772848170429916717;\n          const scale = 1.0507009873554804934193349852946;\n\n          const alphaP = -alpha * scale;\n\n          let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n\n          keptIdx = K.cast(keptIdx, 'float32');  // get default dtype.\n\n          // Get affine transformation params.\n          const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n          const b = -a * alphaP * this.rate;\n\n          // Apply mask.\n          const x = add(mul(input, keptIdx), mul(add(keptIdx, -1), alphaP));\n\n          return add(mul(x, a), b);\n        };\n        return K.inTrainPhase(\n            droppedInputs, () => getExactlyOneTensor(inputs),\n            kwargs['training'] || false);\n      }\n      return inputs;\n    });\n  }\n}\nserialization.registerClass(AlphaDropout);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Normalization layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {moments, reshape, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Applies batch normalization on x given mean, var, beta and gamma.\n *\n * I.e. returns:\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n *\n * @param x Input tensor.\n * @param mean Mean of batch.\n * @param variance Variance of batch.\n * @param beta Tensor with which to center the input.\n * @param gamma Tensor by which to scale the input.\n * @param epsilon Fuzz factor.\n * @returns The result of the batch normalization.\n */\nexport function batchNormalization(\n    x: Tensor, mean: Tensor, variance: Tensor, beta?: Tensor, gamma?: Tensor,\n    epsilon = 1e-3): Tensor {\n  let out: Tensor;\n  if (x.rank === 2) {\n    out = tfc.batchNorm2d(\n        x as Tensor2D, mean as Tensor2D | Tensor1D,\n        variance as Tensor2D | Tensor1D, beta as Tensor2D | Tensor1D,\n        gamma as Tensor2D | Tensor1D, epsilon);\n  } else if (x.rank === 3) {\n    // TODO(cais): Check rank; give proper error message.\n    out = tfc.batchNorm3d(\n        x as Tensor3D, mean as Tensor3D | Tensor1D,\n        variance as Tensor3D | Tensor1D, beta as Tensor3D | Tensor1D,\n        gamma as Tensor3D | Tensor1D, epsilon);\n  } else if (x.rank === 4) {\n    out = tfc.batchNorm4d(\n        x as Tensor4D, mean as Tensor4D | Tensor1D,\n        variance as Tensor4D | Tensor1D, beta as Tensor4D | Tensor1D,\n        gamma as Tensor4D | Tensor1D, epsilon);\n  } else {\n    throw new NotImplementedError(\n        `batchNormalization is not implemented for array of rank ${x.rank} ` +\n        `yet`);\n  }\n  return out;\n}\n\n/**\n * Non-broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction regularNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const normed =\n               batchNormalization(x, mean, variance, beta, gamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction broadcastNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const targetShape: number[] = [];\n           for (const axis of math_utils.range(0, x.rank)) {\n             if (reductionAxes.indexOf(axis) !== -1) {\n               targetShape.push(1);\n             } else {\n               targetShape.push(x.shape[axis]);\n             }\n           }\n           const broadcastMean = reshape(mean, targetShape);\n           const broadcastVariance = reshape(variance, targetShape);\n           const broadcastGamma =\n               gamma == null ? null : reshape(gamma, targetShape);\n           const broadcastBeta =\n               beta == null ? null : reshape(beta, targetShape);\n           const normed = batchNormalization(\n               x, broadcastMean, broadcastVariance, broadcastBeta,\n               broadcastGamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Batch normalization for use in training (not inference).\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nexport function normalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  if (util.arraysEqual(\n          reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n    return regularNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  } else {\n    return broadcastNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  }\n}\n\nexport declare interface BatchNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The integer axis that should be normalized (typically the features axis).\n   * Defaults to -1.\n   *\n   * For instance, after a `Conv2D` layer with `data_format=\"channels_first\"`,\n   * set `axis=1` in `batchNormalization`.\n   */\n  axis?: number;\n\n  /**\n   * Momentum of the moving average. Defaults to 0.99.\n   */\n  momentum?: number;\n\n  /**\n   * Small float added to the variance to avoid dividing by zero. Defaults to\n   * 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Defaults to `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear (also e.g. `nn.relu`),\n   * this can be disabled since the scaling will be done by the next layer.\n   * Defaults to `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   *  Defaults to 'zeros'.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   *  Defaults to `ones`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving mean.\n   * Defaults to `zeros`\n   */\n  movingMeanInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving variance.\n   *  Defaults to 'Ones'.\n   */\n  movingVarianceInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the beta weight.\n   */\n  betaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for gamma weight.\n   */\n  gammaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer for the beta weight.\n   */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer for the gamma weight.\n   */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class BatchNormalization extends Layer {\n  /** @nocollapse */\n  static className = 'BatchNormalization';\n  private readonly axis: number;\n  private readonly momentum: number;\n  private readonly epsilon: number;\n  private readonly center: boolean;\n  private readonly scale: boolean;\n  private readonly betaInitializer: Initializer;\n  private readonly gammaInitializer: Initializer;\n  private readonly movingMeanInitializer: Initializer;\n  private readonly movingVarianceInitializer: Initializer;\n  private readonly betaConstraint: Constraint;\n  private readonly gammaConstraint: Constraint;\n  private readonly betaRegularizer: Regularizer;\n  private readonly gammaRegularizer: Regularizer;\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n  private movingMean: LayerVariable;\n  private movingVariance: LayerVariable;\n\n  constructor(args?: BatchNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.supportsMasking = true;\n    this.axis = args.axis == null ? -1 : args.axis;\n    this.momentum = args.momentum == null ? 0.99 : args.momentum;\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.movingMeanInitializer =\n        getInitializer(args.movingMeanInitializer || 'zeros');\n    this.movingVarianceInitializer =\n        getInitializer(args.movingVarianceInitializer || 'ones');\n    this.betaConstraint = getConstraint(args.betaConstraint);\n    this.gammaConstraint = getConstraint(args.gammaConstraint);\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\n    const dim = inputShape[axis];\n    if (dim == null) {\n      throw new ValueError(\n          `Axis ${axis} of input tensor should have a defined dimension but ` +\n          `the layer received an input with shape ` +\n          `${JSON.stringify(inputShape)}.`);\n    }\n    this.inputSpec =\n        [new InputSpec({ndim: inputShape.length, axes: {[axis]: dim}})];\n    const shape = [dim];\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', shape, null, this.gammaInitializer, this.gammaRegularizer,\n          true, this.gammaConstraint);\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', shape, null, this.betaInitializer, this.betaRegularizer, true,\n          this.betaConstraint);\n    }\n    this.movingMean = this.addWeight(\n        'moving_mean', shape, null, this.movingMeanInitializer, null, false);\n    this.movingVariance = this.addWeight(\n        'moving_variance', shape, null, this.movingVarianceInitializer, null,\n        false);\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const ndim = inputShape.length;\n      const reductionAxes = math_utils.range(0, ndim);\n      const axis = this.axis >= 0 ? this.axis : (this.axis + ndim);\n      reductionAxes.splice(axis, 1);\n      const broadcastShape = generic_utils.pyListRepeat(1, ndim);\n      broadcastShape[axis] = inputShape[axis];\n\n      const sortedReductionAxes = reductionAxes.slice();\n      sortedReductionAxes.sort();\n      const needsBroadcasting = !util.arraysEqual(\n          sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n\n      const normalizeInference: () => Tensor = () => {\n        if (needsBroadcasting) {\n          const broadcastMovingMean =\n              reshape(this.movingMean.read(), broadcastShape);\n          const broadcastMovingVariance =\n              reshape(this.movingVariance.read(), broadcastShape);\n          const broadcastBeta =\n              this.center ? reshape(this.beta.read(), broadcastShape) : null;\n          const broadcastGamma =\n              this.scale ? reshape(this.gamma.read(), broadcastShape) : null;\n          return batchNormalization(\n              input, broadcastMovingMean, broadcastMovingVariance,\n              broadcastBeta, broadcastGamma, this.epsilon);\n        } else {\n          return batchNormalization(\n              input, this.movingMean.read(), this.movingVariance.read(),\n              this.beta == null ? null : this.beta.read(),\n              this.gamma == null ? null : this.gamma.read(), this.epsilon);\n        }\n      };\n\n      if (!training) {\n        return normalizeInference();\n      }\n\n      const [normedTraining, mean, variance] = normalizeBatchInTraining(\n          input, this.gamma.read(), this.beta.read(), reductionAxes,\n          this.epsilon);\n\n      const doMovingAverage =\n          (variable: LayerVariable, value: Tensor, momentum: number): void => {\n            tfc.tidy(() => {\n              const decay = 1 - momentum;\n              const origValue = variable.read();\n              const updateDelta = tfc.mul(tfc.sub(origValue, value), decay);\n              variable.write(tfc.sub(origValue, updateDelta));\n            });\n          };\n\n      // Perform updates to moving mean and moving variance for training.\n      // Porting Note: In PyKeras, these updates to `movingMean` and\n      //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n      //   `update`s using the `add_update()` method. Here we do it imperatively\n      //   and encapsulate the updates in a function that is invoked\n      //   immediately.\n      const updateMovingMeanAndVariance = () => {\n        doMovingAverage(this.movingMean, mean, this.momentum);\n        doMovingAverage(this.movingVariance, variance, this.momentum);\n      };\n      updateMovingMeanAndVariance();\n\n      return normedTraining;\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      momentum: this.momentum,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n      movingVarianceInitializer:\n          serializeInitializer(this.movingVarianceInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n      betaConstraint: serializeConstraint(this.betaConstraint),\n      gammaConstraint: serializeConstraint(this.gammaConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(BatchNormalization);\n\nexport interface LayerNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The axis or axes that should be normalized (typically, the feature axis).\n   * Defaults to -1 (the last axis).\n   */\n  axis?: number|number[];\n\n  /**\n   * A small positive float added to variance to avoid divison by zero.\n   * Defaults to 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Default: `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply output by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear, this can be disabled since scaling will\n   * be done by the next layer.\n   * Default: `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   * Default: `'zeros'`.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   * Default: `'ones'`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /** Regularizer for the beta weight. */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /** Regularizer for the gamma weight. */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class LayerNormalization extends Layer {\n  /** @nocollapse */\n  static className = 'LayerNormalization';\n\n  private axis: number|number[];\n  readonly epsilon: number;\n  readonly center: boolean;\n  readonly scale: boolean;\n  readonly betaInitializer: Initializer;\n  readonly gammaInitializer: Initializer;\n  readonly betaRegularizer: Regularizer;\n  readonly gammaRegularizer: Regularizer;\n\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n\n  constructor(args?: LayerNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.axis = args.axis == null ? -1 : args.axis;\n    if (typeof this.axis === 'number') {\n      if (!Number.isInteger(this.axis)) {\n        throw new Error(\n            `Expected axis to be an integer, but received ${this.axis}`);\n      }\n    } else if (Array.isArray(this.axis)) {\n      for (const axis of this.axis) {\n        if (!Number.isInteger(axis)) {\n          throw new Error(\n              `Expected axis to be an array of integers, ` +\n              `but received ${JSON.stringify(this.axis)}`);\n        }\n      }\n    } else {\n      throw new Error(\n          `Expected axis to be an integer or an array of integers, ` +\n          `but received ${JSON.stringify(this.axis)}`);\n    }\n\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n\n    this.supportsMasking = true;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const nDims = inputShape.length;\n\n    // Convert axis to array and resolve negatives.\n    if (typeof this.axis === 'number') {\n      this.axis = [this.axis];\n    }\n    for (let i = 0; i < this.axis.length; ++i) {\n      if (this.axis[i] < 0) {\n        this.axis[i] += nDims;\n      }\n    }\n\n    // Further validate axes.\n    for (const axis of this.axis) {\n      if (axis < 0 || axis >= nDims) {\n        throw new Error(`Invalid axis: ${axis}`);\n      }\n    }\n    if (this.axis.length !== generic_utils.unique(this.axis).length) {\n      throw new Error(`Found duplicate axes in: ${this.axis}`);\n    }\n\n    const paramShape = this.axis.map(axis => inputShape[axis]) as number[];\n\n    const trainable = true;\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', paramShape, 'float32', this.gammaInitializer,\n          this.gammaRegularizer, trainable);\n    } else {\n      this.gamma = null;\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', paramShape, 'float32', this.betaInitializer,\n          this.betaRegularizer, trainable);\n    } else {\n      this.beta = null;\n    }\n\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const input = getExactlyOneTensor(inputs);\n    const inputShape = input.shape;\n    const nDims = inputShape.length;\n\n    return tidy(() => {\n      const keepDims = true;\n      let {mean, variance} = moments(input, this.axis, keepDims);\n      const broadcastShape = generic_utils.pyListRepeat(1, nDims);\n      for (const dim of this.axis as number[]) {\n        broadcastShape[dim] = inputShape[dim];\n      }\n\n      const broadcast = (v: Tensor) => {\n        if (v != null && v.shape.length !== nDims) {\n          return tfc.reshape(v, broadcastShape);\n        } else {\n          return v;\n        }\n      };\n\n      let scale = this.scale ? broadcast(this.gamma.read()) : null;\n      let offset = this.center ? broadcast(this.beta.read()) : null;\n\n      // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n      // is a workaround for the limitation of core's batchNormalization?d don't\n      // support broadcasting in their gradients. In addition, the tiling is\n      // necessary to ensure correctness on the browser CPU backend regardless\n      // of forward or backward computation. Remove this workaround once the\n      // limitation is addressed. See .\n      const momentsTiling: number[] = [];\n      const scaleOffsetTiling: number[] = [];\n      for (let i = 0; i < nDims; ++i) {\n        if ((this.axis as number[]).indexOf(i) !== -1) {\n          momentsTiling.push(inputShape[i]);\n          scaleOffsetTiling.push(1);\n        } else {\n          momentsTiling.push(1);\n          scaleOffsetTiling.push(inputShape[i]);\n        }\n      }\n      mean = tfc.tile(mean, momentsTiling);\n      variance = tfc.tile(variance, momentsTiling);\n      if (scale != null) {\n        scale = tfc.tile(scale, scaleOffsetTiling);\n      }\n      if (offset != null) {\n        offset = tfc.tile(offset, scaleOffsetTiling);\n      }\n\n      return batchNormalization(\n          input, mean, variance, offset, scale, this.epsilon);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LayerNormalization);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Padding Layers.\n */\n\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\n\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\nexport function temporalPadding(x: Tensor, padding?: [number, number]): Tensor {\n  return tidy(() => {\n    if (x.rank !== 3) {\n      throw new ValueError(\n          `temporalPadding expects input tensor to be 3-D, but received a ` +\n          `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [1, 1];\n    }\n    if (padding.length !== 2) {\n      throw new ValueError(\n          `temporalPadding expects input padding pattern to be a length-2 ` +\n          `array, but received a length-${padding.length} array.`);\n    }\n\n    const pattern: Array<[number, number]> = [[0, 0], padding, [0, 0]];\n    return tfc.pad(x, pattern);\n  });\n}\n\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\nexport function spatial2dPadding(\n    x: Tensor, padding?: [[number, number], [number, number]],\n    dataFormat?: DataFormat): Tensor {\n  return tidy(() => {\n    if (x.rank !== 4) {\n      throw new ValueError(\n          `temporalPadding expects input tensor to be 4-D, but received a ` +\n          `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [[1, 1], [1, 1]];\n    }\n    if (padding.length !== 2 || padding[0].length !== 2 ||\n        padding[1].length !== 2) {\n      throw new ValueError(\n          'spatial2dPadding expects `padding` to be an Array of two Arrays, ' +\n          'each of which is an Array of two integers.');\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n      throw new ValueError(\n          `Unknown data format: ${dataFormat}. ` +\n          `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n    }\n\n    let pattern: Array<[number, number]>;\n    if (dataFormat === 'channelsFirst') {\n      pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n    } else {\n      pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n    }\n\n    return tfc.pad(x, pattern);\n  });\n}\n\nexport declare interface ZeroPadding2DLayerArgs extends LayerArgs {\n  /**\n   * Integer, or `Array` of 2 integers, or `Array` of 2 `Array`s, each of\n   * which is an `Array` of 2 integers.\n   * - If integer, the same symmetric padding is applied to width and height.\n   * - If `Array` of 2 integers, interpreted as two different symmetric values\n   *   for height and width:\n   *   `[symmetricHeightPad, symmetricWidthPad]`.\n   * - If `Array` of 2 `Array`s, interpreted as:\n   *   `[[topPad, bottomPad], [leftPad, rightPad]]`.\n   */\n  padding?: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * One of `'channelsLast'` (default) and `'channelsFirst'`.\n   *\n   * The ordering of the dimensions in the inputs.\n   * `channelsLast` corresponds to inputs with shape\n   * `[batch, height, width, channels]` while `channelsFirst`\n   * corresponds to inputs with shape\n   * `[batch, channels, height, width]`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class ZeroPadding2D extends Layer {\n  /** @nocollapse */\n  static className = 'ZeroPadding2D';\n  readonly dataFormat: DataFormat;\n  readonly padding: [[number, number], [number, number]];\n\n  constructor(args?: ZeroPadding2DLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.dataFormat =\n        args.dataFormat == null ? imageDataFormat() : args.dataFormat;\n    // TODO(cais): Maybe refactor the following logic surrounding `padding`\n    //   into a helper method.\n    if (args.padding == null) {\n      this.padding = [[1, 1], [1, 1]];\n    } else if (typeof args.padding === 'number') {\n      this.padding =\n          [[args.padding, args.padding], [args.padding, args.padding]];\n    } else {\n      args.padding = args.padding;\n      if (args.padding.length !== 2) {\n        throw new ValueError(\n            `ZeroPadding2D expects padding to be a length-2 array, but ` +\n            `received a length-${args.padding.length} array.`);\n      }\n\n      let heightPadding: [number, number];\n      let widthPadding: [number, number];\n      if (typeof args.padding[0] === 'number') {\n        heightPadding = [args.padding[0], args.padding[0]];\n        widthPadding = [args.padding[1] as number, args.padding[1] as number];\n      } else {\n        args.padding = args.padding as [[number, number], [number, number]];\n\n        if (args.padding[0].length !== 2) {\n          throw new ValueError(\n              `ZeroPadding2D expects height padding to be a length-2 array, ` +\n              `but received a length-${args.padding[0].length} array.`);\n        }\n        heightPadding = args.padding[0] as [number, number];\n\n        if (args.padding[1].length !== 2) {\n          throw new ValueError(\n              `ZeroPadding2D expects width padding to be a length-2 array, ` +\n              `but received a length-${args.padding[1].length} array.`);\n        }\n        widthPadding = args.padding[1] as [number, number];\n      }\n      this.padding = [heightPadding, widthPadding];\n    }\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n\n    let rows: number;\n    let cols: number;\n    if (this.dataFormat === 'channelsFirst') {\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n      if (inputShape[3] != null && inputShape[3] >= 0) {\n        cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      if (inputShape[1] != null && inputShape[1] >= 0) {\n        rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(\n        () => spatial2dPadding(\n            getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ZeroPadding2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor3D, Tensor4D, Tensor5D, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkPaddingMode, checkPoolMode} from '../common';\nimport {InputSpec} from '../engine/topology';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {DataFormat, PaddingMode, PoolMode, Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\n\nimport {preprocessConv2DInput, preprocessConv3DInput} from './convolutional';\n\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param strides strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\nexport function pool2d(\n    x: Tensor, poolSize: [number, number], strides?: [number, number],\n    padding?: PaddingMode, dataFormat?: DataFormat,\n    poolMode?: PoolMode): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n    if (strides == null) {\n      strides = [1, 1];\n    }\n    if (padding == null) {\n      padding = 'valid';\n    }\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (poolMode == null) {\n      poolMode = 'max';\n    }\n\n    // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n    // dataFormat as an input argument.\n    x = preprocessConv2DInput(x, dataFormat);  // x is NHWC after preprocessing.\n    let y: Tensor;\n    const paddingString = (padding === 'same') ? 'same' : 'valid';\n    if (poolMode === 'max') {\n      // TODO(cais): Rank check?\n      y = tfc.maxPool(x as Tensor4D, poolSize, strides, paddingString);\n    } else {  // 'avg'\n      // TODO(cais): Check the dtype and rank of x and give clear error message\n      //   if those are incorrect.\n      y = tfc.avgPool(\n          // TODO(cais): Rank check?\n          x as Tensor3D | Tensor4D, poolSize, strides, paddingString);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);  // NHWC -> NCHW.\n    }\n    return y;\n  });\n}\n\n/**\n * 3D pooling.\n * @param x\n * @param poolSize. Default to [1, 1, 1].\n * @param strides strides. Defaults to [1, 1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 3D pooling.\n */\nexport function pool3d(\n    x: Tensor5D, poolSize: [number, number, number],\n    strides?: [number, number, number], padding?: PaddingMode,\n    dataFormat?: DataFormat, poolMode?: PoolMode): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n    if (strides == null) {\n      strides = [1, 1, 1];\n    }\n    if (padding == null) {\n      padding = 'valid';\n    }\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (poolMode == null) {\n      poolMode = 'max';\n    }\n\n    // x is NDHWC after preprocessing.\n    x = preprocessConv3DInput(x as Tensor, dataFormat) as Tensor5D;\n    let y: Tensor;\n    const paddingString = (padding === 'same') ? 'same' : 'valid';\n    if (poolMode === 'max') {\n      y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n    } else {  // 'avg'\n      y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);  // NDHWC -> NCDHW.\n    }\n    return y;\n  });\n}\n\nexport declare interface Pooling1DLayerArgs extends LayerArgs {\n  /**\n   * Size of the window to pool over, should be an integer.\n   */\n  poolSize?: number|[number];\n  /**\n   * Period at which to sample the pooled values.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number|[number];\n  /** How to fill in data that's not an integer multiple of poolSize. */\n  padding?: PaddingMode;\n}\n\n/**\n * Abstract class for different pooling 1D layers.\n */\nexport abstract class Pooling1D extends Layer {\n  protected readonly poolSize: [number];\n  protected readonly strides: [number];\n  protected readonly padding: PaddingMode;\n\n  /**\n   *\n   * @param args Parameters for the Pooling layer.\n   *\n   * config.poolSize defaults to 2.\n   */\n  constructor(args: Pooling1DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = 2;\n    }\n    super(args);\n    if (typeof args.poolSize === 'number') {\n      this.poolSize = [args.poolSize];\n    } else if (\n        Array.isArray(args.poolSize) &&\n        (args.poolSize as number[]).length === 1 &&\n        typeof (args.poolSize as number[])[0] === 'number') {\n      this.poolSize = args.poolSize;\n    } else {\n      throw new ValueError(\n          `poolSize for 1D convolutional layer must be a number or an ` +\n          `Array of a single number, but received ` +\n          `${JSON.stringify(args.poolSize)}`);\n    }\n    assertPositiveInteger(this.poolSize, 'poolSize');\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else {\n      if (typeof args.strides === 'number') {\n        this.strides = [args.strides];\n      } else if (\n          Array.isArray(args.strides) &&\n          (args.strides as number[]).length === 1 &&\n          typeof (args.strides as number[])[0] === 'number') {\n        this.strides = args.strides;\n      } else {\n        throw new ValueError(\n            `strides for 1D convolutional layer must be a number or an ` +\n            `Array of a single number, but received ` +\n            `${JSON.stringify(args.strides)}`);\n      }\n    }\n    assertPositiveInteger(this.strides, 'strides');\n\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.inputSpec = [new InputSpec({ndim: 3})];\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const length = convOutputLength(\n        inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n    return [inputShape[0], length, inputShape[2]];\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor;\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Add dummy last dimension.\n      inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n      const output = this.poolingFunction(\n          getExactlyOneTensor(inputs), [this.poolSize[0], 1],\n          [this.strides[0], 1], this.padding, 'channelsLast');\n      // Remove dummy last dimension.\n      return tfc.squeeze(output, [2]);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class MaxPooling1D extends Pooling1D {\n  /** @nocollapse */\n  static className = 'MaxPooling1D';\n  constructor(args: Pooling1DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling1D);\n\nexport class AveragePooling1D extends Pooling1D {\n  /** @nocollapse */\n  static className = 'AveragePooling1D';\n  constructor(args: Pooling1DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling1D);\n\nexport declare interface Pooling2DLayerArgs extends LayerArgs {\n  /**\n   * Factors by which to downscale in each dimension [vertical, horizontal].\n   * Expects an integer or an array of 2 integers.\n   *\n   * For example, `[2, 2]` will halve the input in both spatial dimensions.\n   * If only one integer is specified, the same window length\n   * will be used for both dimensions.\n   */\n  poolSize?: number|[number, number];\n\n  /**\n   * The size of the stride in each dimension of the pooling window. Expects\n   * an integer or an array of 2 integers. Integer, tuple of 2 integers, or\n   * None.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number|[number, number];\n\n  /** The padding type to use for the pooling layer. */\n  padding?: PaddingMode;\n  /** The data format to use for the pooling layer. */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different pooling 2D layers.\n */\nexport abstract class Pooling2D extends Layer {\n  protected readonly poolSize: [number, number];\n  protected readonly strides: [number, number];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Pooling2DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2];\n    }\n    super(args);\n    this.poolSize = Array.isArray(args.poolSize) ?\n        args.poolSize :\n        [args.poolSize, args.poolSize];\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 2) {\n        throw new ValueError(\n            `If the strides property of a 2D pooling layer is an Array, ` +\n            `it is expected to have a length of 2, but received length ` +\n            `${args.strides.length}.`);\n      }\n      this.strides = args.strides;\n    } else {\n      // `config.strides` is a number.\n      this.strides = [args.strides, args.strides];\n    }\n    assertPositiveInteger(this.poolSize, 'poolSize');\n    assertPositiveInteger(this.strides, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    checkPaddingMode(this.padding);\n\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    let rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    let cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    rows =\n        convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n    cols =\n        convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor;\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      return this.poolingFunction(\n          getExactlyOneTensor(inputs), this.poolSize, this.strides,\n          this.padding, this.dataFormat);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class MaxPooling2D extends Pooling2D {\n  /** @nocollapse */\n  static className = 'MaxPooling2D';\n  constructor(args: Pooling2DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling2D);\n\nexport class AveragePooling2D extends Pooling2D {\n  /** @nocollapse */\n  static className = 'AveragePooling2D';\n  constructor(args: Pooling2DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling2D);\n\nexport declare interface Pooling3DLayerArgs extends LayerArgs {\n  /**\n   * Factors by which to downscale in each dimension [depth, height, width].\n   * Expects an integer or an array of 3 integers.\n   *\n   * For example, `[2, 2, 2]` will halve the input in three dimensions.\n   * If only one integer is specified, the same window length\n   * will be used for all dimensions.\n   */\n  poolSize?: number|[number, number, number];\n\n  /**\n   * The size of the stride in each dimension of the pooling window. Expects\n   * an integer or an array of 3 integers. Integer, tuple of 3 integers, or\n   * None.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number|[number, number, number];\n\n  /** The padding type to use for the pooling layer. */\n  padding?: PaddingMode;\n  /** The data format to use for the pooling layer. */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different pooling 3D layers.\n */\nexport abstract class Pooling3D extends Layer {\n  protected readonly poolSize: [number, number, number];\n  protected readonly strides: [number, number, number];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Pooling3DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2, 2];\n    }\n    super(args);\n    this.poolSize = Array.isArray(args.poolSize) ?\n        args.poolSize :\n        [args.poolSize, args.poolSize, args.poolSize];\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 3) {\n        throw new ValueError(\n            `If the strides property of a 3D pooling layer is an Array, ` +\n            `it is expected to have a length of 3, but received length ` +\n            `${args.strides.length}.`);\n      }\n      this.strides = args.strides;\n    } else {\n      // `config.strides` is a number.\n      this.strides = [args.strides, args.strides, args.strides];\n    }\n    assertPositiveInteger(this.poolSize, 'poolSize');\n    assertPositiveInteger(this.strides, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    checkPaddingMode(this.padding);\n\n    this.inputSpec = [new InputSpec({ndim: 5})];\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    let depths =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    let rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    let cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n    depths = convOutputLength(\n        depths, this.poolSize[0], this.padding, this.strides[0]);\n    rows =\n        convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n    cols =\n        convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], depths, rows, cols];\n    } else {\n      return [inputShape[0], depths, rows, cols, inputShape[4]];\n    }\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number, number],\n      strides: [number, number, number], padding: PaddingMode,\n      dataFormat: DataFormat): Tensor;\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      return this.poolingFunction(\n          getExactlyOneTensor(inputs), this.poolSize, this.strides,\n          this.padding, this.dataFormat);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class MaxPooling3D extends Pooling3D {\n  /** @nocollapse */\n  static className = 'MaxPooling3D';\n  constructor(args: Pooling3DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number, number],\n      strides: [number, number, number], padding: PaddingMode,\n      dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool3d(\n        inputs as Tensor5D, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling3D);\n\nexport class AveragePooling3D extends Pooling3D {\n  /** @nocollapse */\n  static className = 'AveragePooling3D';\n  constructor(args: Pooling3DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number, number],\n      strides: [number, number, number], padding: PaddingMode,\n      dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool3d(\n        inputs as Tensor5D, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling3D);\n\n/**\n * Abstract class for different global pooling 1D layers.\n */\nexport abstract class GlobalPooling1D extends Layer {\n  constructor(args: LayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 3})];\n  }\n\n  override computeOutputShape(inputShape: Shape): Shape {\n    return [inputShape[0], inputShape[2]];\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    throw new NotImplementedError();\n  }\n}\n\nexport class GlobalAveragePooling1D extends GlobalPooling1D {\n  /** @nocollapse */\n  static className = 'GlobalAveragePooling1D';\n  constructor(args?: LayerArgs) {\n    super(args || {});\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      return tfc.mean(input, 1);\n    });\n  }\n}\nserialization.registerClass(GlobalAveragePooling1D);\n\nexport class GlobalMaxPooling1D extends GlobalPooling1D {\n  /** @nocollapse */\n  static className = 'GlobalMaxPooling1D';\n  constructor(args: LayerArgs) {\n    super(args || {});\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      return tfc.max(input, 1);\n    });\n  }\n}\nserialization.registerClass(GlobalMaxPooling1D);\n\nexport declare interface GlobalPooling2DLayerArgs extends LayerArgs {\n  /**\n   * One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\n   *\n   * The ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\n   * to inputs with shape `[batch, height, width, channels]` while\n   * `CHANNEL_FIRST` corresponds to inputs with shape\n   * `[batch, channels, height, width]`.\n   */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different global pooling 2D layers.\n */\nexport abstract class GlobalPooling2D extends Layer {\n  protected dataFormat: DataFormat;\n  constructor(args: GlobalPooling2DLayerArgs) {\n    super(args);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = inputShape as Shape;\n    if (this.dataFormat === 'channelsLast') {\n      return [inputShape[0], inputShape[3]];\n    } else {\n      return [inputShape[0], inputShape[1]];\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    throw new NotImplementedError();\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class GlobalAveragePooling2D extends GlobalPooling2D {\n  /** @nocollapse */\n  static className = 'GlobalAveragePooling2D';\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsLast') {\n        return tfc.mean(input, [1, 2]);\n      } else {\n        return tfc.mean(input, [2, 3]);\n      }\n    });\n  }\n}\nserialization.registerClass(GlobalAveragePooling2D);\n\nexport class GlobalMaxPooling2D extends GlobalPooling2D {\n  /** @nocollapse */\n  static className = 'GlobalMaxPooling2D';\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsLast') {\n        return tfc.max(input, [1, 2]);\n      } else {\n        return tfc.max(input, [2, 3]);\n      }\n    });\n  }\n}\nserialization.registerClass(GlobalMaxPooling2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Layers that augment the functionality of a base layer.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport {nameScope} from '../common';\nimport {InputSpec, Layer, LayerArgs, SymbolicTensor} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {BidirectionalMergeMode, Shape, VALID_BIDIRECTIONAL_MERGE_MODES} from '../keras_format/common';\nimport {Kwargs} from '../types';\nimport {RegularizerFn, RnnStepFunction} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nimport {rnn, RNN, standardizeArgs} from './recurrent';\nimport {deserialize} from './serialization';\n\nexport declare interface WrapperLayerArgs extends LayerArgs {\n  /**\n   * The layer to be wrapped.\n   */\n  layer: Layer;\n}\n\n/**\n * Abstract wrapper base class.\n *\n * Wrappers take another layer and augment it in various ways.\n * Do not use this class as a layer, it is only an abstract base class.\n * Two usable wrappers are the `TimeDistributed` and `Bidirectional` wrappers.\n */\nexport abstract class Wrapper extends Layer {\n  readonly layer: Layer;\n\n  constructor(args: WrapperLayerArgs) {\n    // Porting Note: In PyKeras, `self.layer` is set prior to the calling\n    //   `super()`. But we can't do that here due to TypeScript's restriction.\n    //   See: https://github.com/Microsoft/TypeScript/issues/8277\n    //   As a result, we have to add checks in `get trainable()` and\n    //   `set trainable()` below in order to prevent using `this.layer` when\n    //   its value is `undefined`. The super constructor does use the getter\n    //   and the setter of `this.layer`.\n    super(args);\n    this.layer = args.layer;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    this.built = true;\n  }\n\n  // TODO(cais): Implement activityRegularizer getter.\n\n  override get trainable(): boolean {\n    // Porting Note: the check of `this.layer` here is necessary due to the\n    //   way the `constructor` of this class is written (see Porting Note\n    //   above).\n    if (this.layer != null) {\n      return this.layer.trainable;\n    } else {\n      return false;\n    }\n  }\n\n  override set trainable(value: boolean) {\n    // Porting Note: the check of `this.layer` here is necessary due to the\n    //   way the `constructor` of this class is written (see Porting Note\n    //   above).\n    if (this.layer != null) {\n      this.layer.trainable = value;\n    }\n  }\n\n  override get trainableWeights(): LayerVariable[] {\n    return this.layer.trainableWeights;\n  }\n  // TODO(cais): Implement setter for trainableWeights.\n\n  override get nonTrainableWeights(): LayerVariable[] {\n    return this.layer.nonTrainableWeights;\n  }\n  // TODO(cais): Implement setter for nonTrainableWeights.\n\n  override get updates(): Tensor[] {\n    // tslint:disable-next-line:no-any\n    return (this.layer as any)._updates;\n  }\n\n  // TODO(cais): Implement getUpdatesFor().\n\n  override get losses(): RegularizerFn[] {\n    return this.layer.losses;\n  }\n\n  // TODO(cais): Implement getLossesFor().\n\n  override getWeights(): Tensor[] {\n    return this.layer.getWeights();\n  }\n\n  override setWeights(weights: Tensor[]): void {\n    this.layer.setWeights(weights);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'layer': {\n        'className': this.layer.getClassName(),\n        'config': this.layer.getConfig(),\n      }\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.layer != null) {\n      this.layer.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const layerConfig = config['layer'] as serialization.ConfigDict;\n    const layer = deserialize(layerConfig, customObjects) as Layer;\n    delete config['layer'];\n    const newConfig = {layer};\n    Object.assign(newConfig, config);\n    return new cls(newConfig);\n  }\n}\n\nexport class TimeDistributed extends Wrapper {\n  /** @nocollapse */\n  static className = 'TimeDistributed';\n  constructor(args: WrapperLayerArgs) {\n    super(args);\n    this.supportsMasking = true;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 3) {\n      throw new ValueError(\n          `TimeDistributed layer expects an input shape >= 3D, but received ` +\n          `input shape ${JSON.stringify(inputShape)}`);\n    }\n    this.inputSpec = [{shape: inputShape}];\n    const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (!this.layer.built) {\n      this.layer.build(childInputShape);\n      this.layer.built = true;\n    }\n    super.build(inputShape);\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    const childOutputShape =\n        this.layer.computeOutputShape(childInputShape) as Shape;\n    const timesteps = inputShape[1];\n    return [childOutputShape[0], timesteps].concat(childOutputShape.slice(1));\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      // TODO(cais): Add 'training' and 'useLearningPhase' to kwargs.\n      inputs = getExactlyOneTensor(inputs);\n      // Porting Note: In tfjs-layers, `inputs` are always concrete tensor\n      // values. Hence the inputs can't have an undetermined first (batch)\n      // dimension, which is why we always use the K.rnn approach here.\n      const step: RnnStepFunction = (inputs: Tensor, states: Tensor[]) => {\n        // TODO(cais): Add useLearningPhase.\n        // NOTE(cais): `layer.call` may return a length-1 array of Tensor in\n        //   some cases (e.g., `layer` is a `Sequential` instance), which is\n        //   why `getExactlyOneTensor` is used below.\n        const output = getExactlyOneTensor(this.layer.call(inputs, kwargs));\n        return [output, []];\n      };\n      const rnnOutputs =\n          rnn(step, inputs, [], false /* goBackwards */, null /* mask */,\n              null /* constants */, false /* unroll */,\n              true /* needPerStepOutputs */);\n      const y = rnnOutputs[1];\n      // TODO(cais): Add activity regularization.\n      // TODO(cais): Add useLearningPhase.\n      return y;\n    });\n  }\n\n  // TODO(cais): Implement detailed computeMask() logic.\n}\nserialization.registerClass(TimeDistributed);\n\nexport function checkBidirectionalMergeMode(value?: string): void {\n  generic_utils.checkStringTypeUnionValue(\n      VALID_BIDIRECTIONAL_MERGE_MODES, 'BidirectionalMergeMode', value);\n}\n\nexport declare interface BidirectionalLayerArgs extends WrapperLayerArgs {\n  /**\n   * The instance of an `RNN` layer to be wrapped.\n   */\n  layer: RNN;\n\n  /**\n   * Mode by which outputs of the forward and backward RNNs are\n   * combined. If `null` or `undefined`, the output will not be\n   * combined, they will be returned as an `Array`.\n   *\n   * If `undefined` (i.e., not provided), defaults to `'concat'`.\n   */\n  mergeMode?: BidirectionalMergeMode;\n}\n\nconst DEFAULT_BIDIRECTIONAL_MERGE_MODE: BidirectionalMergeMode = 'concat';\n\nexport class Bidirectional extends Wrapper {\n  /** @nocollapse */\n  static className = 'Bidirectional';\n  mergeMode: BidirectionalMergeMode;\n  private forwardLayer: RNN;\n  private backwardLayer: RNN;\n  private returnSequences: boolean;\n  private returnState: boolean;\n  private numConstants?: number;\n  private _trainable: boolean;\n\n  constructor(args: BidirectionalLayerArgs) {\n    super(args);\n\n    // Note: When creating `this.forwardLayer`, the original Layer object\n    //   (`config.layer`) ought to be cloned. This is why we call\n    //   `getConfig()` followed by `deserialize()`. Without this cloning,\n    //   the layer names saved during serialization will incorrectly contain\n    //   the 'forward_' prefix. In Python Keras, this is done using\n    //   `copy.copy` (shallow copy), which does not have a simple equivalent\n    //   in JavaScript. JavaScript's `Object.assign()` does not copy\n    //   methods.\n    const layerConfig = args.layer.getConfig();\n    const forwDict: serialization.ConfigDict = {};\n    forwDict['className'] = args.layer.getClassName();\n    forwDict['config'] = layerConfig;\n    this.forwardLayer = deserialize(forwDict) as RNN;\n    layerConfig['goBackwards'] =\n        layerConfig['goBackwards'] === true ? false : true;\n    const backDict: serialization.ConfigDict = {};\n    backDict['className'] = args.layer.getClassName();\n    backDict['config'] = layerConfig;\n    this.backwardLayer = deserialize(backDict) as RNN;\n    this.forwardLayer.name = 'forward_' + this.forwardLayer.name;\n    this.backwardLayer.name = 'backward_' + this.backwardLayer.name;\n\n    this.mergeMode = args.mergeMode === undefined ?\n        DEFAULT_BIDIRECTIONAL_MERGE_MODE :\n        args.mergeMode;\n    checkBidirectionalMergeMode(this.mergeMode);\n    if (args.weights) {\n      throw new NotImplementedError(\n          'weights support is not implemented for Bidirectional layer yet.');\n    }\n    this._stateful = args.layer.stateful;\n    this.returnSequences = args.layer.returnSequences;\n    this.returnState = args.layer.returnState;\n    this.supportsMasking = true;\n    this._trainable = true;\n    this.inputSpec = args.layer.inputSpec;\n    this.numConstants = null;\n  }\n\n  override get trainable(): boolean {\n    return this._trainable;\n  }\n\n  override set trainable(value: boolean) {\n    // Porting Note: the check of `this.layer` here is necessary due to the\n    //   way the `constructor` of this class is written (see Porting Note\n    //   above).\n    this._trainable = value;\n    if (this.forwardLayer != null) {\n      this.forwardLayer.trainable = value;\n    }\n    if (this.backwardLayer != null) {\n      this.backwardLayer.trainable = value;\n    }\n  }\n\n  override getWeights(): Tensor[] {\n    return this.forwardLayer.getWeights().concat(\n        this.backwardLayer.getWeights());\n  }\n\n  override setWeights(weights: Tensor[]): void {\n    const numWeights = weights.length;\n    const numeightsOver2 = Math.floor(numWeights / 2);\n    this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));\n    this.backwardLayer.setWeights(weights.slice(numeightsOver2));\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    let layerShapes: Shape|Shape[] =\n        this.forwardLayer.computeOutputShape(inputShape);\n    if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) {\n      layerShapes = [layerShapes as Shape];\n    }\n    layerShapes = layerShapes as Shape[];\n\n    let outputShape: Shape;\n    let outputShapes: Shape[];\n    let stateShape: Shape[];\n    if (this.returnState) {\n      stateShape = layerShapes.slice(1);\n      outputShape = layerShapes[0];\n    } else {\n      outputShape = layerShapes[0];\n    }\n    outputShape = outputShape;\n    if (this.mergeMode === 'concat') {\n      outputShape[outputShape.length - 1] *= 2;\n      outputShapes = [outputShape];\n    } else if (this.mergeMode == null) {\n      outputShapes = [outputShape, outputShape.slice()];\n    } else {\n      outputShapes = [outputShape];\n    }\n\n    if (this.returnState) {\n      if (this.mergeMode == null) {\n        return outputShapes.concat(stateShape).concat(stateShape.slice());\n      }\n      return [outputShape].concat(stateShape).concat(stateShape.slice());\n    }\n    return generic_utils.singletonOrArray(outputShapes);\n  }\n\n  override apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    let initialState: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['initialState'];\n    let constants: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['constants'];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n    const standardized =\n        standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n\n    if (Array.isArray(inputs)) {\n      initialState = (inputs as Tensor[] | SymbolicTensor[]).slice(1);\n      inputs = (inputs as Tensor[] | SymbolicTensor[])[0];\n    }\n\n    if ((initialState == null || initialState.length === 0) &&\n        constants == null) {\n      return super.apply(inputs, kwargs);\n    }\n    const additionalInputs: Array<Tensor|SymbolicTensor> = [];\n    const additionalSpecs: InputSpec[] = [];\n    if (initialState != null) {\n      const numStates = initialState.length;\n      if (numStates % 2 > 0) {\n        throw new ValueError(\n            'When passing `initialState` to a Bidrectional RNN, ' +\n            'the state should be an Array containing the states of ' +\n            'the underlying RNNs.');\n      }\n      kwargs['initialState'] = initialState;\n      additionalInputs.push(...initialState);\n      const stateSpecs = (initialState as Array<Tensor|SymbolicTensor>)\n                             .map(state => new InputSpec({shape: state.shape}));\n      this.forwardLayer.stateSpec = stateSpecs.slice(0, numStates / 2);\n      this.backwardLayer.stateSpec = stateSpecs.slice(numStates / 2);\n      additionalSpecs.push(...stateSpecs);\n    }\n    if (constants != null) {\n      throw new NotImplementedError(\n          'Support for constants in Bidirectional layers is not ' +\n          'implemented yet.');\n    }\n\n    const isSymbolicTensor = additionalInputs[0] instanceof SymbolicTensor;\n    for (const tensor of additionalInputs) {\n      if (tensor instanceof SymbolicTensor !== isSymbolicTensor) {\n        throw new ValueError(\n            'The initial state of a Bidirectional layer cannot be ' +\n            'specified as a mix of symbolic and non-symbolic tensors');\n      }\n    }\n\n    if (isSymbolicTensor) {\n      // Compute the full input and specs, including the states.\n      const fullInput = [inputs].concat(additionalInputs);\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      // Perform the call temporarily and replace inputSpec.\n      // Note: with initial states symbolic calls and non-symbolic calls to\n      // this method differ in how the initial states are passed. For\n      // symbolic calls, the initial states are passed in the first arg, as\n      // an Array of SymbolicTensors; for non-symbolic calls, they are\n      // passed in the second arg as a part of the kwargs. Hence the need to\n      // temporarily modify inputSpec here.\n      // TODO(cais): Make refactoring so that this hacky code below is no\n      // longer needed.\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output =\n          super.apply(fullInput as Tensor[] | SymbolicTensor[], kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const initialState = kwargs['initialState'];\n\n      let y: Tensor|Tensor[];\n      let yRev: Tensor|Tensor[];\n      if (initialState == null) {\n        y = this.forwardLayer.call(inputs, kwargs);\n        yRev = this.backwardLayer.call(inputs, kwargs);\n      } else {\n        const forwardState = initialState.slice(0, initialState.length / 2);\n        const backwardState = initialState.slice(initialState.length / 2);\n        y = this.forwardLayer.call(\n            inputs, Object.assign(kwargs, {initialState: forwardState}));\n        yRev = this.backwardLayer.call(\n            inputs, Object.assign(kwargs, {initialState: backwardState}));\n      }\n\n      let states: Tensor[];\n      if (this.returnState) {\n        if (Array.isArray(y)) {\n          states = y.slice(1).concat((yRev as Tensor[]).slice(1));\n        } else {\n        }\n        y = (y as Tensor[])[0];\n        yRev = (yRev as Tensor[])[0];\n      }\n\n      if (this.returnSequences) {\n        yRev = tfc.reverse(yRev as Tensor, 1);\n      }\n\n      let output: Tensor|Tensor[];\n      if (this.mergeMode === 'concat') {\n        output = K.concatenate([y as Tensor, yRev as Tensor]);\n      } else if (this.mergeMode === 'sum') {\n        output = tfc.add(y as Tensor, yRev as Tensor);\n      } else if (this.mergeMode === 'ave') {\n        output = tfc.mul(.5, tfc.add(y as Tensor, yRev as Tensor));\n      } else if (this.mergeMode === 'mul') {\n        output = tfc.mul(y as Tensor, yRev as Tensor);\n      } else if (this.mergeMode == null) {\n        output = [y as Tensor, yRev as Tensor];\n      }\n\n      // TODO(cais): Properly set learning phase.\n      if (this.returnState) {\n        if (this.mergeMode == null) {\n          return (output as Tensor[]).concat(states);\n        }\n        return [output as Tensor].concat(states);\n      }\n      return output;\n    });\n  }\n\n  override resetStates(states?: Tensor|Tensor[]): void {\n    this.forwardLayer.resetStates();\n    this.backwardLayer.resetStates();\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    nameScope(this.forwardLayer.name, () => {\n      this.forwardLayer.build(inputShape);\n    });\n    nameScope(this.backwardLayer.name, () => {\n      this.backwardLayer.build(inputShape);\n    });\n    this.built = true;\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    if (Array.isArray(mask)) {\n      mask = mask[0];\n    }\n    let outputMask: Tensor|Tensor[];\n    if (this.returnSequences) {\n      if (this.mergeMode == null) {\n        outputMask = [mask, mask];\n      } else {\n        outputMask = mask;\n      }\n    } else {\n      if (this.mergeMode == null) {\n        outputMask = [null, null];\n      } else {\n        outputMask = null;\n      }\n    }\n    if (this.returnState) {\n      const states = this.forwardLayer.states;\n      const stateMask: Tensor[] = states.map(state => null);\n      if (Array.isArray(outputMask)) {\n        return outputMask.concat(stateMask).concat(stateMask);\n      } else {\n        return [outputMask].concat(stateMask).concat(stateMask);\n      }\n    } else {\n      return outputMask;\n    }\n  }\n\n  override get trainableWeights(): LayerVariable[] {\n    return this.forwardLayer.trainableWeights.concat(\n        this.backwardLayer.trainableWeights);\n  }\n\n  override get nonTrainableWeights(): LayerVariable[] {\n    return this.forwardLayer.nonTrainableWeights.concat(\n        this.backwardLayer.nonTrainableWeights);\n  }\n\n  // TODO(cais): Implement constraints().\n\n  override setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.forwardLayer != null) {\n      this.forwardLayer.setFastWeightInitDuringBuild(value);\n    }\n    if (this.backwardLayer != null) {\n      this.backwardLayer.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'mergeMode': this.mergeMode,\n    };\n    // TODO(cais): Add logic for `numConstants` once the property is added.\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    const rnnLayer =\n        deserialize(config['layer'] as serialization.ConfigDict) as RNN;\n    delete config['layer'];\n    // TODO(cais): Add logic for `numConstants` once the property is added.\n    if (config['numConstants'] != null) {\n      throw new NotImplementedError(\n          `Deserialization of a Bidirectional layer with numConstants ` +\n          `present is not supported yet.`);\n    }\n    // tslint:disable-next-line:no-any\n    const newConfig: {[key: string]: any} = config;\n    newConfig['layer'] = rnnLayer;\n    return new cls(newConfig);\n  }\n}\nserialization.registerClass(Bidirectional);\n","/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {LayerArgs, Layer} from '../../engine/topology';\nimport { serialization, Tensor, mul, add, tidy } from '@tensorflow/tfjs-core';\nimport { getExactlyOneTensor } from '../../utils/types_utils';\nimport * as K from '../../backend/tfjs_backend';\nimport { Kwargs } from '../../types';\n\nexport declare interface RescalingArgs extends LayerArgs {\n  scale: number;\n  offset?: number;\n}\n\n/**\n * Preprocessing Rescaling Layer\n *\n * This rescales images by a scaling and offset factor\n */\nexport class Rescaling extends Layer {\n  /** @nocollapse */\n  static className = 'Rescaling';\n  private readonly scale: number;\n  private readonly offset: number;\n  constructor(args: RescalingArgs) {\n    super(args);\n\n    this.scale = args.scale;\n\n    if(args.offset) {\n    this.offset = args.offset;\n    } else {\n      this.offset = 0;\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'scale': this.scale,\n      'offset': this.offset\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor[]|Tensor {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      if(inputs.dtype !== 'float32') {\n          inputs = K.cast(inputs, 'float32');\n      }\n      return add(mul(inputs, this.scale), this.offset);\n    });\n  }\n}\n\nserialization.registerClass(Rescaling);\n","/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {serialization,DataType,unstack,stack,tensor,Tensor,Tensor1D,Tensor2D, Tensor3D, Tensor4D, tidy, range, image} from '@tensorflow/tfjs-core';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../../utils/types_utils';\nimport {LayerArgs, Layer} from '../../engine/topology';\nimport {Kwargs} from '../../types';\nimport {Shape} from '../../keras_format/common';\nimport * as K from '../../backend/tfjs_backend';\n\nconst {resizeBilinear, cropAndResize} = image;\n\nexport declare interface CenterCropArgs extends LayerArgs{\n  height: number;\n  width: number;\n}\n\nexport class CenterCrop extends Layer {\n  /** @nocollapse */\n  static className = 'CenterCrop';\n  private readonly height: number;\n  private readonly width: number;\n  constructor(args: CenterCropArgs) {\n    super(args);\n    this.height = args.height;\n    this.width = args.width;\n  }\n\n  centerCrop(inputs: Tensor3D | Tensor4D, hBuffer: number, wBuffer: number,\n            height: number, width: number, inputHeight: number,\n            inputWidth: number, dtype: DataType): Tensor | Tensor[] {\n\n    return tidy(() => {\n      let input: Tensor4D;\n      let isRank3      = false;\n      const top      = hBuffer / inputHeight;\n      const left     = wBuffer / inputWidth;\n      const bottom   = ((height) + hBuffer) / inputHeight;\n      const right    = ((width) + wBuffer) / inputWidth;\n      const bound    = [top, left, bottom, right];\n      const boxesArr = [];\n\n      if(inputs.rank === 3) {\n        isRank3  = true;\n        input  = stack([inputs]) as Tensor4D;\n      } else {\n        input = inputs as Tensor4D;\n      }\n\n      for (let i = 0; i < input.shape[0]; i++) {\n        boxesArr.push(bound);\n      }\n\n      const boxes: Tensor2D  = tensor(boxesArr, [boxesArr.length, 4]);\n      const boxInd: Tensor1D = range(0, boxesArr.length, 1, 'int32');\n\n      const cropSize: [number, number] = [height, width];\n      const cropped = cropAndResize(input, boxes, boxInd, cropSize, 'nearest');\n\n      if(isRank3) {\n        return K.cast(getExactlyOneTensor(unstack(cropped)), dtype);\n      }\n      return K.cast(cropped, dtype);\n   });\n\n  }\n\n  upsize(inputs : Tensor3D | Tensor4D, height: number,\n         width: number, dtype: DataType): Tensor | Tensor[] {\n\n    return tidy(() => {\n      const outputs = resizeBilinear(inputs, [height, width]);\n      return K.cast(outputs, dtype);\n  });\n\n}\n\n  override call(inputs: Tensor3D | Tensor4D , kwargs: Kwargs):\n      Tensor[] | Tensor {\n    return tidy(() => {\n      const rankedInputs = getExactlyOneTensor(inputs) as Tensor3D | Tensor4D;\n      const dtype       = rankedInputs.dtype;\n      const inputShape  = rankedInputs.shape;\n      const inputHeight = inputShape[inputShape.length - 3];\n      const inputWidth  =  inputShape[inputShape.length - 2];\n\n      let hBuffer = 0;\n      if (inputHeight !== this.height) {\n        hBuffer =  Math.floor((inputHeight - this.height) / 2);\n      }\n\n      let wBuffer = 0;\n      if (inputWidth !== this.width) {\n        wBuffer = Math.floor((inputWidth - this.width) / 2);\n\n        if (wBuffer === 0) {\n          wBuffer = 1;\n        }\n      }\n\n      if(hBuffer >= 0 && wBuffer >= 0) {\n        return this.centerCrop(rankedInputs, hBuffer, wBuffer,\n                              this.height, this.width, inputHeight,\n                              inputWidth, dtype);\n      } else {\n        return this.upsize(inputs, this.height, this.width, dtype);\n      }\n   });\n\n  }\n\n  override getConfig(): serialization.ConfigDict{\n\n    const config: serialization.ConfigDict = {\n      'height' : this.height,\n      'width' : this.width\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override computeOutputShape(inputShape: Shape | Shape[]): Shape | Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const hAxis = inputShape.length - 3;\n    const wAxis = inputShape.length - 2;\n    inputShape[hAxis] = this.height;\n    inputShape[wAxis] = this.width;\n    return inputShape;\n  }\n}\n\nserialization.registerClass(CenterCrop);\n","/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport { LayerArgs, Layer } from '../../engine/topology';\nimport { serialization, Tensor, tidy, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\nimport { greater, greaterEqual, max, min} from '@tensorflow/tfjs-core';\nimport { Shape } from '../../keras_format/common';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';\nimport { Kwargs } from '../../types';\nimport { ValueError } from '../../errors';\nimport * as K from '../../backend/tfjs_backend';\nimport * as utils from './preprocessing_utils';\nimport { OutputMode } from './preprocessing_utils';\n\nexport declare interface CategoryEncodingArgs extends LayerArgs {\n  numTokens: number;\n  outputMode?: OutputMode;\n }\n\nexport class CategoryEncoding extends Layer {\n  /** @nocollapse */\n  static className = 'CategoryEncoding';\n  private readonly numTokens: number;\n  private readonly outputMode: OutputMode;\n\n  constructor(args: CategoryEncodingArgs) {\n    super(args);\n    this.numTokens = args.numTokens;\n\n    if(args.outputMode) {\n    this.outputMode = args.outputMode;\n    } else {\n      this.outputMode = 'multiHot';\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'numTokens': this.numTokens,\n      'outputMode': this.outputMode,\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if(inputShape == null) {\n      return [this.numTokens];\n    }\n\n    if(this.outputMode === 'oneHot' && inputShape[inputShape.length - 1] !== 1){\n      inputShape.push(this.numTokens);\n      return inputShape;\n    }\n\n    inputShape[inputShape.length - 1] = this.numTokens;\n    return inputShape;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor[]|Tensor {\n    return tidy(() => {\n\n        inputs = getExactlyOneTensor(inputs);\n        if(inputs.dtype !== 'int32') {\n          inputs = K.cast(inputs, 'int32');\n      }\n\n        let countWeights: Tensor1D | Tensor2D;\n\n        if((typeof kwargs['countWeights']) !== 'undefined') {\n\n          if(this.outputMode !== 'count') {\n            throw new ValueError(\n              `countWeights is not used when outputMode !== count.\n              Received countWeights=${kwargs['countWeights']}`);\n          }\n\n          countWeights\n            =  getExactlyOneTensor(kwargs['countWeights']) as Tensor1D|Tensor2D;\n        }\n\n        const maxValue = max(inputs);\n        const minValue = min(inputs);\n        const greaterEqualMax = greater(this.numTokens, maxValue)\n                                                    .bufferSync().get(0);\n\n        const greaterMin = greaterEqual(minValue, 0).bufferSync().get(0);\n\n        if(!(greaterEqualMax && greaterMin)) {\n\n          throw new ValueError('Input values must be between 0 < values <='\n            + ` numTokens with numTokens=${this.numTokens}`);\n        }\n\n        return utils.encodeCategoricalInputs(inputs,\n          this.outputMode, this.numTokens, countWeights);\n    });\n  }\n}\n\nserialization.registerClass(CategoryEncoding);\n","/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport { Tensor, denseBincount, Tensor1D, Tensor2D, TensorLike, mul} from '@tensorflow/tfjs-core';\nimport { getExactlyOneTensor } from '../../utils/types_utils';\nimport { expandDims} from '@tensorflow/tfjs-core';\nimport { ValueError } from '../../errors';\nimport * as K from '../../backend/tfjs_backend';\n\nexport type OutputMode = 'int' | 'oneHot' | 'multiHot' | 'count' | 'tfIdf';\n\nexport function encodeCategoricalInputs(inputs: Tensor|Tensor[],\n                                        outputMode: OutputMode,\n                                        depth: number,\n                                        weights?: Tensor1D|Tensor2D|TensorLike):\n                                        Tensor|Tensor[] {\n\n  let input = getExactlyOneTensor(inputs);\n\n  if(input.dtype !== 'int32') {\n    input = K.cast(input, 'int32');\n    }\n\n  if(outputMode === 'int') {\n    return input;\n  }\n\n  const originalShape = input.shape;\n\n  if(input.rank === 0) {\n    input = expandDims(input, -1);\n  }\n\n  if(outputMode === 'oneHot') {\n    if(input.shape[input.shape.length - 1] !== 1) {\n      input = expandDims(input, -1);\n    }\n  }\n\n  if(input.rank > 2) {\n    throw new ValueError(`When outputMode is not int, maximum output rank is 2`\n    + ` Received outputMode ${outputMode} and input shape ${originalShape}`\n    + ` which would result in output rank ${input.rank}.`);\n  }\n\n  const binaryOutput = ['multiHot', 'oneHot'].includes(outputMode);\n\n  const denseBincountInput = input as Tensor1D | Tensor2D;\n\n  let binCounts: Tensor1D | Tensor2D;\n\n  if ((typeof weights) !== 'undefined' && outputMode === 'count') {\n    binCounts = denseBincount(denseBincountInput, weights, depth, binaryOutput);\n   } else {\n    binCounts = denseBincount(denseBincountInput, [], depth, binaryOutput);\n   }\n\n  if(outputMode !== 'tfIdf') {\n    return binCounts;\n  }\n\n  if (weights) {\n    return mul(binCounts, weights);\n  } else {\n      throw new ValueError(\n        `When outputMode is 'tfIdf', weights must be provided.`\n      );\n  }\n}\n","/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {image, Rank, serialization, Tensor, tidy} from '@tensorflow/tfjs-core';  // mul, add\n\nimport {Layer, LayerArgs} from '../../engine/topology';\nimport {ValueError} from '../../errors';\nimport {Shape} from '../../keras_format/common';\nimport {Kwargs} from '../../types';\nimport {getExactlyOneShape} from '../../utils/types_utils';  //, getExactlyOneTensor\n\n// tf methods unimplemented in tfjs: 'bicubic', 'area', 'lanczos3', 'lanczos5',\n//                                   'gaussian', 'mitchellcubic'\nconst INTERPOLATION_KEYS = ['bilinear', 'nearest'] as const;\nconst INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);\ntype InterpolationType = typeof INTERPOLATION_KEYS[number];\n\nexport declare interface ResizingArgs extends LayerArgs {\n  height: number;\n  width: number;\n  interpolation?: InterpolationType; // default = 'bilinear';\n  cropToAspectRatio?: boolean;       // default = false;\n}\n\n/**\n * Preprocessing Resizing Layer\n *\n * This resizes images by a scaling and offset factor\n */\n\nexport class Resizing extends Layer {\n  /** @nocollapse */\n  static className = 'Resizing';\n  private readonly height: number;\n  private readonly width: number;\n  // method of interpolation to be used; default = \"bilinear\";\n  private readonly interpolation: InterpolationType;\n  // toggle whether the aspect ratio should be preserved; default = false;\n  private readonly cropToAspectRatio: boolean;\n\n  constructor(args: ResizingArgs) {\n    super(args);\n\n    this.height = args.height;\n    this.width = args.width;\n\n    if (args.interpolation) {\n      if (INTERPOLATION_METHODS.has(args.interpolation)) {\n        this.interpolation = args.interpolation;\n      } else {\n        throw new ValueError(`Invalid interpolation parameter: ${\n            args.interpolation} is not implemented`);\n      }\n    } else {\n      this.interpolation = 'bilinear';\n    }\n    this.cropToAspectRatio = Boolean(args.cropToAspectRatio);\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const numChannels = inputShape[2];\n    return [this.height, this.width, numChannels];\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'height': this.height,\n      'width': this.width,\n      'interpolation': this.interpolation,\n      'cropToAspectRatio': this.cropToAspectRatio\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override call(inputs: Tensor<Rank.R3>|Tensor<Rank.R4>, kwargs: Kwargs):\n      Tensor[]|Tensor {\n    return tidy(() => {\n      const size: [number, number] = [this.height, this.width];\n      if (this.interpolation === 'bilinear') {\n        return image.resizeBilinear(inputs, size, !this.cropToAspectRatio);\n      } else if (this.interpolation === 'nearest') {\n        return image.resizeNearestNeighbor(\n            inputs, size, !this.cropToAspectRatio);\n      } else {\n        throw new Error(`Interpolation is ${this.interpolation} but only ${[...INTERPOLATION_METHODS]} are supported`);\n      }\n    });\n  }\n}\n\nserialization.registerClass(Resizing);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {InputLayer, InputLayerArgs} from './engine/input_layer';\nimport {Layer, LayerArgs} from './engine/topology';\nimport {input} from './exports';\nimport {ELU, ELULayerArgs, LeakyReLU, LeakyReLULayerArgs, PReLU, PReLULayerArgs, ReLU, ReLULayerArgs, Softmax, SoftmaxLayerArgs, ThresholdedReLU, ThresholdedReLULayerArgs} from './layers/advanced_activations';\nimport {Conv1D, Conv2D, Conv2DTranspose, Conv3D, ConvLayerArgs, Cropping2D, Cropping2DLayerArgs, SeparableConv2D, SeparableConvLayerArgs, UpSampling2D, UpSampling2DLayerArgs, Conv3DTranspose} from './layers/convolutional';\nimport {DepthwiseConv2D, DepthwiseConv2DLayerArgs} from './layers/convolutional_depthwise';\nimport {ConvLSTM2D, ConvLSTM2DArgs, ConvLSTM2DCell, ConvLSTM2DCellArgs} from './layers/convolutional_recurrent';\nimport {Activation, ActivationLayerArgs, Dense, DenseLayerArgs, Dropout, DropoutLayerArgs, Flatten, FlattenLayerArgs, Masking, MaskingArgs, Permute, PermuteLayerArgs, RepeatVector, RepeatVectorLayerArgs, Reshape, ReshapeLayerArgs, SpatialDropout1D, SpatialDropout1DLayerConfig} from './layers/core';\nimport {Embedding, EmbeddingLayerArgs} from './layers/embeddings';\nimport {Add, Average, Concatenate, ConcatenateLayerArgs, Dot, DotLayerArgs, Maximum, Minimum, Multiply} from './layers/merge';\nimport {AlphaDropout, AlphaDropoutArgs, GaussianDropout, GaussianDropoutArgs, GaussianNoise, GaussianNoiseArgs} from './layers/noise';\nimport {BatchNormalization, BatchNormalizationLayerArgs, LayerNormalization, LayerNormalizationLayerArgs} from './layers/normalization';\nimport {ZeroPadding2D, ZeroPadding2DLayerArgs} from './layers/padding';\nimport {AveragePooling1D, AveragePooling2D, AveragePooling3D, GlobalAveragePooling1D, GlobalAveragePooling2D, GlobalMaxPooling1D, GlobalMaxPooling2D, GlobalPooling2DLayerArgs, MaxPooling1D, MaxPooling2D, MaxPooling3D, Pooling1DLayerArgs, Pooling2DLayerArgs, Pooling3DLayerArgs} from './layers/pooling';\nimport {GRU, GRUCell, GRUCellLayerArgs, GRULayerArgs, LSTM, LSTMCell, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNN, SimpleRNNCell, SimpleRNNCellLayerArgs, SimpleRNNLayerArgs, StackedRNNCells, StackedRNNCellsArgs} from './layers/recurrent';\nimport {Bidirectional, BidirectionalLayerArgs, TimeDistributed, WrapperLayerArgs} from './layers/wrappers';\nimport {Rescaling, RescalingArgs} from './layers/preprocessing/image_preprocessing';\nimport {CenterCrop, CenterCropArgs} from './layers/preprocessing/center_crop';\nimport {CategoryEncoding, CategoryEncodingArgs} from './layers/preprocessing/category_encoding';\nimport {Resizing, ResizingArgs} from './layers/preprocessing/image_resizing';\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// Input Layer.\n/**\n * An input layer is an entry point into a `tf.LayersModel`.\n *\n * `InputLayer` is generated automatically for `tf.Sequential` models by\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\n * should not be specified explicitly. However, it can be useful sometimes,\n * e.g., when constructing a sequential model from a subset of another\n * sequential model's layers. Like the code snippet below shows.\n *\n * ```js\n * // Define a model which simply adds two inputs.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n * model1.summary();\n * model1.predict(tf.zeros([1, 4])).print();\n *\n * // Construct another model, reusing the second layer of `model1` while\n * // not using the first layer of `model1`. Note that you cannot add the second\n * // layer of `model` directly as the first layer of the new sequential model,\n * // because doing so will lead to an error related to the fact that the layer\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\n * // it to the new sequential model before adding the reused layer.\n * const model2 = tf.sequential();\n * // Use an inputShape that matches the input shape of `model1`'s second\n * // layer.\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\n * model2.add(model1.layers[1]);\n * model2.summary();\n * model2.predict(tf.zeros([1, 3])).print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'}\n */\nexport function inputLayer(args: InputLayerArgs) {\n  return new InputLayer(args);\n}\n\n// Advanced Activation Layers.\n\n/**\n * Exponential Linear Unit (ELU).\n *\n * It follows:\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n * `f(x) = x for x >= 0`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function elu(args?: ELULayerArgs) {\n  return new ELU(args);\n}\n\n/**\n * Rectified Linear Unit activation function.\n *\n * Input shape:\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\n *   not include the sample axis) when using this layer as the first layer\n *   in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function reLU(args?: ReLULayerArgs) {\n  return new ReLU(args);\n}\n\n/**\n * Leaky version of a rectified linear unit.\n *\n * It allows a small gradient when the unit is not active:\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function leakyReLU(args?: LeakyReLULayerArgs) {\n  return new LeakyReLU(args);\n}\n\n/**\n * Parameterized version of a leaky rectified linear unit.\n *\n * It follows\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n * wherein `alpha` is a trainable weight.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function prelu(args?: PReLULayerArgs) {\n  return new PReLU(args);\n}\n\n/**\n * Softmax activation layer.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function softmax(args?: SoftmaxLayerArgs) {\n  return new Softmax(args);\n}\n\n/**\n * Thresholded Rectified Linear Unit.\n *\n * It follows:\n * `f(x) = x for x > theta`,\n * `f(x) = 0 otherwise`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\n * Features](http://arxiv.org/abs/1402.3337)\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function thresholdedReLU(args?: ThresholdedReLULayerArgs) {\n  return new ThresholdedReLU(args);\n}\n\n// Convolutional Layers.\n\n/**\n * 1D convolution layer (e.g., temporal convolution).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input over a single spatial (or temporal) dimension\n * to produce a tensor of outputs.\n *\n * If `use_bias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model, provide an\n * `inputShape` argument `Array` or `null`.\n *\n * For example, `inputShape` would be:\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}\n */\nexport function conv1d(args: ConvLayerArgs) {\n  return new Conv1D(args);\n}\n\n/**\n * 2D convolution layer (e.g. spatial convolution over images).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\n * in `dataFormat='channelsLast'`.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2d(args: ConvLayerArgs) {\n  return new Conv2D(args);\n}\n\n/**\n * Transposed convolutional layer (sometimes called Deconvolution).\n *\n * The need for transposed convolutions generally arises\n * from the desire to use a transformation going in the opposite direction of\n * a normal convolution, i.e., from something that has the shape of the output\n * of some convolution to something that has the shape of its input while\n * maintaining a connectivity pattern that is compatible with said\n * convolution.\n *\n * When using this layer as the first layer in a model, provide the\n * configuration `inputShape` (`Array` of integers, does not include the\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n * `dataFormat: 'channelsLast'`.\n *\n * Input shape:\n *   4D tensor with shape:\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n *   or 4D tensor with shape\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast'`.\n *\n * Output shape:\n *   4D tensor with shape:\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\n * `'channelsFirst'`. or 4D tensor with shape:\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n *\n * References:\n *   - [A guide to convolution arithmetic for deep\n * learning](https://arxiv.org/abs/1603.07285v1)\n *   - [Deconvolutional\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2dTranspose(args: ConvLayerArgs) {\n  return new Conv2DTranspose(args);\n}\n\n/**\n * 3D convolution layer (e.g. spatial convolution over volumes).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes\n * in `dataFormat='channelsLast'`.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv3d(args: ConvLayerArgs) {\n  return new Conv3D(args);\n}\n\nexport function conv3dTranspose(args: ConvLayerArgs): Layer {\n  return new Conv3DTranspose(args);\n}\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Separable convolution consists of first performing\n * a depthwise spatial convolution\n * (which acts on each input channel separately)\n * followed by a pointwise convolution which mixes together the resulting\n * output channels. The `depthMultiplier` argument controls how many\n * output channels are generated per input channel in the depthwise step.\n *\n * Intuitively, separable convolutions can be understood as\n * a way to factorize a convolution kernel into two smaller kernels,\n * or as an extreme version of an Inception block.\n *\n * Input shape:\n *   4D tensor with shape:\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n *\n * Output shape:\n *   4D tensor with shape:\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n *     `rows` and `cols` values might have changed due to padding.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function separableConv2d(args: SeparableConvLayerArgs) {\n  return new SeparableConv2D(args);\n}\n\n/**\n * Cropping layer for 2D input (e.g., image).\n *\n * This layer can crop an input\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, croppedRows, croppedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, croppedRows, croppedCols]`.\n *\n * Examples\n * ```js\n *\n * const model = tf.sequential();\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n *                                inputShape: [128, 128, 3]}));\n * //now output shape is [batch, 124, 124, 3]\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function cropping2D(args: Cropping2DLayerArgs) {\n  return new Cropping2D(args);\n}\n\n/**\n * Upsampling layer for 2D inputs.\n *\n * Repeats the rows and columns of the data\n * by size[0] and size[1] respectively.\n *\n *\n * Input shape:\n *    4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *         `[batch, rows, cols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *        `[batch, channels, rows, cols]`\n *\n * Output shape:\n *     4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *        `[batch, upsampledRows, upsampledCols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *         `[batch, channels, upsampledRows, upsampledCols]`\n *\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function upSampling2d(args: UpSampling2DLayerArgs) {\n  return new UpSampling2D(args);\n}\n\n// Convolutional(depthwise) Layers.\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Depthwise Separable convolutions consists in performing just the first step\n * in a depthwise spatial convolution (which acts on each input channel\n * separately). The `depthMultiplier` argument controls how many output channels\n * are generated per input channel in the depthwise step.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function depthwiseConv2d(args: DepthwiseConv2DLayerArgs) {\n  return new DepthwiseConv2D(args);\n}\n\n// Basic Layers.\n\n/**\n * Applies an activation function to an output.\n *\n * This layer applies element-wise activation function.  Other layers, notably\n * `dense` can also apply activation functions.  Use this isolated activation\n * function to extract the values before and after the\n * activation. For instance:\n *\n * ```js\n * const input = tf.input({shape: [5]});\n * const denseLayer = tf.layers.dense({units: 1});\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\n *\n * // Obtain the output symbolic tensors by applying the layers in order.\n * const denseOutput = denseLayer.apply(input);\n * const activationOutput = activationLayer.apply(denseOutput);\n *\n * // Create the model based on the inputs.\n * const model = tf.model({\n *     inputs: input,\n *     outputs: [denseOutput, activationOutput]\n * });\n *\n * // Collect both outputs and print separately.\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\n * denseOut.print();\n * activationOut.print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function activation(args: ActivationLayerArgs) {\n  return new Activation(args);\n}\n\n/**\n * Creates a dense (fully connected) layer.\n *\n * This layer implements the operation:\n *   `output = activation(dot(input, kernel) + bias)`\n *\n * `activation` is the element-wise activation function\n *   passed as the `activation` argument.\n *\n * `kernel` is a weights matrix created by the layer.\n *\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\n * is `true`).\n *\n * **Input shape:**\n *\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\n *\n *   The most common situation would be\n *   a 2D input with shape `(batchSize, inputDim)`.\n *\n * **Output shape:**\n *\n *   nD tensor with shape: `(batchSize, ..., units)`.\n *\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n *   the output would have shape `(batchSize, units)`.\n *\n * Note: if the input to the layer has a rank greater than 2, then it is\n * flattened prior to the initial dot product with the kernel.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function dense(args: DenseLayerArgs) {\n  return new Dense(args);\n}\n\n/**\n * Applies\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\n * the input.\n *\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\n * each update during training time, which helps prevent overfitting.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function dropout(args: DropoutLayerArgs) {\n  return new Dropout(args);\n}\n\n/**\n * Spatial 1D version of Dropout.\n *\n * This Layer type performs the same function as the Dropout layer, but it drops\n * entire 1D feature maps instead of individual elements. For example, if an\n * input example consists of 3 timesteps and the feature map for each timestep\n * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps\n * of the 1st timesteps and 2nd timesteps completely while sparing all feature\n * elements of the 3rd timestep.\n *\n * If adjacent frames (timesteps) are strongly correlated (as is normally the\n * case in early convolution layers), regular dropout will not regularize the\n * activation and will otherwise just result in merely an effective learning\n * rate decrease. In this case, `spatialDropout1d` will help promote\n * independence among feature maps and should be used instead.\n *\n * **Arguments:**\n *   rate: A floating-point number >=0 and <=1. Fraction of the input elements\n *     to drop.\n *\n * **Input shape:**\n *   3D tensor with shape `(samples, timesteps, channels)`.\n *\n * **Output shape:**\n *   Same as the input shape.\n *\n * References:\n *   - [Efficient Object Localization Using Convolutional\n *      Networks](https://arxiv.org/abs/1411.4280)\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function spatialDropout1d(args: SpatialDropout1DLayerConfig) {\n  return new SpatialDropout1D(args);\n}\n\n/**\n * Flattens the input. Does not affect the batch size.\n *\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\n * 2D).\n *\n * For example:\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const flattenLayer = tf.layers.flatten();\n * // Inspect the inferred output shape of the flatten layer, which\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n * // flattening. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function flatten(args?: FlattenLayerArgs) {\n  return new Flatten(args);\n}\n\n/**\n * Repeats the input n times in a new dimension.\n *\n * ```js\n *  const model = tf.sequential();\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n *  const x = tf.tensor2d([[10, 20]]);\n *  // Use the model to do inference on a data point the model hasn't see\n *  model.predict(x).print();\n *  // output shape is now [batch, 2, 4]\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function repeatVector(args: RepeatVectorLayerArgs) {\n  return new RepeatVector(args);\n}\n\n/**\n * Reshapes an input to a certain shape.\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n * // Inspect the inferred output shape of the Reshape layer, which\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\n * ```\n *\n * Input shape:\n *   Arbitrary, although all dimensions in the input shape must be fixed.\n *   Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n *\n * Output shape:\n *   [batchSize, targetShape[0], targetShape[1], ...,\n *    targetShape[targetShape.length - 1]].\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function reshape(args: ReshapeLayerArgs) {\n  return new Reshape(args);\n}\n\n/**\n * Permutes the dimensions of the input according to a given pattern.\n *\n * Useful for, e.g., connecting RNNs and convnets together.\n *\n * Example:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.permute({\n *   dims: [2, 1],\n *   inputShape: [10, 64]\n * }));\n * console.log(model.outputShape);\n * // Now model's output shape is [null, 64, 10], where null is the\n * // unpermuted sample (batch) dimension.\n * ```\n *\n * Input shape:\n *   Arbitrary. Use the configuration field `inputShape` when using this\n *   layer as the first layer in a model.\n *\n * Output shape:\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n *   permuted) according to the `dims` configuration of this layer.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function permute(args: PermuteLayerArgs) {\n  return new Permute(args);\n}\n\n/**\n * Maps positive integers (indices) into dense vectors of fixed size.\n * E.g. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n *\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n *\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\n * outputDim]`.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function embedding(args: EmbeddingLayerArgs) {\n  return new Embedding(args);\n}\n\n// Merge Layers.\n\n/**\n * Layer that performs element-wise addition on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). The inputs are specified as an\n * `Array` when the `apply` method of the `Add` layer instance is called. For\n * example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const addLayer = tf.layers.add();\n * const sum = addLayer.apply([input1, input2]);\n * console.log(JSON.stringify(sum.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function add(args?: LayerArgs) {\n  return new Add(args);\n}\n\n/**\n * Layer that performs element-wise averaging on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const averageLayer = tf.layers.average();\n * const average = averageLayer.apply([input1, input2]);\n * console.log(JSON.stringify(average.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function average(args?: LayerArgs) {\n  return new Average(args);\n}\n\n/**\n * Layer that concatenates an `Array` of inputs.\n *\n * It takes a list of tensors, all of the same shape except for the\n * concatenation axis, and returns a single tensor, the concatenation\n * of all inputs. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 3]});\n * const concatLayer = tf.layers.concatenate();\n * const output = concatLayer.apply([input1, input2]);\n * console.log(JSON.stringify(output.shape));\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\n * // dimension. The last dimension (5) is the result of concatenating the\n * // last dimensions of the inputs (2 and 3).\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function concatenate(args?: ConcatenateLayerArgs) {\n  return new Concatenate(args);\n}\n\n/**\n * Layer that computes the element-wise maximum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const maxLayer = tf.layers.maximum();\n * const max = maxLayer.apply([input1, input2]);\n * console.log(JSON.stringify(max.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function maximum(args?: LayerArgs) {\n  return new Maximum(args);\n}\n\n/**\n * Layer that computes the element-wise minimum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const minLayer = tf.layers.minimum();\n * const min = minLayer.apply([input1, input2]);\n * console.log(JSON.stringify(min.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function minimum(args?: LayerArgs) {\n  return new Minimum(args);\n}\n\n/**\n * Layer that multiplies (element-wise) an `Array` of inputs.\n *\n * It takes as input an Array of tensors, all of the same\n * shape, and returns a single tensor (also of the same shape).\n * For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const input3 = tf.input({shape: [2, 2]});\n * const multiplyLayer = tf.layers.multiply();\n * const product = multiplyLayer.apply([input1, input2, input3]);\n * console.log(product.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function multiply(args?: LayerArgs) {\n  return new Multiply(args);\n}\n\n/**\n * Layer that computes a dot product between samples in two tensors.\n *\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\n * where each entry at index `[i, 0]` will be the dot product between\n * `a[i, :]` and `b[i, :]`.\n *\n * Example:\n *\n * ```js\n * const dotLayer = tf.layers.dot({axes: -1});\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n *\n * // Invoke the layer's apply() method in eager (imperative) mode.\n * const y = dotLayer.apply([x1, x2]);\n * y.print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function dot(args: DotLayerArgs) {\n  return new Dot(args);\n}\n\n// Normalization Layers.\n\n/**\n * Batch normalization layer (Ioffe and Szegedy, 2014).\n *\n * Normalize the activations of the previous layer at each batch,\n * i.e. applies a transformation that maintains the mean activation\n * close to 0 and the activation standard deviation close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n *   not include the sample axis) when calling the constructor of this class,\n *   if this layer is used as a first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\n *\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function batchNormalization(args?: BatchNormalizationLayerArgs) {\n  return new BatchNormalization(args);\n}\n\n/**\n * Layer-normalization layer (Ba et al., 2016).\n *\n * Normalizes the activations of the previous layer for each given example in a\n * batch independently, instead of across a batch like in `batchNormalization`.\n * In other words, this layer applies a transformation that maintains the mean\n * activation within each example close to 0 and activation variance close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the argument `inputShape` when using this layer as the first\n *   layer in a model.\n *\n * Output shape:\n *   Same as input.\n *\n * References:\n *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)\n *\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function layerNormalization(args?: LayerNormalizationLayerArgs) {\n  return new LayerNormalization(args);\n}\n\n// Padding Layers.\n\n/**\n * Zero-padding layer for 2D input (e.g., image).\n *\n * This layer can add rows and columns of zeros\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, paddedRows, paddedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, paddedRows, paddedCols]`.\n *\n * @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'}\n */\nexport function zeroPadding2d(args?: ZeroPadding2DLayerArgs) {\n  return new ZeroPadding2D(args);\n}\n\n// Pooling Layers.\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape: `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * `tf.avgPool1d` is an alias.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling1d(args: Pooling1DLayerArgs) {\n  return new AveragePooling1D(args);\n}\nexport function avgPool1d(args: Pooling1DLayerArgs) {\n  return averagePooling1d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling1d(args: Pooling1DLayerArgs) {\n  return averagePooling1d(args);\n}\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape:\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, rows, cols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, pooledRows, pooledCols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, pooledRows, pooledCols]`\n *\n * `tf.avgPool2d` is an alias.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling2d(args: Pooling2DLayerArgs) {\n  return new AveragePooling2D(args);\n}\nexport function avgPool2d(args: Pooling2DLayerArgs) {\n  return averagePooling2d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling2d(args: Pooling2DLayerArgs) {\n  return averagePooling2d(args);\n}\n\n/**\n * Average pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      4D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling3d(args: Pooling3DLayerArgs) {\n  return new AveragePooling3D(args);\n}\nexport function avgPool3d(args: Pooling3DLayerArgs) {\n  return averagePooling3d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling3d(args: Pooling3DLayerArgs) {\n  return averagePooling3d(args);\n}\n\n/**\n * Global average pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape: 2D tensor with shape: `[batchSize, features]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalAveragePooling1d(args?: LayerArgs) {\n  return new GlobalAveragePooling1D(args);\n}\n\n/**\n * Global average pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalAveragePooling2d(args: GlobalPooling2DLayerArgs) {\n  return new GlobalAveragePooling2D(args);\n}\n\n/**\n * Global max pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape: 2D tensor with shape: `[batchSize, features]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalMaxPooling1d(args?: LayerArgs) {\n  return new GlobalMaxPooling1D(args);\n}\n\n/**\n * Global max pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalMaxPooling2d(args: GlobalPooling2DLayerArgs) {\n  return new GlobalMaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for temporal data.\n *\n * Input shape:  `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling1d(args: Pooling1DLayerArgs) {\n  return new MaxPooling1D(args);\n}\n\n/**\n * Max pooling operation for spatial data.\n *\n * Input shape\n *   - If `dataFormat === CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, rows, cols, channels]`\n *   - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *       `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=CHANNEL_FIRST`:\n *       4D tensor with shape:\n *       `[batchSize, channels, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling2d(args: Pooling2DLayerArgs) {\n  return new MaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      5D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling3d(args: Pooling3DLayerArgs) {\n  return new MaxPooling3D(args);\n}\n\n// Recurrent Layers.\n\n/**\n * Gated Recurrent Unit - Cho et al. 2014.\n *\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `GRUCell`'s number of units.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function gru(args: GRULayerArgs) {\n  return new GRU(args);\n}\n\n/**\n * Cell class for `GRU`.\n *\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `GRU` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.gruCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.gruCell({units: 4}),\n *   tf.layers.gruCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `gruCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\n * `tf.layers.gru`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function gruCell(args: GRUCellLayerArgs) {\n  return new GRUCell(args);\n}\n\n/**\n * Long-Short Term Memory layer - Hochreiter 1997.\n *\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = lstm.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `LSTMCell`'s number of units.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function lstm(args: LSTMLayerArgs) {\n  return new LSTM(args);\n}\n\n/**\n * Cell class for `LSTM`.\n *\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `LSTM` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.lstmCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.lstmCell({units: 4}),\n *   tf.layers.lstmCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `lstmCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\n * `tf.layers.lstm`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function lstmCell(args: LSTMCellLayerArgs) {\n  return new LSTMCell(args);\n}\n\n/**\n * Fully-connected RNN where the output is to be fed back to input.\n *\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function simpleRNN(args: SimpleRNNLayerArgs) {\n  return new SimpleRNN(args);\n}\n\n/**\n * Cell class for `SimpleRNN`.\n *\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `SimpleRNN` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.simpleRNNCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.simpleRNNCell({units: 4}),\n *   tf.layers.simpleRNNCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n * `tf.layers.simpleRNN`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function simpleRNNCell(args: SimpleRNNCellLayerArgs) {\n  return new SimpleRNNCell(args);\n}\n\n/**\n * Convolutional LSTM layer - Xingjian Shi 2015.\n *\n * This is a `ConvRNN2D` layer consisting of one `ConvLSTM2DCell`. However,\n * unlike the underlying `ConvLSTM2DCell`, the `apply` method of `ConvLSTM2D`\n * operates on a sequence of inputs. The shape of the input (not including the\n * first, batch dimension) needs to be 4-D, with the first dimension being time\n * steps. For example:\n *\n * ```js\n * const filters = 3;\n * const kernelSize = 3;\n *\n * const batchSize = 4;\n * const sequenceLength = 2;\n * const size = 5;\n * const channels = 3;\n *\n * const inputShape = [batchSize, sequenceLength, size, size, channels];\n * const input = tf.ones(inputShape);\n *\n * const layer = tf.layers.convLstm2d({filters, kernelSize});\n *\n * const output = layer.apply(input);\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function convLstm2d(args: ConvLSTM2DArgs) {\n  return new ConvLSTM2D(args);\n}\n\n/**\n * Cell class for `ConvLSTM2D`.\n *\n * `ConvLSTM2DCell` is distinct from the `ConvRNN2D` subclass `ConvLSTM2D` in\n * that its `call` method takes the input data of only a single time step and\n * returns the cell's output at the time step, while `ConvLSTM2D` takes the\n * input data over a number of time steps. For example:\n *\n * ```js\n * const filters = 3;\n * const kernelSize = 3;\n *\n * const sequenceLength = 1;\n * const size = 5;\n * const channels = 3;\n *\n * const inputShape = [sequenceLength, size, size, channels];\n * const input = tf.ones(inputShape);\n *\n * const cell = tf.layers.convLstm2dCell({filters, kernelSize});\n *\n * cell.build(input.shape);\n *\n * const outputSize = size - kernelSize + 1;\n * const outShape = [sequenceLength, outputSize, outputSize, filters];\n *\n * const initialH = tf.zeros(outShape);\n * const initialC = tf.zeros(outShape);\n *\n * const [o, h, c] = cell.call([input, initialH, initialC], {});\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function convLstm2dCell(args: ConvLSTM2DCellArgs) {\n  return new ConvLSTM2DCell(args);\n}\n\n/**\n * Base class for recurrent layers.\n *\n * Input shape:\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n *\n * Output shape:\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\n *     tensor is the output. The remaining tensors are the states at the\n *     last time step, each with shape `[batchSize, units]`.\n *   - if `returnSequences`, the output will have shape\n *     `[batchSize, timeSteps, units]`.\n *   - else, the output will have shape `[batchSize, units]`.\n *\n * Masking:\n *   This layer supports masking for input data with a variable number\n *   of timesteps. To introduce masks to your data,\n *   use an embedding layer with the `mask_zero` parameter\n *   set to `True`.\n *\n * Notes on using statefulness in RNNs:\n *   You can set RNN layers to be 'stateful', which means that the states\n *   computed for the samples in one batch will be reused as initial states\n *   for the samples in the next batch. This assumes a one-to-one mapping\n *   between samples in different successive batches.\n *\n *   To enable statefulness:\n *     - specify `stateful: true` in the layer constructor.\n *     - specify a fixed batch size for your model, by passing\n *       if sequential model:\n *         `batchInputShape=[...]` to the first layer in your model.\n *       else for functional model with 1 or more Input layers:\n *         `batchShape=[...]` to all the first layers in your model.\n *       This is the expected shape of your inputs *including the batch size*.\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n *     - specify `shuffle=False` when calling fit().\n *\n *   To reset the states of your model, call `.resetStates()` on either\n *   a specific layer, or on your entire model.\n *\n * Note on specifying the initial state of RNNs\n *   You can specify the initial state of RNN layers symbolically by\n *   calling them with the option `initialState`. The value of\n *   `initialState` should be a tensor or list of tensors representing\n *   the initial state of the RNN layer.\n *\n *   You can specify the initial state of RNN layers numerically by\n *   calling `resetStates` with the keyword argument `states`. The value of\n *   `states` should be a numpy array or list of numpy arrays representing\n *   the initial state of the RNN layer.\n *\n * Note on passing external constants to RNNs\n *   You can pass \"external\" constants to the cell using the `constants`\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\n *   method accepts the same keyword argument `constants`. Such constants\n *   can be used to condition the cell transformation on additional static\n *   inputs (not changing over time), a.k.a. an attention mechanism.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function rnn(args: RNNLayerArgs) {\n  return new RNN(args);\n}\n\n/**\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\n *\n * Used to implement efficient stacked RNNs.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function stackedRNNCells(args: StackedRNNCellsArgs){\n  return new StackedRNNCells(args);\n}\n\n// Wrapper Layers.\n\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nexport function bidirectional(args: BidirectionalLayerArgs) {\n  return new Bidirectional(args);\n}\n\n/**\n * This wrapper applies a layer to every temporal slice of an input.\n *\n * The input should be at least 3D,  and the dimension of the index `1` will be\n * considered to be the temporal dimension.\n *\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\n * 16]`, and the `inputShape`, not including the sample dimension, is\n * `[10, 16]`.\n *\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\n * timesteps, independently:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.dense({units: 8}),\n *   inputShape: [10, 16],\n * }));\n *\n * // Now model.outputShape = [null, 10, 8].\n * // The output will then have shape `[32, 10, 8]`.\n *\n * // In subsequent layers, there is no need for `inputShape`:\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * // Now model.outputShape = [null, 10, 32].\n * ```\n *\n * The output will then have shape `[32, 10, 32]`.\n *\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\n * instance a `Conv2D` layer.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n *   inputShape: [10, 299, 299, 3],\n * }));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'}\n */\nexport function timeDistributed(args: WrapperLayerArgs) {\n  return new TimeDistributed(args);\n}\n\n// Aliases for pooling.\nexport const globalMaxPool1d = globalMaxPooling1d;\nexport const globalMaxPool2d = globalMaxPooling2d;\nexport const maxPool1d = maxPooling1d;\nexport const maxPool2d = maxPooling2d;\n\nexport {Layer, RNN, RNNCell, input /* alias for tf.input */};\n\n/**\n * Apply additive zero-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * This is useful to mitigate overfitting\n * (you could see it as a form of random data augmentation).\n * Gaussian Noise (GS) is a natural choice as corruption process\n * for real valued inputs.\n *\n * # Arguments\n * stddev: float, standard deviation of the noise distribution.\n *\n * # Input shape\n * Arbitrary. Use the keyword argument `input_shape`\n * (tuple of integers, does not include the samples axis)\n * when using this layer as the first layer in a model.\n *\n * # Output shape\n * Same shape as input.\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function gaussianNoise(args: GaussianNoiseArgs) {\n  return new GaussianNoise(args);\n}\n\n/**\n * Apply multiplicative 1-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](\n *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function gaussianDropout(args: GaussianDropoutArgs) {\n  return new GaussianDropout(args);\n}\n\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function alphaDropout(args: AlphaDropoutArgs) {\n  return new AlphaDropout(args);\n}\n\n/**\n * Masks a sequence by using a mask value to skip timesteps.\n *\n * If all features for a given sample timestep are equal to `mask_value`,\n * then the sample timestep will be masked (skipped) in all downstream layers\n * (as long as they support masking).\n *\n * If any downstream layer does not support masking yet receives such\n * an input mask, an exception will be raised.\n *\n * Arguments:\n *   - `maskValue`: Either None or mask value to skip.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'}\n */\nexport function masking(args?: MaskingArgs) {\n  return new Masking(args);\n}\n\n/**\n * A preprocessing layer which rescales input values to a new range.\n *\n * This layer rescales every value of an input (often an image) by multiplying\n * by `scale` and adding `offset`.\n *\n * For instance:\n * 1. To rescale an input in the ``[0, 255]`` range\n * to be in the `[0, 1]` range, you would pass `scale=1/255`.\n * 2. To rescale an input in the ``[0, 255]`` range to be in the `[-1, 1]`\n * range, you would pass `scale=1./127.5, offset=-1`.\n * The rescaling is applied both during training and inference. Inputs can be\n * of integer or floating point dtype, and by default the layer will output\n * floats.\n *\n * Arguments:\n *   - `scale`: Float, the scale to apply to the inputs.\n *   - `offset`: Float, the offset to apply to the inputs.\n *\n * Input shape:\n *   Arbitrary.\n *\n * Output shape:\n *   Same as input.\n *\n * @doc {heading: 'Layers', subheading: 'Rescaling', namespace: 'layers'}\n */\nexport function rescaling(args?: RescalingArgs) {\n  return new Rescaling(args);\n}\n\n/**\n *  A preprocessing layer which center crops images.\n *\n *   This layers crops the central portion of the images to a target size. If an\n *   image is smaller than the target size, it will be resized and cropped so as\n *   to return the largest possible window in the image that matches the target\n *   aspect ratio.\n *\n *   Input pixel values can be of any range (e.g. `[0., 1.)` or `[0, 255]`) and\n *   of integer or floating point dtype.\n *\n *   If the input height/width is even and the target height/width is odd (or\n *   inversely), the input image is left-padded by 1 pixel.\n *\n *   Arguments:\n *     `height`: Integer, the height of the output shape.\n *     `width`: Integer, the width of the output shape.\n *\n *   Input shape:\n *     3D (unbatched) or 4D (batched) tensor with shape:\n *     `(..., height, width, channels)`, in `channelsLast` format.\n *\n *   Output shape:\n *     3D (unbatched) or 4D (batched) tensor with shape:\n *     `(..., targetHeight, targetWidth, channels)`.\n *\n *\n *  @doc {heading: 'Layers', subheading: 'CenterCrop', namespace: 'layers'}\n */\nexport function centerCrop(args?: CenterCropArgs) {\n   return new CenterCrop(args);\n  }\n  \n/**\n * A preprocessing layer which resizes images.\n * This layer resizes an image input to a target height and width. The input\n * should be a 4D (batched) or 3D (unbatched) tensor in `\"channels_last\"`\n * format.  Input pixel values can be of any range (e.g. `[0., 1.)` or `[0,\n * 255]`) and of interger or floating point dtype. By default, the layer will\n * output floats.\n *\n * Arguments:\n *   - `height`: number, the height for the output tensor.\n *   - `width`: number, the width for the output tensor.\n *   - `interpolation`: string, the method for image resizing interpolation.\n *   - `cropToAspectRatio`: boolean, whether to keep image aspect ratio.\n *\n * Input shape:\n *   Arbitrary.\n *\n * Output shape:\n *   height, width, num channels.\n *\n * @doc {heading: 'Layers', subheading: 'Resizing', namespace: 'layers'}\n */\nexport function resizing(args?: ResizingArgs) {\n  return new Resizing(args);\n}\n\n/**\n * A preprocessing layer which encodes integer features.\n *\n * This layer provides options for condensing data into a categorical encoding\n * when the total number of tokens are known in advance. It accepts integer\n * values as inputs, and it outputs a dense representation of those\n * inputs.\n *\n * Arguments:\n *\n * numTokens: The total number of tokens the layer should support. All\n *  inputs to the layer must integers in the range `0 <= value <\n *  numTokens`, or an error will be thrown.\n *\n * outputMode: Specification for the output of the layer.\n *  Defaults to `multiHot`. Values can be `oneHot`, `multiHot` or\n *  `count`, configuring the layer as follows:\n *\n *    oneHot: Encodes each individual element in the input into an\n *      array of `numTokens` size, containing a 1 at the element index. If\n *      the last dimension is size 1, will encode on that dimension. If the\n *      last dimension is not size 1, will append a new dimension for the\n *      encoded output.\n *\n *    multiHot: Encodes each sample in the input into a single array\n *     of `numTokens` size, containing a 1 for each vocabulary term\n *     present in the sample. Treats the last dimension as the sample\n *     dimension, if input shape is `(..., sampleLength)`, output shape\n *     will be `(..., numTokens)`.\n *\n *    count: Like `multiHot`, but the int array contains a count of\n *     the number of times the token at that index appeared in the sample.\n *\n *  For all output modes, currently only output up to rank 2 is supported.\n *   Call arguments:\n *    inputs: A 1D or 2D tensor of integer inputs.\n *    countWeights: A tensor in the same shape as `inputs` indicating the\n *    weight for each sample value when summing up in `count` mode. Not used\n *    in `multiHot` or `oneHot` modes.\n *\n *\n * @doc {heading: 'Layers', subheading: 'CategoryEncoding', namespace: 'layers'}\n */\nexport function categoryEncoding(args: CategoryEncodingArgs) {\n  return new CategoryEncoding(args);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\n\nimport {BaseCallback} from './base_callbacks';\nimport {Container} from './engine/container';\nimport {LayersModel} from './engine/training';\nimport {NotImplementedError} from './errors';\nimport {Logs, resolveScalarsInLogs} from './logs';\n\nexport abstract class Callback extends BaseCallback {\n  /** Instance of `keras.models.Model`. Reference of the model being trained. */\n  model: LayersModel = null;\n\n  override setModel(model: Container): void {\n    if (!(model instanceof LayersModel)) {\n      throw new Error('model must be a LayersModel, not some other Container');\n    }\n    this.model = model;\n  }\n}\n\nexport interface EarlyStoppingCallbackArgs {\n  /**\n   * Quantity to be monitored.\n   *\n   * Defaults to 'val_loss'.\n   */\n  monitor?: string;\n\n  /**\n   * Minimum change in the monitored quantity to qualify as improvement,\n   * i.e., an absolute change of less than `minDelta` will count as no\n   * improvement.\n   *\n   * Defaults to 0.\n   */\n  minDelta?: number;\n\n  /**\n   * Number of epochs with no improvement after which training will be stopped.\n   *\n   * Defaults to 0.\n   */\n  patience?: number;\n\n  /** Verbosity mode. */\n  verbose?: number;\n\n  /**\n   * Mode: one of 'min', 'max', and 'auto'.\n   * - In 'min' mode, training will be stopped when the quantity monitored has\n   *   stopped decreasing.\n   * - In 'max' mode, training will be stopped when the quantity monitored has\n   *   stopped increasing.\n   * - In 'auto' mode, the direction is inferred automatically from the name of\n   *   the monitored quantity.\n   *\n   * Defaults to 'auto'.\n   */\n  mode?: 'auto'|'min'|'max';\n\n  /**\n   * Baseline value of the monitored quantity.\n   *\n   * If specified, training will be stopped if the model doesn't show\n   * improvement over the baseline.\n   */\n  baseline?: number;\n\n  /**\n   * Whether to restore model weights from the epoch with the best value\n   * of the monitored quantity. If `False`, the model weights obtained at the\n   * last step of training are used.\n   *\n   * **`True` is not supported yet.**\n   */\n  restoreBestWeights?: boolean;\n}\n\nfunction less(currVal: number, prevVal: number) {\n  return currVal < prevVal;\n}\n\nfunction greater(currVal: number, prevVal: number) {\n  return currVal > prevVal;\n}\n\n/**\n * A Callback that stops training when a monitored quantity has stopped\n * improving.\n */\nexport class EarlyStopping extends Callback {\n  protected readonly monitor: string;\n  protected readonly minDelta: number;\n  protected readonly patience: number;\n  protected readonly baseline: number;\n  protected readonly verbose: number;\n  protected readonly mode: 'auto'|'min'|'max';\n\n  protected monitorFunc: (currVal: number, prevVal: number) => boolean;\n\n  private wait: number;\n  private stoppedEpoch: number;\n  private best: number;\n\n  constructor(args?: EarlyStoppingCallbackArgs) {\n    super();\n    if (args == null) {\n      args = {};\n    }\n    if (args.restoreBestWeights) {\n      throw new NotImplementedError(\n          'restoreBestWeights = True is not implemented in EarlyStopping yet.');\n    }\n\n    this.monitor = args.monitor || 'val_loss';\n    this.minDelta = Math.abs(args.minDelta || 0);\n    this.patience = args.patience || 0;\n    this.verbose = args.verbose || 0;\n    this.mode = args.mode || 'auto';\n    this.baseline = args.baseline;\n\n    if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {\n      console.warn(\n          `EarlyStopping mode '${this.mode}' is invalid. ` +\n          `Falling back to mode 'auto'.`);\n      this.mode = 'auto';\n    }\n\n    if (this.mode === 'min') {\n      this.monitorFunc = less;\n    } else if (this.mode === 'max') {\n      this.monitorFunc = greater;\n    } else {\n      // For mode === 'auto'.\n      if (this.monitor.indexOf('acc') !== -1) {\n        this.monitorFunc = greater;\n      } else {\n        this.monitorFunc = less;\n      }\n    }\n\n    if (this.monitorFunc === less) {\n      this.minDelta *= -1;\n    }\n  }\n\n  override async onTrainBegin(logs?: Logs) {\n    this.wait = 0;\n    this.stoppedEpoch = 0;\n    if (this.baseline != null) {\n      this.best = this.baseline;\n    } else {\n      this.best = this.monitorFunc === less ? Infinity : -Infinity;\n    }\n  }\n\n  override async onEpochEnd(epoch: number, logs?: Logs) {\n    await resolveScalarsInLogs(logs);\n    const current = this.getMonitorValue(logs);\n    if (current == null) {\n      return;\n    }\n\n    if (this.monitorFunc(current - this.minDelta, this.best)) {\n      this.best = current;\n      this.wait = 0;\n      // TODO(cais): Logic for restoreBestWeights.\n    } else {\n      this.wait++;\n      if (this.wait >= this.patience) {\n        this.stoppedEpoch = epoch;\n        this.model.stopTraining = true;\n      }\n      // TODO(cais): Logic for restoreBestWeights.\n    }\n  }\n\n  override async onTrainEnd(logs?: Logs) {\n    if (this.stoppedEpoch > 0 && this.verbose) {\n      console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);\n    }\n  }\n\n  private getMonitorValue(logs: Logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    const monitorValue = logs[this.monitor];\n    if (monitorValue == null) {\n      console.warn(\n          `Metric for EarlyStopping ${this.monitor} is not available. ` +\n          `Available metrics are: ${Object.keys(logs)}`);\n    }\n    return monitorValue;\n  }\n}\n\n/**\n * Factory function for a Callback that stops training when a monitored\n * quantity has stopped improving.\n *\n * Early stopping is a type of regularization, and protects model against\n * overfitting.\n *\n * The following example based on fake data illustrates how this callback\n * can be used during `tf.LayersModel.fit()`:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense({\n *   units: 3,\n *   activation: 'softmax',\n *   kernelInitializer: 'ones',\n *   inputShape: [2]\n * }));\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\n * model.compile(\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\n *\n * // Without the EarlyStopping callback, the val_acc value would be:\n * //   0.5, 0.5, 0.5, 0.5, ...\n * // With val_acc being monitored, training should stop after the 2nd epoch.\n * const history = await model.fit(xs, ys, {\n *   epochs: 10,\n *   validationData: [xsVal, ysVal],\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\n * });\n *\n * // Expect to see a length-2 array.\n * console.log(history.history.val_acc);\n * ```\n *\n * @doc {\n *   heading: 'Callbacks',\n *   namespace: 'callbacks'\n * }\n */\nexport function earlyStopping(args?: EarlyStoppingCallbackArgs) {\n  return new EarlyStopping(args);\n}\n\nexport const callbacks = {earlyStopping};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  // Not a legal value for DataType.  Used to indicate a DataType field\n  // has not been set.\n  DT_INVALID = 0,\n\n  // Data types that all computation devices are expected to be\n  // capable to support.\n  DT_FLOAT = 1,\n  DT_DOUBLE = 2,\n  DT_INT32 = 3,\n  DT_UINT8 = 4,\n  DT_INT16 = 5,\n  DT_INT8 = 6,\n  DT_STRING = 7,\n  DT_COMPLEX64 = 8,  // Single-precision complex\n  DT_INT64 = 9,\n  DT_BOOL = 10,\n  DT_QINT8 = 11,     // Quantized int8\n  DT_QUINT8 = 12,    // Quantized uint8\n  DT_QINT32 = 13,    // Quantized int32\n  DT_BFLOAT16 = 14,  // Float32 truncated to 16 bits.  Only for cast ops.\n  DT_QINT16 = 15,    // Quantized int16\n  DT_QUINT16 = 16,   // Quantized uint16\n  DT_UINT16 = 17,\n  DT_COMPLEX128 = 18,  // Double-precision complex\n  DT_HALF = 19,\n  DT_RESOURCE = 20,\n  DT_VARIANT = 21,  // Arbitrary C++ data types\n  DT_UINT32 = 22,\n  DT_UINT64 = 23,\n\n  // Do not use!  These are only for parameters.  Every enum above\n  // should have a corresponding value below (verified by types_test).\n  DT_FLOAT_REF = 101,\n  DT_DOUBLE_REF = 102,\n  DT_INT32_REF = 103,\n  DT_UINT8_REF = 104,\n  DT_INT16_REF = 105,\n  DT_INT8_REF = 106,\n  DT_STRING_REF = 107,\n  DT_COMPLEX64_REF = 108,\n  DT_INT64_REF = 109,\n  DT_BOOL_REF = 110,\n  DT_QINT8_REF = 111,\n  DT_QUINT8_REF = 112,\n  DT_QINT32_REF = 113,\n  DT_BFLOAT16_REF = 114,\n  DT_QINT16_REF = 115,\n  DT_QUINT16_REF = 116,\n  DT_UINT16_REF = 117,\n  DT_COMPLEX128_REF = 118,\n  DT_HALF_REF = 119,\n  DT_RESOURCE_REF = 120,\n  DT_VARIANT_REF = 121,\n  DT_UINT32_REF = 122,\n  DT_UINT64_REF = 123,\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|string|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Resource id tensor was originally assigned to.  */\n  resourceId?: (number|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst ENV = env();\n\n/** Whether to keep intermediate tensors. */\nENV.registerFlag('KEEP_INTERMEDIATE_TENSORS', () => false, debugValue => {\n  if (debugValue) {\n    console.warn(\n        'Keep intermediate tensors is ON. This will print the values of all ' +\n        'intermediate tensors during model inference. Not all models ' +\n        'support this mode. For details, check e2e/benchmarks/ ' +\n        'model_config.js. This significantly impacts performance.');\n  }\n});\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.1.0';\nexport {version};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\n// tslint:disable:no-any\n\n/**\n * A return value for a mapping function that can be applied via deepMap.\n *\n * If recurse is true, the value should be empty, and iteration will continue\n * into the object or array.\n */\nexport type DeepMapResult = {\n  value: any,\n  recurse: boolean\n};\n\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\nexport function deepMap(input: any, mapFn: (x: any) => DeepMapResult): any|\n    any[] {\n  return deepMapInternal(input, mapFn);\n}\n\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepMapInternal(\n    input: any, mapFn: (x: any) => DeepMapResult,\n    seen: Map<any, any> = new Map(), containedIn: Set<{}> = new Set()): any|\n    any[] {\n  if (input == null) {\n    return null;\n  }\n  if (typeof Blob === 'function' && input instanceof Blob) {\n    return input.slice();\n  }\n\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  if (seen.has(input)) {\n    return seen.get(input);\n  }\n  const result = mapFn(input);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error(\n        'A deep map function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    seen.set(input, result.value);\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable: any|any[] = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const child = input[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    if (input.__proto__) {\n      mappedIterable.__proto__ = input.__proto__;\n    }\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n\n// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\nexport function deepZip(\n    inputs: any[], zipFn: (xs: any[]) => DeepMapResult = zipToList): any|any[] {\n  return deepZipInternal(inputs, zipFn);\n}\n\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepZipInternal(\n    inputs: any[], zipFn: (xs: any[]) => DeepMapResult,\n    containedIn: Set<{}> = new Set()): any|any[] {\n  // The recursion follows the structure of input 0; it's assumed that all the\n  // other inputs have the same structure.\n  const input = inputs[0];\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  const result = zipFn(inputs);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error(\n        'A deep zip function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable: any|any[] = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const children = inputs.map(x => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n\n// tslint:disable-next-line:no-any\nexport function zipToList(x: any[]): DeepMapResult {\n  if (x === null) {\n    return null;\n  }\n  // TODO(soergel): validate array type?\n\n  if (isIterable(x[0])) {\n    return {value: null, recurse: true};\n  } else {\n    return {value: x, recurse: false};\n  }\n}\n\n/**\n * A return value for an async map function for use with deepMapAndAwaitAll.\n *\n * If recurse is true, the value should be empty, and iteration will continue\n * into the object or array.\n */\nexport type DeepMapAsyncResult = {\n  value: Promise<any>,\n  recurse: boolean\n};\n\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\nexport async function deepMapAndAwaitAll(\n    input: any, mapFn: (x: any) => DeepMapAsyncResult): Promise<any|any[]> {\n  const seen: Map<any, any> = new Map();\n\n  // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n  deepMapInternal(input, mapFn, seen);\n\n  // Replace the Promises in 'seen' in place.\n  // Note TypeScript provides no async map iteration, and regular map iteration\n  // is broken too, so sadly we have to do Array.from() to make it work.\n  // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n  for (const key of Array.from(seen.keys())) {\n    const value = seen.get(key);\n    if (tf.util.isPromise(value)) {\n      const mappedValue = await value;\n      seen.set(key, mappedValue);\n    }\n  }\n\n  // Normal deepMap again, this time filling in the resolved values.\n  // It's unfortunate that we have to do two passes.\n  // TODO(soergel): test performance and think harder about a fast solution.\n  const result = deepMapInternal(input, mapFn, seen);\n  return result;\n}\n\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\nexport function isIterable(obj: any): boolean {\n  let isTextDecoder = false;\n  if (tf.env().get('IS_BROWSER')) {\n    isTextDecoder = obj instanceof TextDecoder;\n  } else {\n    // tslint:disable-next-line:no-require-imports\n    const {StringDecoder} = require('string_decoder');\n    isTextDecoder = obj instanceof StringDecoder;\n  }\n  return obj != null && (!ArrayBuffer.isView(obj)) &&\n      (Array.isArray(obj) ||\n       (typeof obj === 'object' && !(obj instanceof tf.Tensor) &&\n        !(obj instanceof Promise) && !isTextDecoder));\n}\n\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\nexport function canTensorify(obj: any): boolean {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) ||\n      (typeof obj === 'object' && (obj instanceof tf.Tensor)) ||\n      tf.util.isTypedArray(obj);\n}\n\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\nfunction isPrimitive(value: any): boolean {\n  return (\n      value === null ||\n      (typeof value !== 'object' && typeof value !== 'function'));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {deepMap, DeepMapResult, isIterable} from './deep_map';\n\nexport function deepClone<T>(container: T): T {\n  return deepMap(container, cloneIfTensor);\n}\n\n// tslint:disable-next-line: no-any\nfunction cloneIfTensor(item: any): DeepMapResult {\n  if (item instanceof tf.Tensor) {\n    return ({value: item.clone(), recurse: false});\n  } else if (isIterable(item)) {\n    return {value: null, recurse: true};\n  } else {\n    return {value: item, recurse: false};\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport class RingBuffer<T> {\n  // Note we store the indices in the range 0 <= index < 2*capacity.\n  // This allows us to distinguish the full from the empty case.\n  // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n  protected begin = 0;  // inclusive\n  protected end = 0;    // exclusive\n  protected doubledCapacity: number;\n\n  protected data: T[];\n\n  /**\n   * Constructs a `RingBuffer`.\n   * @param capacity The number of items that the buffer can accomodate.\n   */\n  constructor(public capacity: number) {\n    if (capacity == null) {\n      throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n    }\n    if (capacity < 1) {\n      throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n    }\n    this.data = new Array<T>(capacity);\n    this.doubledCapacity = 2 * capacity;\n  }\n\n  /**\n   * Map any index into the range 0 <= index < 2*capacity.\n   */\n  protected wrap(index: number) {\n    // don't trust % on negative numbers\n    while (index < 0) {\n      index += this.doubledCapacity;\n    }\n    return index % this.doubledCapacity;\n  }\n\n  protected get(index: number) {\n    if (index < 0) {\n      throw new RangeError('Can\\'t get item at a negative index.');\n    }\n    return this.data[index % this.capacity];\n  }\n\n  protected set(index: number, value: T) {\n    if (index < 0) {\n      throw new RangeError('Can\\'t set item at a negative index.');\n    }\n    this.data[index % this.capacity] = value;\n  }\n\n  /**\n   * Returns the current number of items in the buffer.\n   */\n  length(): number {\n    let length = this.end - this.begin;\n    if (length < 0) {\n      length = this.doubledCapacity + length;\n    }\n    return length;\n  }\n\n  /**\n   * Reports whether the buffer is full.\n   * @returns true if the number of items in the buffer equals its capacity, and\n   *   false otherwise.\n   */\n  isFull() {\n    return this.length() === this.capacity;\n  }\n\n  /**\n   * Reports whether the buffer is empty.\n   * @returns true if the number of items in the buffer equals zero, and\n   *   false otherwise.\n   */\n  isEmpty() {\n    return this.length() === 0;\n  }\n\n  /**\n   * Adds an item to the end of the buffer.\n   */\n  push(value: T) {\n    if (this.isFull()) {\n      throw new RangeError('Ring buffer is full.');\n    }\n    this.set(this.end, value);\n    this.end = this.wrap(this.end + 1);\n  }\n\n  /**\n   * Adds many items to the end of the buffer, in order.\n   */\n  pushAll(values: T[]) {\n    for (const value of values) {\n      this.push(value);\n    }\n  }\n\n  /**\n   * Removes and returns the last item in the buffer.\n   */\n  pop(): T {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n    this.end = this.wrap(this.end - 1);\n    const result = this.get(this.end);\n    this.set(this.end, undefined);\n    return result;\n  }\n\n  /**\n   * Adds an item to the beginning of the buffer.\n   */\n  unshift(value: T) {\n    if (this.isFull()) {\n      throw new RangeError('Ring buffer is full.');\n    }\n    this.begin = this.wrap(this.begin - 1);\n    this.set(this.begin, value);\n  }\n\n  /**\n   * Removes and returns the first item in the buffer.\n   */\n  shift(): T {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n    const result = this.get(this.begin);\n    this.set(this.begin, undefined);\n    this.begin = this.wrap(this.begin + 1);\n    return result;\n  }\n\n  /**\n   * Removes and returns a specific item in the buffer, and moves the last item\n   * to the vacated slot.  This is useful for implementing a shuffling stream.\n   * Note that this operation necessarily scrambles the original order.\n   *\n   * @param relativeIndex: the index of the item to remove, relative to the\n   *   first item in the buffer (e.g., hiding the ring nature of the underlying\n   *   storage).\n   */\n  shuffleExcise(relativeIndex: number): T {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n    const index = this.wrap(this.begin + relativeIndex);\n    const result = this.get(index);\n    this.set(index, this.pop());\n    return result;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {RingBuffer} from './ring_buffer';\n\nexport class GrowingRingBuffer<T> extends RingBuffer<T> {\n  private static INITIAL_CAPACITY = 32;\n\n  /**\n   * Constructs a `GrowingRingBuffer`.\n   */\n  constructor() {\n    super(GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n\n  override isFull() {\n    return false;\n  }\n\n  override push(value: T) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.push(value);\n  }\n\n  override unshift(value: T) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.unshift(value);\n  }\n\n  /**\n   * Doubles the capacity of the buffer.\n   */\n  private expand() {\n    const newCapacity = this.capacity * 2;\n    const newData = new Array<T>(newCapacity);\n    const len = this.length();\n\n    // Rotate the buffer to start at index 0 again, since we can't just\n    // allocate more space at the end.\n    for (let i = 0; i < len; i++) {\n      newData[i] = this.get(this.wrap(this.begin + i));\n    }\n\n    this.data = newData;\n    this.capacity = newCapacity;\n    this.doubledCapacity = 2 * this.capacity;\n    this.begin = 0;\n    this.end = len;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {Container} from '../types';\nimport {deepClone} from '../util/deep_clone';\nimport {deepMapAndAwaitAll, DeepMapAsyncResult, DeepMapResult, deepZip, zipToList} from '../util/deep_map';\nimport {GrowingRingBuffer} from '../util/growing_ring_buffer';\nimport {RingBuffer} from '../util/ring_buffer';\n\n/**\n * A nested structure of LazyIterators, used as the input to zip().\n */\nexport type IteratorContainer = Container<LazyIterator<tf.TensorContainer>>;\n\n// Here we implement a simple asynchronous iterator.\n// This lets us avoid using either third-party stream libraries or\n// recent TypeScript language support requiring polyfills.\n\n/**\n * Create a `LazyIterator` from an array of items.\n */\nexport function iteratorFromItems<T>(items: T[]): LazyIterator<T> {\n  return new ArrayIterator(items);\n}\n\n/**\n * Create a `LazyIterator` of incrementing integers.\n */\nexport function iteratorFromIncrementing(start: number): LazyIterator<number> {\n  let i = start;\n  return iteratorFromFunction(() => ({value: i++, done: false}));\n}\n\n/**\n * Create a `LazyIterator` from a function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * await iter.forEachAsync(e => console.log(e));\n * ```\n *\n * @param func A function that produces data on each call.\n */\nexport function iteratorFromFunction<T>(\n    func: () =>\n        IteratorResult<T>| Promise<IteratorResult<T>>): LazyIterator<T> {\n  return new FunctionCallIterator(func);\n}\n\n/**\n * Create a `LazyIterator` by concatenating underlying streams, which are\n * themselves provided as a stream.\n *\n * This can also be thought of as a \"stream flatten\" operation.\n *\n * @param baseIterators A stream of streams to be concatenated.\n * @param baseErrorHandler An optional function that can intercept `Error`s\n *   raised during a `next()` call on the base stream.  This function can decide\n *   whether the error should be propagated, whether the error should be\n *   ignored, or whether the base stream should be terminated.\n */\nexport function iteratorFromConcatenated<T>(\n    baseIterators: LazyIterator<LazyIterator<T>>,\n    baseErrorHandler?: (e: Error) => boolean): LazyIterator<T> {\n  return new ChainedIterator(baseIterators, baseErrorHandler);\n}\n\n/**\n * Create a `LazyIterator` by concatenating streams produced by calling a\n * stream-generating function a given number of times.\n *\n * Since a `LazyIterator` is read-once, it cannot be repeated, but this\n * function can be used to achieve a similar effect:\n *\n *   LazyIterator.ofConcatenatedFunction(() => new MyIterator(), 6);\n *\n * @param iteratorFunc: A function that produces a new stream on each call.\n * @param count: The number of times to call the function.\n * @param baseErrorHandler An optional function that can intercept `Error`s\n *   raised during a `next()` call on the base stream.  This function can decide\n *   whether the error should be propagated, whether the error should be\n *   ignored, or whether the base stream should be terminated.\n */\nexport function iteratorFromConcatenatedFunction<T>(\n    iteratorFunc: () => IteratorResult<LazyIterator<T>>, count: number,\n    baseErrorHandler?: (e: Error) => boolean): LazyIterator<T> {\n  return iteratorFromConcatenated(\n      iteratorFromFunction(iteratorFunc).take(count), baseErrorHandler);\n}\n\n/**\n * Create a `LazyIterator` by zipping together an array, dict, or nested\n * structure of `LazyIterator`s (and perhaps additional constants).\n *\n * The underlying streams must provide elements in a consistent order such\n * that they correspond.\n *\n * Typically, the underlying streams should have the same number of\n * elements. If they do not, the behavior is determined by the\n * `mismatchMode` argument.\n *\n * The nested structure of the `iterators` argument determines the\n * structure of elements in the resulting iterator.\n *\n * @param iterators: An array or object containing LazyIterators at the\n * leaves.\n * @param mismatchMode: Determines what to do when one underlying iterator\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\n * causes the zipped iterator to terminate with the furst underlying\n * streams, so elements remaining on the longer streams are ignored.\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\n * in nulls for the exhausted streams, until all streams are exhausted.\n */\nexport function iteratorFromZipped<O extends tf.TensorContainer>(\n    iterators: IteratorContainer,\n    mismatchMode: ZipMismatchMode = ZipMismatchMode.FAIL): LazyIterator<O> {\n  return new ZipIterator<O>(iterators, mismatchMode);\n}\n\n/**\n * An asynchronous iterator, providing lazy access to a potentially\n * unbounded stream of elements.\n *\n * Iterator can be obtained from a dataset:\n * `const iter = await dataset.iterator();`\n */\nexport abstract class LazyIterator<T> {\n  // This class implements AsyncIterator<T>, but we have not yet set the\n  // TypeScript --downlevelIteration flag to enable that.\n\n  abstract summary(): string;\n\n  /**\n   * Returns a `Promise` for the next element in the stream.\n   *\n   * When an item can be provided successfully, the return value is\n   * `{value:T, done:false}`.\n   *\n   * Calling next() on a closed stream returns `{value:null, done:true}`.\n   */\n  abstract next(): Promise<IteratorResult<T>>;\n\n  /**\n   * Collect all remaining elements of a bounded stream into an array.\n   * Obviously this will succeed only for small streams that fit in memory.\n   * Useful for testing.\n   *\n   * @returns A Promise for an array of stream elements, which will resolve\n   *   when the stream is exhausted.\n   */\n  async toArray(): Promise<T[]> {\n    const result: T[] = [];\n    let x = await this.next();\n    while (!x.done) {\n      result.push(x.value);\n      x = await this.next();\n    }\n    return result;\n  }\n\n  /**\n   * Collect all elements of this dataset into an array with prefetching 100\n   * elements. This is useful for testing, because the prefetch changes the\n   * order in which the Promises are resolved along the processing pipeline.\n   * This may help expose bugs where results are dependent on the order of\n   * Promise resolution rather than on the logical order of the stream (i.e.,\n   * due to hidden mutable state).\n   *\n   * @returns A Promise for an array of stream elements, which will resolve\n   *   when the stream is exhausted.\n   */\n  async toArrayForTest(): Promise<T[]> {\n    const stream = this.prefetch(100);\n    const result: T[] = [];\n    let x = await stream.next();\n    while (!x.done) {\n      result.push(x.value);\n      x = await stream.next();\n    }\n    return result;\n  }\n\n  /**\n   * Draw items from the stream until it is exhausted.\n   *\n   * This can be useful when the stream has side effects but no output.  In\n   * that case, calling this function guarantees that the stream will be\n   * fully processed.\n   */\n  async resolveFully(): Promise<void> {\n    let x = await this.next();\n    while (!x.done) {\n      x = await this.next();\n    }\n  }\n\n  /**\n   * Draw items from the stream until it is exhausted, or a predicate fails.\n   *\n   * This can be useful when the stream has side effects but no output.  In\n   * that case, calling this function guarantees that the stream will be\n   * fully processed.\n   */\n  async resolveWhile(predicate: (r: T) => boolean): Promise<void> {\n    let x = await this.next();\n    let shouldContinue = predicate(x.value);\n    while ((!x.done) && shouldContinue) {\n      x = await this.next();\n      shouldContinue = predicate(x.value);\n    }\n  }\n\n  /**\n   * Handles errors thrown on this stream using a provided handler function.\n   *\n   * @param handler A function that handles any `Error` thrown during a `next()`\n   *   call and returns true if the stream should continue (dropping the failed\n   *   call) or false if the stream should quietly terminate.  If the handler\n   *   itself throws (or rethrows) an `Error`, that will be propagated.\n   *\n   * @returns A `LazyIterator` of elements passed through from upstream,\n   *   possibly filtering or terminating on upstream `next()` calls that\n   *   throw an `Error`.\n   */\n  handleErrors(handler: (error: Error) => boolean): LazyIterator<T> {\n    return new ErrorHandlingLazyIterator(this, handler);\n  }\n\n  // TODO(soergel): Implement reduce() etc.\n\n  /**\n   * Filters this stream according to `predicate`.\n   *\n   * @param predicate A function mapping a stream element to a boolean or a\n   * `Promise` for one.\n   *\n   * @returns A `LazyIterator` of elements for which the predicate was true.\n   */\n  filter(predicate: (value: T) => boolean): LazyIterator<T> {\n    return new FilterIterator(this, predicate);\n  }\n\n  /**\n   * Maps this stream through a 1-to-1 transform.\n   *\n   * @param transform A function mapping a stream element to a transformed\n   *   element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  map<O>(transform: (value: T) => O): LazyIterator<O> {\n    return new MapIterator(this, transform);\n  }\n\n  /**\n   * Maps this stream through an async 1-to-1 transform.\n   *\n   * @param transform A function mapping a stream element to a `Promise` for a\n   *   transformed stream element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  mapAsync<O>(transform: (value: T) => Promise<O>): LazyIterator<O> {\n    return new AsyncMapIterator(this, transform);\n  }\n\n  /**\n   * Maps this stream through a 1-to-1 transform, forcing serial execution.\n   *\n   * @param transform A function mapping a stream element to a transformed\n   *   element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  serialMapAsync<O>(transform: (value: T) => Promise<O>): LazyIterator<O> {\n    return new AsyncMapIterator(this, transform).serial();\n  }\n\n  /**\n   * Maps this stream through a 1-to-many transform.\n   *\n   * @param transform A function mapping a stream element to an array of\n   *   transformed elements.\n   *\n   * @returns A `DataStream` of transformed elements.\n   */\n  flatmap<O>(transform: (value: T) => O[]): LazyIterator<O> {\n    return new FlatmapIterator(this, transform);\n  }\n\n  /**\n   * Apply a function to every element of the stream.\n   *\n   * @param f A function to apply to each stream element.\n   */\n  async forEachAsync(f: (value: T) => void): Promise<void> {\n    return this.map(f).resolveFully();\n  }\n\n  /**\n   * Apply a function to every element of the stream, forcing serial execution.\n   *\n   * @param f A function to apply to each stream element.  Should return 'true'\n   *   to indicate that the stream should continue, or 'false' to cause it to\n   *   terminate.\n   */\n  async serialForEach(f: (value: T) => Promise<boolean>): Promise<void> {\n    return this.serialMapAsync(f).resolveWhile(x => (x === true));\n  }\n\n  /**\n   * Groups elements into batches, represented as arrays of elements.\n   *\n   * We can think of the elements of this iterator as 'rows' (even if they are\n   * nested structures).  By the same token, consecutive values for a given\n   * key within the elements form a 'column'.  This matches the usual sense of\n   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\n   *\n   * Thus, \"Row-major\" means that the resulting batch is simply a collection of\n   * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major\n   * form, which is needed for vectorized computation.\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `LazyIterator` of batches of elements, represented as arrays\n   *   of the original element type.\n   */\n  rowMajorBatch(batchSize: number, smallLastBatch = true): LazyIterator<T[]> {\n    return new RowMajorBatchIterator(this, batchSize, smallLastBatch);\n  }\n\n  /**\n   * Groups elements into batches, represented in column-major form.\n   *\n   * We can think of the elements of this iterator as 'rows' (even if they are\n   * nested structures).  By the same token, consecutive values for a given\n   * key within the elements form a 'column'.  This matches the usual sense of\n   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\n   *\n   * Thus, \"column-major\" means that the resulting batch is a (potentially\n   * nested) structure representing the columns.  Each column entry, then,\n   * contains a collection of the values found in that column for a range of\n   * input elements.  This representation allows for vectorized computation, in\n   * contrast to the row-major form.\n   *\n   * The inputs should all have the same nested structure (i.e., of arrays and\n   * dicts).  The result is a single object with the same nested structure,\n   * where the leaves are arrays collecting the values of the inputs at that\n   * location (or, optionally, the result of a custom function applied to those\n   * arrays).\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @param zipFn: (optional) A function that expects an array of elements at a\n   *   single node of the object tree, and returns a `DeepMapResult`.  The\n   *   `DeepMapResult` either provides a result value for that node (i.e.,\n   *   representing the subtree), or indicates that the node should be processed\n   *   recursively.  The default zipFn recurses as far as possible and places\n   *   arrays at the leaves.\n   * @returns A `LazyIterator` of batches of elements, represented as an object\n   *   with collections at the leaves.\n   */\n  columnMajorBatch(\n      batchSize: number, smallLastBatch = true,\n      // tslint:disable-next-line:no-any\n      zipFn: (xs: any[]) => DeepMapResult = zipToList):\n      LazyIterator<tf.TensorContainer> {\n    // First collect the desired number of input elements as a row-major batch.\n    const rowBatches = this.rowMajorBatch(batchSize, smallLastBatch);\n    // Now 'rotate' or 'pivot' the data, collecting all values from each column\n    // in the batch (i.e., for each key within the elements) into an array.\n    return rowBatches.map(x => deepZip(x, zipFn));\n  }\n\n  /**\n   * Concatenate this `LazyIterator` with another.\n   *\n   * @param iterator A `LazyIterator` to be concatenated onto this one.\n   * @param baseErrorHandler An optional function that can intercept `Error`s\n   *   raised during a `next()` call on the base stream.  This function can\n   *   decide whether the error should be propagated, whether the error should\n   *   be ignored, or whether the base stream should be terminated.\n   * @returns A `LazyIterator`.\n   */\n  concatenate(\n      iterator: LazyIterator<T>,\n      baseErrorHandler?: (e: Error) => boolean): LazyIterator<T> {\n    return new ChainedIterator(\n        iteratorFromItems([this, iterator]), baseErrorHandler);\n  }\n\n  /**\n   * Limits this stream to return at most `count` items.\n   *\n   * @param count The maximum number of items to provide from the stream. If\n   * a negative or undefined value is given, the entire stream is returned\n   *   unaltered.\n   */\n  take(count: number): LazyIterator<T> {\n    if (count < 0 || count == null) {\n      return this;\n    }\n    return new TakeIterator(this, count);\n  }\n\n  /**\n   * Skips the first `count` items in this stream.\n   *\n   * @param count The number of items to skip.  If a negative or undefined\n   * value is given, the entire stream is returned unaltered.\n   */\n  skip(count: number): LazyIterator<T> {\n    if (count < 0 || count == null) {\n      return this;\n    }\n    return new SkipIterator(this, count);\n  }\n\n  /**\n   * Prefetch the first `bufferSize` items in this stream.\n   *\n   * Note this prefetches Promises, but makes no guarantees about when those\n   * Promises resolve.\n   *\n   * @param bufferSize: An integer specifying the number of elements to be\n   *   prefetched.\n   */\n  prefetch(bufferSize: number): LazyIterator<T> {\n    return new PrefetchIterator(this, bufferSize);\n  }\n\n  // TODO(soergel): deep sharded shuffle, where supported\n\n  /**\n   * Randomly shuffles the elements of this stream.\n   *\n   * @param bufferSize: An integer specifying the number of elements from\n   * this stream from which the new stream will sample.\n   * @param seed: (Optional.) An integer specifying the random seed that\n   * will be used to create the distribution.\n   */\n  shuffle(windowSize: number, seed?: string): LazyIterator<T> {\n    return new ShuffleIterator(this, windowSize, seed);\n  }\n\n  /**\n   * Force an iterator to execute serially: each next() call will await the\n   * prior one, so that they cannot execute concurrently.\n   */\n  serial(): LazyIterator<T> {\n    return new SerialIterator(this);\n  }\n}\n\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on LazyIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n\n// Iterators that just extend LazyIterator directly\n// ============================================================================\n\nclass ArrayIterator<T> extends LazyIterator<T> {\n  private trav = 0;\n  constructor(protected items: T[]) {\n    super();\n  }\n\n  summary() {\n    return `Array of ${this.items.length} items`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    if (this.trav >= this.items.length) {\n      return {value: null, done: true};\n    }\n    const item = this.items[this.trav];\n    this.trav++;\n    return {value: deepClone(item), done: false};\n  }\n}\n\nclass FunctionCallIterator<T> extends LazyIterator<T> {\n  constructor(\n      protected nextFn: () => IteratorResult<T>| Promise<IteratorResult<T>>) {\n    super();\n  }\n\n  summary() {\n    return `Function call`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    try {\n      return this.nextFn();\n    } catch (e) {\n      // Modify the error message but leave the stack trace intact\n      e.message =\n          `Error thrown while iterating through a dataset: ${e.message}`;\n      throw e;\n    }\n  }\n}\n\nclass SerialIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  constructor(protected upstream: LazyIterator<T>) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Serial`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T>> {\n    return this.upstream.next();\n  }\n}\n\nclass SkipIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  count = 0;\n\n  constructor(protected upstream: LazyIterator<T>, protected maxCount: number) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Skip`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T>> {\n    // TODO(soergel): consider tradeoffs of reading in parallel, eg.\n    // collecting next() promises in an Array and then waiting for\n    // Promise.all() of those. Benefit: pseudo-parallel execution.  Drawback:\n    // maybe delayed GC.\n    while (this.count++ < this.maxCount) {\n      const skipped = await this.upstream.next();\n      // short-circuit if upstream is already empty\n      if (skipped.done) {\n        return skipped;\n      }\n      tf.dispose(skipped.value as {});\n    }\n    return this.upstream.next();\n  }\n}\n\nclass TakeIterator<T> extends LazyIterator<T> {\n  count = 0;\n  constructor(protected upstream: LazyIterator<T>, protected maxCount: number) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Take`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    if (this.count++ >= this.maxCount) {\n      return {value: null, done: true};\n    }\n    return this.upstream.next();\n  }\n}\n\n// Note this batch just groups items into row-wise element arrays.\n// Rotating these to a column-wise representation happens only at the dataset\n// level.\nclass RowMajorBatchIterator<T> extends LazyIterator<T[]> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T[]>>;\n\n  constructor(\n      protected upstream: LazyIterator<T>, protected batchSize: number,\n      protected enableSmallLastBatch = true) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> RowMajorBatch`;\n  }\n\n  async next(): Promise<IteratorResult<T[]>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T[]>> {\n    const batch: T[] = [];\n    while (batch.length < this.batchSize) {\n      const item = await this.upstream.next();\n      if (item.done) {\n        if (this.enableSmallLastBatch && batch.length > 0) {\n          return {value: batch, done: false};\n        }\n        return {value: null, done: true};\n      }\n      batch.push(item.value);\n    }\n    return {value: batch, done: false};\n  }\n}\n\nclass FilterIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  constructor(\n      protected upstream: LazyIterator<T>,\n      protected predicate: (value: T) => boolean) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Filter`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T>> {\n    while (true) {\n      const item = await this.upstream.next();\n      if (item.done || this.predicate(item.value)) {\n        return item;\n      }\n      tf.dispose(item.value as {});\n    }\n  }\n}\n\nclass MapIterator<I, O> extends LazyIterator<O> {\n  constructor(\n      protected upstream: LazyIterator<I>,\n      protected transform: (value: I) => O) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Map`;\n  }\n\n  async next(): Promise<IteratorResult<O>> {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return {value: null, done: true};\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value as {});\n    // Careful: the transform may mutate the item in place.\n    // That's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying\n    // any intermediate Tensors.  Here we are concerned only about the\n    // inputs.\n    const mapped = this.transform(item.value);\n    const outputTensors = tf.tensor_util.getTensorsInContainer(mapped as {});\n\n    // TODO(soergel) faster intersection\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return {value: mapped, done: false};\n  }\n}\n\nclass ErrorHandlingLazyIterator<T> extends LazyIterator<T> {\n  count = 0;\n  constructor(\n      protected upstream: LazyIterator<T>,\n      protected handler: (error: Error) => boolean) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> handleErrors`;\n  }\n\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  async serialNext(): Promise<IteratorResult<T>> {\n    while (true) {\n      try {\n        return await this.upstream.next();\n      } catch (e) {\n        if (!this.handler(e)) {\n          return {value: null, done: true};\n        }\n        // If the handler returns true, loop and fetch the next upstream item.\n\n        // If the upstream iterator throws an endless stream of errors, and if\n        // the handler says to ignore them, then we loop forever here.  That is\n        // the correct behavior-- it's up to the handler to decide when to stop.\n      }\n    }\n  }\n}\n\nclass AsyncMapIterator<I, O> extends LazyIterator<O> {\n  constructor(\n      protected upstream: LazyIterator<I>,\n      protected transform: (value: I) => Promise<O>) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> AsyncMap`;\n  }\n\n  async next(): Promise<IteratorResult<O>> {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return {value: null, done: true};\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value as {});\n    // Careful: the transform may mutate the item in place.\n    // That's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying\n    // any intermediate Tensors.  Here we are concerned only about the\n    // inputs.\n    const mapped = await this.transform(item.value);\n    const outputTensors = tf.tensor_util.getTensorsInContainer(mapped as {});\n\n    // TODO(soergel) faster intersection\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return {value: mapped, done: false};\n  }\n}\n\n// Iterators that maintain a queue of pending items\n// ============================================================================\n\n/**\n * A base class for transforming streams that operate by maintaining an\n * output queue of elements that are ready to return via next().  This is\n * commonly required when the transformation is 1-to-many:  A call to next()\n * may trigger a call to the underlying stream, which will produce many\n * mapped elements of this stream-- of which we need to return only one, so\n * we have to queue the rest.\n */\nexport abstract class OneToManyIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  protected outputQueue: RingBuffer<T>;\n\n  constructor() {\n    super();\n    this.outputQueue = new GrowingRingBuffer<T>();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  /**\n   * Read one or more chunks from upstream and process them, possibly\n   * reading or writing a carryover, and adding processed items to the\n   * output queue.  Note it's possible that no items are added to the queue\n   * on a given pump() call, even if the upstream stream is not closed\n   * (e.g., because items are filtered).\n   *\n   * @return `true` if any action was taken, i.e. fetching items from the\n   *   upstream source OR adding items to the output queue.  `false` if the\n   *   upstream source is exhausted AND nothing was added to the queue\n   * (i.e., any remaining carryover).\n   */\n  protected abstract pump(): Promise<boolean>;\n\n  async serialNext(): Promise<IteratorResult<T>> {\n    // Fetch so that the queue contains at least one item if possible.\n    // If the upstream source is exhausted, AND there are no items left in\n    // the output queue, then this stream is also exhausted.\n    while (this.outputQueue.length() === 0) {\n      // TODO(soergel): consider parallel reads.\n      if (!await this.pump()) {\n        return {value: null, done: true};\n      }\n    }\n    return {value: this.outputQueue.shift(), done: false};\n  }\n}\nclass FlatmapIterator<I, O> extends OneToManyIterator<O> {\n  constructor(\n      protected upstream: LazyIterator<I>,\n      protected transform: (value: I) => O[]) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Flatmap`;\n  }\n\n  async pump(): Promise<boolean> {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return false;\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value as {});\n    // Careful: the transform may mutate the item in place.\n    // that's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying any\n    // intermediate Tensors.  Here we are concerned only about the inputs.\n    const mappedArray = this.transform(item.value);\n    const outputTensors =\n        tf.tensor_util.getTensorsInContainer(mappedArray as {});\n    this.outputQueue.pushAll(mappedArray);\n\n    // TODO(soergel) faster intersection, and deduplicate outputTensors\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n\n    return true;\n  }\n}\n\n/**\n * Provides a `LazyIterator` that concatenates a stream of underlying\n * streams.\n *\n * Doing this in a concurrency-safe way requires some trickery.  In\n * particular, we want this stream to return the elements from the\n * underlying streams in the correct order according to when next() was\n * called, even if the resulting Promises resolve in a different order.\n */\nexport class ChainedIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>> = null;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  private iterator: LazyIterator<T> = null;\n  private moreIterators: LazyIterator<LazyIterator<T>>;\n\n  constructor(\n      iterators: LazyIterator<LazyIterator<T>>,\n      private readonly baseErrorHandler?: (e: Error) => boolean) {\n    super();\n    this.moreIterators = iterators;\n  }\n\n  summary() {\n    const upstreamSummaries = 'TODO: fill in upstream of chained summaries';\n    return `${upstreamSummaries} -> Chained`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    this.lastRead = this.readFromChain(this.lastRead);\n    return this.lastRead;\n  }\n\n  private async readFromChain(lastRead: Promise<IteratorResult<T>>):\n      Promise<IteratorResult<T>> {\n    // Must await on the previous read since the previous read may have advanced\n    // the stream of streams, from which we need to read.\n    // This is unfortunate since we can't parallelize reads. Which means\n    // prefetching of chained streams is a no-op.\n    // One solution is to prefetch immediately upstream of this.\n    await lastRead;\n    if (this.iterator == null) {\n      const iteratorResult = await this.moreIterators.next();\n      if (iteratorResult.done) {\n        // No more streams to stream from.\n        return {value: null, done: true};\n      }\n      this.iterator = iteratorResult.value;\n      if (this.baseErrorHandler != null) {\n        this.iterator = this.iterator.handleErrors(this.baseErrorHandler);\n      }\n    }\n    const itemResult = await this.iterator.next();\n    if (itemResult.done) {\n      this.iterator = null;\n      return this.readFromChain(lastRead);\n    }\n    return itemResult;\n  }\n}\n\nexport enum ZipMismatchMode {\n  FAIL,      // require zipped streams to have the same length\n  SHORTEST,  // terminate zip when the first stream is exhausted\n  LONGEST    // use nulls for exhausted streams; use up the longest stream.\n}\n\n/**\n * Provides a `LazyIterator` that zips together an array, dict, or nested\n * structure of `LazyIterator`s (and perhaps additional constants).\n *\n * The underlying streams must provide elements in a consistent order such\n * that they correspond.\n *\n * Typically, the underlying streams should have the same number of\n * elements. If they do not, the behavior is determined by the\n * `mismatchMode` argument.\n *\n * The nested structure of the `iterators` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Doing this in a concurrency-safe way requires some trickery.  In\n * particular, we want this stream to return the elements from the\n * underlying streams in the correct order according to when next() was\n * called, even if the resulting Promises resolve in a different order.\n *\n * @param iterators: An array or object containing LazyIterators at the\n * leaves.\n * @param mismatchMode: Determines what to do when one underlying iterator\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\n * causes the zipped iterator to terminate with the furst underlying\n * streams, so elements remaining on the longer streams are ignored.\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\n * in nulls for the exhausted streams, until all streams are exhausted.\n */\nclass ZipIterator<O extends tf.TensorContainer> extends LazyIterator<O> {\n  private count = 0;\n  private currentPromise: Promise<IteratorResult<O>> = null;\n\n  constructor(\n      protected readonly iterators: IteratorContainer,\n      protected readonly mismatchMode: ZipMismatchMode = ZipMismatchMode.FAIL) {\n    super();\n  }\n\n  summary() {\n    const upstreamSummaries = 'TODO: fill in upstream of zip summaries';\n    return `{${upstreamSummaries}} -> Zip`;\n  }\n\n  private async nextState(afterState: Promise<IteratorResult<O>>):\n      Promise<IteratorResult<O>> {\n    // This chaining ensures that the underlying next() are not even called\n    // before the previous ones have resolved.\n    await afterState;\n\n    // Collect underlying iterator \"done\" signals as a side effect in\n    // getNext()\n    let numIterators = 0;\n    let iteratorsDone = 0;\n\n    function getNext(container: IteratorContainer): DeepMapAsyncResult {\n      if (container instanceof LazyIterator) {\n        const result = container.next();\n        return {\n          value: result.then(x => {\n            numIterators++;\n            if (x.done) {\n              iteratorsDone++;\n            }\n            return x.value;\n          }),\n          recurse: false\n        };\n      } else {\n        return {value: null, recurse: true};\n      }\n    }\n\n    const mapped: O = await deepMapAndAwaitAll(this.iterators, getNext);\n\n    if (numIterators === iteratorsDone) {\n      // The streams have all ended.\n      return {value: null, done: true};\n    }\n    if (iteratorsDone > 0) {\n      switch (this.mismatchMode) {\n        case ZipMismatchMode.FAIL:\n          throw new Error(\n              'Zipped streams should have the same length. ' +\n              `Mismatched at element ${this.count}.`);\n        case ZipMismatchMode.SHORTEST:\n          return {value: null, done: true};\n        case ZipMismatchMode.LONGEST:\n        default:\n          // Continue.  The exhausted streams already produced value: null.\n      }\n    }\n\n    this.count++;\n    return {value: mapped, done: false};\n  }\n\n  async next(): Promise<IteratorResult<O>> {\n    this.currentPromise = this.nextState(this.currentPromise);\n    return this.currentPromise;\n  }\n}\n\n// Iterators that maintain a ring buffer of pending promises\n// ============================================================================\n\n/**\n * A stream that prefetches a given number of items from an upstream source,\n * returning them in FIFO order.\n *\n * Note this prefetches Promises, but makes no guarantees about when those\n * Promises resolve.\n */\nexport class PrefetchIterator<T> extends LazyIterator<T> {\n  protected buffer: RingBuffer<Promise<IteratorResult<T>>>;\n\n  constructor(\n      protected upstream: LazyIterator<T>, protected bufferSize: number) {\n    super();\n    this.buffer = new RingBuffer<Promise<IteratorResult<T>>>(bufferSize);\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Prefetch`;\n  }\n\n  /**\n   * Refill the prefetch buffer.  Returns only after the buffer is full, or\n   * the upstream source is exhausted.\n   */\n  protected refill() {\n    while (!this.buffer.isFull()) {\n      const v = this.upstream.next();\n      this.buffer.push(v);\n    }\n  }\n\n  next(): Promise<IteratorResult<T>> {\n    this.refill();\n    // This shift will never throw an error because the buffer is always\n    // full after a refill. If the stream is exhausted, the buffer will be\n    // full of Promises that will resolve to the end-of-stream signal.\n    return this.buffer.shift();\n  }\n}\n\n/**\n * A stream that performs a sliding-window random shuffle on an upstream\n * source. This is like a `PrefetchIterator` except that the items are\n * returned in randomized order.  Mixing naturally improves as the buffer\n * size increases.\n */\nexport class ShuffleIterator<T> extends PrefetchIterator<T> {\n  private readonly random: seedrandom.prng;\n\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  private upstreamExhausted = false;\n\n  constructor(\n    protected override upstream: LazyIterator<T>, protected windowSize: number,\n      seed?: string) {\n    super(upstream, windowSize);\n    this.random = seedrandom.alea(seed || tf.util.now().toString());\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  override async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private randomInt(max: number) {\n    return Math.floor(this.random() * max);\n  }\n\n  protected chooseIndex(): number {\n    return this.randomInt(this.buffer.length());\n  }\n\n  async serialNext(): Promise<IteratorResult<T>> {\n    // TODO(soergel): consider performance\n    if (!this.upstreamExhausted) {\n      this.refill();\n    }\n    while (!this.buffer.isEmpty()) {\n      const chosenIndex = this.chooseIndex();\n      const result = await this.buffer.shuffleExcise(chosenIndex);\n      if (result.done) {\n        this.upstreamExhausted = true;\n      } else {\n        this.refill();\n        return result;\n      }\n    }\n    return {value: null, done: true};\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {TensorContainer, TensorLike} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {iteratorFromConcatenated, iteratorFromFunction, iteratorFromItems, iteratorFromZipped, LazyIterator, ZipMismatchMode} from './iterators/lazy_iterator';\nimport {Container} from './types';\nimport {canTensorify, deepMapAndAwaitAll, DeepMapResult, isIterable} from './util/deep_map';\n\n/**\n * A nested structure of Datasets, used as the input to zip().\n */\nexport type DatasetContainer = Container<Dataset<TensorContainer>>;\n\n// TODO(soergel): consider vectorized operations within the pipeline.\n\n/**\n * Represents a potentially large list of independent data elements (typically\n * 'samples' or 'examples').\n *\n * A 'data example' may be a primitive, an array, a map from string keys to\n * values, or any nested structure of these.\n *\n * A `Dataset` represents an ordered collection of elements, together with a\n * chain of transformations to be performed on those elements. Each\n * transformation is a method of `Dataset` that returns another `Dataset`, so\n * these may be chained, e.g.\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\n *\n * Data loading and transformation is done in a lazy, streaming fashion.  The\n * dataset may be iterated over multiple times; each iteration starts the data\n * loading anew and recapitulates the transformations.\n *\n * A `Dataset` is typically processed as a stream of unbatched examples -- i.e.,\n * its transformations are applied one example at a time. Batching produces a\n * new `Dataset` where each element is a batch. Batching should usually come\n * last in a pipeline, because data transformations are easier to express on a\n * per-example basis than on a per-batch basis.\n *\n * The following code examples are calling `await dataset.forEachAsync(...)` to\n * iterate once over the entire dataset in order to print out the data.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport abstract class Dataset<T extends tf.TensorContainer> {\n  /*\n   * Provide a new stream of elements.  Note this will also start new streams\n   * from any underlying `Dataset`s.\n   *\n   * CAUTION: Any Tensors contained within the elements returned from\n   * this stream *must* be manually disposed to avoid a GPU memory leak.\n   * The tf.tidy() approach cannot be used in an asynchronous context.\n   */\n  abstract iterator(): Promise<LazyIterator<T>>;\n\n  readonly size: number = null;\n\n  // TODO(soergel): Make Datasets report whether repeated iterator() calls\n  // produce the same result (e.g., reading from a file) or different results\n  // (e.g., from the webcam).  Currently we don't make this distinction but it\n  // could be important for the user to know.\n  // abstract isDeterministic(): boolean;\n\n  /**\n   * Groups elements into batches.\n   *\n   * It is assumed that each of the incoming dataset elements has the same\n   * structure -- i.e. the same set of keys at each location in an object\n   * hierarchy.  For each key, the resulting `Dataset` provides a batched\n   * element collecting all of the incoming values for that key.\n   *\n   *  * Incoming primitives are grouped into a 1-D Tensor.\n   *  * Incoming Tensors are grouped into a new Tensor where the 0th axis is\n   *    the batch dimension.\n   *  * Incoming arrays are converted to Tensor and then batched.\n   *  * A nested array is interpreted as an n-D Tensor, so the batched result\n   *    has n+1 dimensions.\n   *  * An array that cannot be converted to Tensor produces an error.\n   *\n   * If an array should not be batched as a unit, it should first be converted\n   * to an object with integer keys.\n   *\n   * Here are a few examples:\n   *\n   * Batch a dataset of numbers:\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\n   * await a.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of arrays:\n   * ```js\n   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\n   * await b.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of objects:\n   * ```js\n   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\n   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\n   *   {a: 8, b: 18}]).batch(4);\n   * await c.forEachAsync(e => {\n   *   console.log('{');\n   *   for(var key in e) {\n   *     console.log(key+':');\n   *     e[key].print();\n   *   }\n   *   console.log('}');\n   * })\n   * ```\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `Dataset`, from which a stream of batches can be obtained.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  batch(batchSize: number, smallLastBatch = true): Dataset<tf.TensorContainer> {\n    const base = this;\n    tf.util.assert(\n        batchSize > 0, () => `batchSize needs to be positive, but it is\n      ${batchSize}`);\n    let size;\n    if (this.size === Infinity || this.size == null) {\n      // If the size of this dataset is infinity or null, the new size keeps the\n      // same.\n      size = this.size;\n    } else if (smallLastBatch) {\n      // If the size of this dataset is known and include small last batch, the\n      // new size is full batch count plus last batch.\n      size = Math.ceil(this.size / batchSize);\n    } else {\n      // If the size of this dataset is known and not include small last batch,\n      // the new size is full batch count.\n      size = Math.floor(this.size / batchSize);\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator())\n          .columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);\n    }, size);\n  }\n\n  /**\n   * Concatenates this `Dataset` with another.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]);\n   * const b = tf.data.array([4, 5, 6]);\n   * const c = a.concatenate(b);\n   * await c.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param dataset A `Dataset` to be concatenated onto this one.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  concatenate(dataset: Dataset<T>): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size === Infinity || dataset.size === Infinity) {\n      // If the size of any of these two dataset is infinity, new size is\n      // infinity.\n      size = Infinity;\n    } else if (this.size != null && dataset.size != null) {\n      // If the size of both datasets are known and not infinity, new size is\n      // sum the size of these two datasets.\n      size = this.size + dataset.size;\n    } else {\n      // If neither of these two datasets has infinite size and any of these two\n      // datasets' size is null, the new size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () =>\n            (await base.iterator()).concatenate(await dataset.iterator()),\n        size);\n  }\n\n  /**\n   * Filters this dataset according to `predicate`.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n   *   .filter(x => x%2 === 0);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param predicate A function mapping a dataset element to a boolean or a\n   * `Promise` for one.\n   *\n   * @returns A `Dataset` of elements for which the predicate was true.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  filter(predicate: (value: T) => boolean): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size === Infinity) {\n      // If the size of this dataset is infinity, new size is infinity\n      size = Infinity;\n    } else {\n      // If this dataset has limited elements, new size is null because it might\n      // exhausted randomly.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).filter(x => tf.tidy(() => predicate(x)));\n    }, size);\n  }\n\n  /**\n   * Apply a function to every element of the dataset.\n   *\n   * After the function is applied to a dataset element, any Tensors contained\n   * within that element are disposed.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param f A function to apply to each dataset element.\n   * @returns A `Promise` that resolves after all elements have been processed.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  async forEachAsync(f: (input: T) => void): Promise<void> {\n    return (await this.iterator()).forEachAsync(f);\n  }\n\n  /**\n   * Maps this dataset through a 1-to-1 transform.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]).map(x => x*x);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param transform A function mapping a dataset element to a transformed\n   *   dataset element.\n   *\n   * @returns A `Dataset` of transformed elements.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  map<O extends tf.TensorContainer>(transform: (value: T) => O): Dataset<O> {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).map(x => tf.tidy(() => transform(x)));\n    }, this.size);\n  }\n\n  /**\n   * Maps this dataset through an async 1-to-1 transform.\n   *\n   * ```js\n   * const a =\n   *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\n   *    setTimeout(() => {\n   *      resolve(x * x);\n   *    }, Math.random()*1000 + 500);\n   *  }));\n   * console.log(await a.toArray());\n   * ```\n   *\n   * @param transform A function mapping a dataset element to a `Promise` for a\n   *   transformed dataset element.  This transform is responsible for disposing\n   *   any intermediate `Tensor`s, i.e. by wrapping its computation in\n   *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\n   *   `map()` case).\n   *\n   * @returns A `Dataset` of transformed elements.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  mapAsync<O extends tf.TensorContainer>(transform: (value: T) => Promise<O>):\n      Dataset<O> {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).mapAsync(transform);\n    }, this.size);\n  }\n\n  /**\n   *  Creates a `Dataset` that prefetches elements from this dataset.\n   *\n   * @param bufferSize: An integer specifying the number of elements to be\n   *   prefetched.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  prefetch(bufferSize: number): Dataset<T> {\n    if (bufferSize == null) {\n      throw new RangeError(\n          '`Dataset.prefetch()` requires bufferSize to be specified.');\n    }\n\n    const base = this;\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).prefetch(bufferSize), this.size);\n  }\n\n  /**\n   * Repeats this dataset `count` times.\n   *\n   * NOTE: If this dataset is a function of global state (e.g. a random number\n   * generator), then different repetitions may produce different elements.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]).repeat(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: (Optional) An integer, representing the number of times\n   *   the dataset should be repeated. The default behavior (if `count` is\n   *   `undefined` or negative) is for the dataset be repeated indefinitely.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  repeat(count?: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && count > 0) {\n      // If this dataset has size and count is positive, new size is current\n      // size multiply count. This also covers the case that current size is\n      // infinity.\n      size = this.size * count;\n    } else if (count === 0) {\n      // If count is 0, new size is 0.\n      size = 0;\n    } else if (this.size != null && (count === undefined || count < 0)) {\n      // If this dataset has size and count is undefined or negative, the\n      // dataset will be repeated indefinitely and new size is infinity.\n      size = Infinity;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      const iteratorIterator = iteratorFromFunction(\n          async () => ({value: await base.iterator(), done: false}));\n      return iteratorFromConcatenated(iteratorIterator.take(count));\n    }, size);\n  }\n\n  /**\n   * Creates a `Dataset` that skips `count` initial elements from this dataset.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: The number of elements of this dataset that should be skipped\n   *   to form the new dataset.  If `count` is greater than the size of this\n   *   dataset, the new dataset will contain no elements.  If `count`\n   *   is `undefined` or negative, skips the entire dataset.\n   *\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  skip(count: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && count >= 0 && this.size >= count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is current size minus skipped size.This also covers the case that\n      // current size is infinity.\n      size = this.size - count;\n    } else if (\n        this.size != null &&\n        (this.size < count || count === undefined || count < 0)) {\n      // If the size of this dataset is smaller than count, or count is\n      // undefined or negative, skips the entire dataset and the new size is 0.\n      size = 0;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).skip(count), size);\n  }\n\n  // TODO(soergel): deep sharded shuffle, where supported\n\n  static readonly MAX_BUFFER_SIZE = 10000;\n\n  /**\n   * Pseudorandomly shuffles the elements of this dataset. This is done in a\n   * streaming manner, by sampling from a given number of prefetched elements.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param bufferSize: An integer specifying the number of elements from this\n   *   dataset from which the new dataset will sample.\n   * @param seed: (Optional) An integer specifying the random seed that will\n   *   be used to create the distribution.\n   * @param reshuffleEachIteration: (Optional) A boolean, which if true\n   *   indicates that the dataset should be pseudorandomly reshuffled each time\n   *   it is iterated over. If false, elements will be returned in the same\n   *   shuffled order on each iteration. (Defaults to `true`.)\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  shuffle(bufferSize: number, seed?: string, reshuffleEachIteration = true):\n      Dataset<T> {\n    if (bufferSize == null || bufferSize < 0) {\n      if (this.size == null) {\n        throw new RangeError(\n            '`Dataset.shuffle()` requires bufferSize to be specified.');\n      } else {\n        throw new RangeError(\n            '`Dataset.shuffle()` requires bufferSize to be specified.  ' +\n            'If your data fits in main memory (for regular JS objects), ' +\n            'and/or GPU memory (for `tf.Tensor`s), consider setting ' +\n            `bufferSize to the dataset size (${this.size} elements)`);\n      }\n    }\n    const base = this;\n    const random = seedrandom.alea(seed || tf.util.now().toString());\n    return datasetFromIteratorFn(async () => {\n      let seed2 = random.int32();\n      if (reshuffleEachIteration) {\n        seed2 += random.int32();\n      }\n      return (await base.iterator()).shuffle(bufferSize, seed2.toString());\n    }, this.size);\n  }\n\n  /**\n   * Creates a `Dataset` with at most `count` initial elements from this\n   * dataset.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: The number of elements of this dataset that should be taken\n   *   to form the new dataset.  If `count` is `undefined` or negative, or if\n   *   `count` is greater than the size of this dataset, the new dataset will\n   *   contain all elements of this dataset.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  take(count: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && this.size > count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is count.\n      size = count;\n    } else if (this.size != null && this.size <= count) {\n      // If the size of this dataset is equal or smaller than count, the new\n      // dataset's size is the size of this dataset.\n      size = this.size;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).take(count), size);\n  }\n\n  /**\n   * Collect all elements of this dataset into an array.\n   *\n   * Obviously this will succeed only for small datasets that fit in memory.\n   * Useful for testing and generally should be avoided if possible.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\n   * console.log(await a.toArray());\n   * ```\n   *\n   * @returns A Promise for an array of elements, which will resolve\n   *   when a new stream has been obtained and fully consumed.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  async toArray() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n    return (await this.iterator()).toArray();\n  }\n\n  /**\n   * Collect all elements of this dataset into an array with prefetching 100\n   * elements. This is useful for testing, because the prefetch changes the\n   * order in which the Promises are resolved along the processing pipeline.\n   * This may help expose bugs where results are dependent on the order of\n   * Promise resolution rather than on the logical order of the stream (i.e.,\n   * due to hidden mutable state).\n   *\n   * @returns A Promise for an array of elements, which will resolve\n   *   when a new stream has been obtained and fully consumed.\n   */\n  async toArrayForTest() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n    return (await this.iterator()).toArrayForTest();\n  }\n}\n\n/**\n * Create a `Dataset` defined by a provided iterator() function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * const ds = tf.data.datasetFromIteratorFn(iter);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n */\nexport function datasetFromIteratorFn<T extends tf.TensorContainer>(\n    iteratorFn: () => Promise<LazyIterator<T>>,\n    size: number = null): Dataset<T> {\n  return new class extends Dataset<T> {\n    override size = size;\n\n    /*\n     * Provide a new stream of elements.  Note this will also start new streams\n     * from any underlying `Dataset`s.\n     */\n    async iterator(): Promise<LazyIterator<T>> {\n      return iteratorFn();\n    }\n  }\n  ();\n}\n\n/**\n * Create a `Dataset` from an array of elements.\n *\n * Create a Dataset from an array of objects:\n * ```js\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n *\n * Create a Dataset from an array of numbers:\n * ```js\n * const a = tf.data.array([4, 5, 6]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n * @param items An array of elements that will be parsed as items in a dataset.\n *\n * @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'}\n */\nexport function array<T extends tf.TensorContainer>(items: T[]): Dataset<T> {\n  return datasetFromIteratorFn(\n      async () => iteratorFromItems(items), items.length);\n}\n\n/**\n * Create a `Dataset` by zipping together an array, dict, or nested\n * structure of `Dataset`s (and perhaps additional constants).\n * The underlying datasets must provide elements in a consistent order such that\n * they correspond.\n *\n * The number of elements in the resulting dataset is the same as the size of\n * the smallest dataset in datasets.\n *\n * The nested structure of the `datasets` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Note this means that, given an array of two datasets that produce dict\n * elements, the result is a dataset that produces elements that are arrays\n * of two dicts:\n *\n * Zip an array of datasets:\n * ```js\n * console.log('Zip two datasets of objects:');\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const ds3 = tf.data.zip([ds1, ds2]);\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\n *\n * // If the goal is to merge the dicts in order to produce elements like\n * // {a: ..., b: ...}, this requires a second step such as:\n * console.log('Merge the objects:');\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\n * await ds4.forEachAsync(e => console.log(e));\n * ```\n *\n * Zip a dict of datasets:\n * ```js\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const c = tf.data.zip({c: a, d: b});\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\n * ```\n *\n * @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'}\n */\nexport function zip<O extends tf.TensorContainer>(datasets: DatasetContainer):\n    Dataset<O> {\n  // manually type-check the argument for JS users\n  if (!isIterable(datasets)) {\n    throw new Error('The argument to zip() must be an object or array.');\n  }\n  let size;\n  if (Array.isArray(datasets)) {\n    for (let i = 0; i < datasets.length; i++) {\n      size = size == null ? (datasets[i] as Dataset<O>).size :\n                            Math.min(size, (datasets[i] as Dataset<O>).size);\n    }\n  } else if (datasets instanceof Object) {\n    for (const ds in datasets) {\n      size = size == null ? (datasets[ds] as Dataset<O>).size :\n                            Math.min(size, (datasets[ds] as Dataset<O>).size);\n    }\n  }\n  return datasetFromIteratorFn<O>(async () => {\n    const streams = await deepMapAndAwaitAll(datasets, d => {\n      if (d instanceof Dataset) {\n        return {value: d.iterator(), recurse: false};\n      } else if (isIterable(d)) {\n        return {value: null, recurse: true};\n      } else {\n        throw new Error(\n            'Leaves of the structure passed to zip() must be Datasets, ' +\n            'not primitives.');\n      }\n    });\n    return iteratorFromZipped<O>(streams, ZipMismatchMode.SHORTEST);\n  }, size);\n}\n\n/**\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\n *\n * Accepts an array of identically-structured nested elements and either batches\n * them (if they are primitives, numeric arrays, or Tensors) or requests\n * recursion (if not).\n */\n// tslint:disable-next-line:no-any\nfunction deepBatchConcat(rows: any[]): DeepMapResult {\n  if (rows === null) {\n    return null;\n  }\n\n  // use the first item to decide whether to recurse or batch here.\n  const exampleRow = rows[0];\n\n  if (canTensorify(exampleRow)) {\n    // rows is an array of primitives, Tensors, or arrays.  Batch them.\n    const value = batchConcat(rows);\n    return {value, recurse: false};\n  }\n\n  // the example row is an object, so recurse into it.\n  return {value: null, recurse: true};\n}\n\n/**\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\n * into a single new Tensor where axis 0 is the batch dimension.\n */\nfunction batchConcat<T extends(TensorLike | tf.Tensor)>(arrays: T[]):\n    tf.Tensor {\n  if (arrays.length === 0) {\n    // We can't return an empty Tensor because we don't know the element shape.\n    throw new Error('Can\\'t make a batch of zero elements.');\n  }\n\n  if (arrays[0] instanceof tf.Tensor) {\n    // Input is an array of Tensors\n    return tf.stack(arrays as tf.Tensor[]);\n  } else {\n    // Input is a possibly-nested array of numbers.\n    return tf.tensor(arrays as TensorLike);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {TensorContainer, util} from '@tensorflow/tfjs-core';\nimport {Dataset} from '../dataset';\nimport {DataSource} from '../datasource';\nimport {LazyIterator} from '../iterators/lazy_iterator';\nimport {ColumnConfig, CSVConfig} from '../types';\nimport {TextLineDataset} from './text_line_dataset';\n\nconst CODE_QUOTE = '\"';\nconst STATE_OUT = Symbol('out');\nconst STATE_FIELD = Symbol('field');\nconst STATE_QUOTE = Symbol('quote');\nconst STATE_QUOTE_AFTER_QUOTE = Symbol('quoteafterquote');\nconst STATE_WITHIN_QUOTE_IN_QUOTE = Symbol('quoteinquote');\n\n/**\n * Represents a potentially large collection of delimited text records.\n *\n * The produced `TensorContainer`s each contain one key-value pair for\n * every column of the table.  When a field is empty in the incoming data, the\n * resulting value is `undefined`, or throw error if it is required.  Values\n * that can be parsed as numbers are emitted as type `number`, other values\n * are parsed as `string`.\n *\n * The results are not batched.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport class CSVDataset extends Dataset<TensorContainer> {\n  base: TextLineDataset;\n  private hasHeader = true;\n  private fullColumnNames: string[] = null;\n  private columnNamesValidated = false;\n  private columnConfigs: {[key: string]: ColumnConfig} = null;\n  private configuredColumnsOnly = false;\n  private delimiter = ',';\n  private delimWhitespace = false;\n\n  /**\n   * Returns column names of the csv dataset. If `configuredColumnsOnly` is\n   * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is\n   * false and `columnNames` is provided, `columnNames`. If\n   * `configuredColumnsOnly` is false and `columnNames` is not provided, return\n   * all column names parsed from the csv file. For example usage please go to\n   * `tf.data.csv`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  async columnNames() {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n    return this.configuredColumnsOnly ? Object.keys(this.columnConfigs) :\n                                        this.fullColumnNames;\n  }\n\n  /* 1) If `columnNames` is provided as string[], use this string[] as output\n   * keys in corresponding order. The length must match the number of inferred\n   * columns if `hasHeader` is true .\n   * 2) If `columnNames` is not provided, parse header line as `columnNames` if\n   * hasHeader is true. If `hasHeader` is false, throw an error.\n   * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must\n   * exist in parsed `columnNames`.\n   */\n  private async setColumnNames() {\n    const columnNamesFromFile = await this.maybeReadHeaderLine();\n    if (!this.fullColumnNames && !columnNamesFromFile) {\n      // Throw an error if columnNames is not provided and no header line.\n      throw new Error(\n          'Column names must be provided if there is no header line.');\n    } else if (this.fullColumnNames && columnNamesFromFile) {\n      // Check provided columnNames match header line.\n      util.assert(\n          columnNamesFromFile.length === this.fullColumnNames.length,\n          () => 'The length of provided columnNames (' +\n              this.fullColumnNames.length.toString() +\n              ') does not match the length of the header line read from ' +\n              'file (' + columnNamesFromFile.length.toString() + ').');\n    }\n    if (!this.fullColumnNames) {\n      this.fullColumnNames = columnNamesFromFile;\n    }\n    // Check if there are duplicate column names.\n    const counts: {[key: string]: number} = this.fullColumnNames.reduce(\n        (countAcc: {[key: string]: number}, name) => {\n          countAcc[name] = (countAcc[name] + 1) || 1;\n          return countAcc;\n        },\n        {});\n    const duplicateNames =\n        Object.keys(counts).filter((name) => (counts[name] > 1));\n    util.assert(\n        duplicateNames.length === 0,\n        () => 'Duplicate column names found: ' + duplicateNames.toString());\n    // Check if keys in columnConfigs match columnNames.\n    if (this.columnConfigs) {\n      for (const key of Object.keys(this.columnConfigs)) {\n        const index = this.fullColumnNames.indexOf(key);\n        if (index === -1) {\n          throw new Error(\n              'The key \"' + key +\n              '\" provided in columnConfigs does not match any of the column ' +\n              'names (' + this.fullColumnNames.toString() + ').');\n        }\n      }\n    }\n    this.columnNamesValidated = true;\n  }\n\n  private async maybeReadHeaderLine() {\n    if (this.hasHeader) {\n      const iter = await this.base.iterator();\n      const firstElement = await iter.next();\n      if (firstElement.done) {\n        throw new Error('No data was found for CSV parsing.');\n      }\n      const firstLine: string = firstElement.value;\n      const headers = this.parseRow(firstLine, false);\n      return headers;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Create a `CSVDataset`.\n   *\n   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n   * @param csvConfig (Optional) A CSVConfig object that contains configurations\n   *     of reading and decoding from CSV file(s).\n   *\n   *     hasHeader: (Optional) A boolean value that indicates whether the first\n   *     row of provided CSV file is a header line with column names, and should\n   *     not be included in the data. Defaults to `true`.\n   *\n   *     columnNames: (Optional) A list of strings that corresponds to\n   *     the CSV column names, in order. If provided, it ignores the column\n   *     names inferred from the header row. If not provided, infers the column\n   *     names from the first row of the records. If hasHeader is false and\n   *     columnNames is not provided, this method throws an error.\n   *\n   *     columnConfigs: (Optional) A dictionary whose key is column names, value\n   *     is an object stating if this column is required, column's data type,\n   *     default value, and if this column is label. If provided, keys must\n   *     correspond to names provided in columnNames or inferred from the file\n   *     header lines. If isLabel is true any column, returns an array of two\n   *     items: the first item is a dict of features key/value pairs, the second\n   *     item is a dict of labels key/value pairs. If no feature is marked as\n   *     label, returns a dict of features only.\n   *\n   *     configuredColumnsOnly (Optional) If true, only columns provided in\n   *     columnConfigs will be parsed and provided during iteration.\n   *\n   *     delimiter (Optional) The string used to parse each line of the input\n   *     file. Defaults to `,`.\n   */\n  constructor(protected readonly input: DataSource, csvConfig?: CSVConfig) {\n    super();\n    this.base = new TextLineDataset(input);\n    if (!csvConfig) {\n      csvConfig = {};\n    }\n    this.hasHeader = csvConfig.hasHeader === false ? false : true;\n    this.fullColumnNames = csvConfig.columnNames;\n    this.columnConfigs = csvConfig.columnConfigs;\n    this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;\n    if (csvConfig.delimWhitespace) {\n      util.assert(\n          csvConfig.delimiter == null,\n          () =>\n              'Delimiter should not be provided when delimWhitespace is true.');\n      this.delimWhitespace = true;\n      this.delimiter = ' ';\n    } else {\n      this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : ',';\n    }\n  }\n\n  async iterator(): Promise<LazyIterator<TensorContainer>> {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n    let lines = await this.base.iterator();\n    if (this.hasHeader) {\n      // We previously read the first line to get the columnNames.\n      // Now that we're providing data, skip it.\n      lines = lines.skip(1);\n    }\n    return lines.map(x => this.makeDataElement(x));\n  }\n\n  makeDataElement(line: string): TensorContainer {\n    const values = this.parseRow(line);\n    const features: {[key: string]: TensorContainer} = {};\n    const labels: {[key: string]: TensorContainer} = {};\n\n    for (let i = 0; i < this.fullColumnNames.length; i++) {\n      const key = this.fullColumnNames[i];\n      const config = this.columnConfigs ? this.columnConfigs[key] : null;\n      if (this.configuredColumnsOnly && !config) {\n        // This column is not selected.\n        continue;\n      } else {\n        const value = values[i];\n        let parsedValue = null;\n        if (value === '') {\n          // If default value is provided, use it. If default value is not\n          // provided, set as undefined.\n          if (config && config.default !== undefined) {\n            parsedValue = config.default;\n          } else if (config && (config.required || config.isLabel)) {\n            throw new Error(\n                `Required column ${key} is empty in this line: ${line}`);\n          } else {\n            parsedValue = undefined;\n          }\n        } else {\n          // A value is present, so parse it based on type\n          const valueAsNum = Number(value);\n          if (isNaN(valueAsNum)) {\n            // The value is a string and this column is declared as boolean\n            // in config, parse it as boolean.\n            if (config && config.dtype === 'bool') {\n              parsedValue = this.getBoolean(value);\n            } else {\n              // Set value as string\n              parsedValue = value;\n            }\n          } else if (!config || !config.dtype) {\n            // If this value is a number and no type config is provided, return\n            // it as number.\n            parsedValue = valueAsNum;\n          } else {\n            // If this value is a number and data type is provided, parse it\n            // according to provided data type.\n            switch (config.dtype) {\n              case 'float32':\n                parsedValue = valueAsNum;\n                break;\n              case 'int32':\n                parsedValue = Math.floor(valueAsNum);\n                break;\n              case 'bool':\n                parsedValue = this.getBoolean(value);\n                break;\n              default:\n                parsedValue = valueAsNum;\n            }\n          }\n        }\n        // Check if this column is label.\n        (config && config.isLabel) ? labels[key] = parsedValue :\n                                     features[key] = parsedValue;\n      }\n    }\n    // If label exists, return an object of features and labels as {xs:features,\n    // ys:labels}, otherwise return features only.\n    if (Object.keys(labels).length === 0) {\n      return features;\n\n    } else {\n      return {xs: features, ys: labels};\n    }\n  }\n\n  private getBoolean(value: string): number {\n    if (value === '1' || value.toLowerCase() === 'true') {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  // adapted from https://beta.observablehq.com/@mbostock/streaming-csv\n  private parseRow(line: string, validateElementCount = true): string[] {\n    const result: string[] = [];\n    let readOffset = 0;\n    const readLength = line.length;\n    let currentState = STATE_OUT;\n    // Goes through the line to parse quote.\n    for (let i = 0; i < readLength; i++) {\n      switch (currentState) {\n        // Before enter a new field\n        case STATE_OUT:\n          switch (line.charAt(i)) {\n            // Enter a quoted field\n            case CODE_QUOTE:\n              readOffset = i + 1;\n              currentState = STATE_QUOTE;\n              break;\n            // Read an empty field\n            case this.delimiter:\n              readOffset = i + 1;\n              // If delimiter is white space and configured to collapse\n              // multiple white spaces, ignore this white space.\n              if (this.delimiter === ' ' && this.delimWhitespace) {\n                break;\n              }\n              result.push('');\n              currentState = STATE_OUT;\n              break;\n            // Enter an unquoted field\n            default:\n              currentState = STATE_FIELD;\n              readOffset = i;\n              break;\n          }\n          break;\n        // In an unquoted field\n        case STATE_FIELD:\n          switch (line.charAt(i)) {\n            // Exit an unquoted field, add it to result\n            case this.delimiter:\n              result.push(line.substring(readOffset, i));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            default:\n          }\n          break;\n        // In a quoted field\n        case STATE_QUOTE:\n          switch (line.charAt(i)) {\n            // Read a quote after a quote\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE_AFTER_QUOTE;\n              break;\n            default:\n          }\n          break;\n        // This state means it's right after a second quote in a field\n        case STATE_QUOTE_AFTER_QUOTE:\n          switch (line.charAt(i)) {\n            // Finished a quoted field\n            case this.delimiter:\n              result.push(line.substring(readOffset, i - 1));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            // Finished a quoted part in a quoted field\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            // In a quoted part in a quoted field\n            default:\n              currentState = STATE_WITHIN_QUOTE_IN_QUOTE;\n              break;\n          }\n          break;\n        case STATE_WITHIN_QUOTE_IN_QUOTE:\n          switch (line.charAt(i)) {\n            // Exit a quoted part in a quoted field\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            default:\n          }\n          break;\n        default:\n      }\n    }\n    // Adds last item based on if it is quoted.\n    if (currentState === STATE_QUOTE_AFTER_QUOTE) {\n      result.push(line.substring(readOffset, readLength - 1));\n    } else {\n      result.push(line.substring(readOffset));\n    }\n    // Check if each row has the same number of elements as column names.\n    if (validateElementCount && result.length !== this.fullColumnNames.length) {\n      throw new Error(`Invalid row in csv file. Should have ${\n          this.fullColumnNames.length} elements in a row, but got ${result}`);\n    }\n    return result;\n  }\n}\n\n// TODO(soergel): add more basic datasets for parity with tf.data\n// tf.data.FixedLengthRecordDataset()\n// tf.data.TFRecordDataset()\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.1.0';\nexport {version};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  override write(values: backend_util.BackendValues, shape: number[],\n      dtype: DataType): DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi, looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, visit https://github.com/tensorflow/tfjs-node for more details. ' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  override incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  override move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  override numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  override async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  override readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  override async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  override memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  override dispose() {}\n\n  override floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  override epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, broadcast_util, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendCPU,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.data.get(s0.dataId).values as TypedArray;\n  const s1Vals = backend.data.get(s1.dataId).values as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'cpu',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clipByValue = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clipByValue,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: MathBackendCPU,\n           attrs: CumprodAttrs}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumprod');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumprod in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeOnesTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 1 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] * vals[prevIdx] :\n                                aVals[idx] * vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'cpu',\n  kernelFunc: cumprod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned\n    // to the channel of the conv2d's result; if the bias is a scalar, the\n    // bias_add is computed as if the bias was broadcasted to the shape of the\n    // conv2d's result.\n    if (dataFormat === 'NCHW' && bias.shape.length === 1 &&\n        bias.shape[0] !== 1) {\n      const reshapedBias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      result =\n          add({inputs: {a: result, b: reshapedBias}, backend}) as TensorInfo;\n      backend.disposeIntermediateTensorInfo(reshapedBias);\n    } else {\n      // This condition handles NHWC and NCHW (scalar case). The only other case\n      // for NCHW (1D case) is handled above.\n      result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    // For NCHW format, if PReLu activation weights is a 1-D tensor, it is\n    // supposed to be aligned with the channel of the conv2d's result. For other\n    // cases, whether NCHW or NHWC data format, the conv2d result is\n    // already aligned with the activation weights.\n    if (dataFormat === 'NCHW' && activation === 'prelu' &&\n        preluActivationWeights.shape.length === 1 &&\n        preluActivationWeights.shape[0] !== 1) {\n      const reshapedAlpha = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      result = applyActivation(\n          backend, result, activation, reshapedAlpha, leakyreluAlpha);\n      backend.disposeIntermediateTensorInfo(reshapedAlpha);\n    } else {\n      result = applyActivation(\n          backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], dtype, res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedGatherImpl} from './RaggedGather_impl';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits = paramsNestedSplits.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.data.get(paramsDenseValues.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImpl(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedRangeImpl} from './RaggedRange_impl';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.data.get(starts.dataId).values as TypedArray;\n  const $limits = backend.data.get(limits.dataId).values as TypedArray;\n  const $deltas = backend.data.get(deltas.dataId).values as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImpl(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'cpu',\n  kernelFunc: raggedRange as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedTensorToTensorImpl} from './RaggedTensorToTensor_impl';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.data.get(shape.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values as TypedArray;\n  const $rowPartitionValues = rowPartitionTensors.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImpl(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'cpu',\n  kernelFunc: raggedTensorToTensor as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction lowerBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] < value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nfunction upperBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] <= value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nexport function searchSortedImpl(\n    sortedInputs: TypedArray, values: TypedArray, batchSize: number,\n    numInputs: number, numValues: number, side: 'left'|'right'): TypedArray {\n  const output =\n      util.getArrayFromDType('int32', batchSize * numValues) as TypedArray;\n  for (let b = 0; b < batchSize; ++b) {\n    const sortedInputsSlice =\n        sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n    const outputOffset = b * numValues;\n    for (let i = 0; i < numValues; ++i) {\n      output[outputOffset + i] = side === 'left' ?\n          lowerBound(sortedInputsSlice, values[i + outputOffset]) :\n          upperBound(sortedInputsSlice, values[i + outputOffset]);\n    }\n  }\n  return output;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {searchSortedImpl} from './SearchSorted_impl';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendCPU,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const $sortedSequence =\n      backend.data.get(sortedSequence.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n\n  const output = searchSortedImpl(\n      $sortedSequence, $values, sortedSequence.shape[0],\n      sortedSequence.shape[1], values.shape[1], side);\n  return backend.makeTensorInfo(values.shape, 'int32', output);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'cpu',\n  kernelFunc: searchSorted as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n\n  let outBuf;\n  switch (sparseValues.dtype) {\n    case 'bool': {\n      const updatesBuf = backend.bufferSync<Rank, 'bool'>(sparseValues);\n      const $defaultValue =\n          Boolean(backend.data.get(defaultValue.dataId).values[0]);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'float32': {\n      const updatesBuf = backend.bufferSync<Rank, 'float32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'int32': {\n      const updatesBuf = backend.bufferSync<Rank, 'int32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'string': {\n      const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n      const $defaultValue = util.decodeString(\n          backend.data.get(defaultValue.dataId).values[0] as Uint8Array);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    default:\n      throw new Error(`Unsupported type ${sparseValues.dtype}`);\n  }\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const inStrides = util.computeStrides(image.shape);\n  const batchInStride = inStrides[0];\n  const rowInStride = inStrides[1];\n  const colInStride = inStrides[2];\n\n  const outStrides = util.computeStrides(outShape);\n  const batchOutStride = outStrides[0];\n  const rowOutStride = outStrides[1];\n  const colOutStride = outStrides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchOutStride + outY * rowOutStride +\n              outX * colOutStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {dilation2DBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2DBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedRangeConfig} from './kernels/RaggedRange';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  dilation2DBackpropFilterConfig,\n  dilation2DBackpropInputConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedRangeConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport '@tensorflow/tfjs-core/dist/register_all_gradients';\n// tslint:disable-next-line: no-imports-from-dist\nimport '@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops';\n\nexport * from '@tensorflow/tfjs-core';\nexport * from '@tensorflow/tfjs-layers';\nexport * from '@tensorflow/tfjs-converter';\n\n// Export data api as tf.data\nimport * as data from '@tensorflow/tfjs-data';\nexport {data};\n\n// Import and register backends.\nimport '@tensorflow/tfjs-backend-cpu';\nimport '@tensorflow/tfjs-backend-webgl';\n\n// Import versions of all sub-packages.\nimport {version_core} from '@tensorflow/tfjs-core';\nimport {version_cpu} from '@tensorflow/tfjs-backend-cpu';\nimport {version_webgl} from '@tensorflow/tfjs-backend-webgl';\nimport {version_data} from '@tensorflow/tfjs-data';\nimport {version_layers} from '@tensorflow/tfjs-layers';\nimport {version_converter} from '@tensorflow/tfjs-converter';\nimport {version as version_union} from './version';\n\nexport const version = {\n  'tfjs-core': version_core,\n  'tfjs-backend-cpu': version_cpu,\n  'tfjs-backend-webgl': version_webgl,\n  'tfjs-data': version_data,\n  'tfjs-layers': version_layers,\n  'tfjs-converter': version_converter,\n  'tfjs': version_union\n};\n"],"names":["getGlobalTensorClass","prototype","abs","this","throwIfDisposed","acos","acosh","add","b","all","axis","keepDims","any","argMax","argMin","asScalar","assert","size","reshape","asType","dtype","cast","as1D","as2D","rows","columns","as3D","depth","as4D","depth2","as5D","depth3","asin","asinh","atan","atan2","atanh","avgPool","filterSize","strides","pad","dimRoundingMode","batchToSpaceND","blockShape","crops","batchNorm","mean","variance","offset","scale","varianceEpsilon","broadcastTo","shape","ceil","clipByValue","min","max","concat","x","Tensor","conv1d","filter","stride","dataFormat","dilation","conv2dTranspose","outputShape","conv2d","dilations","cos","cosh","cumprod","exclusive","reverse","cumsum","depthToSpace","blockSize","depthwiseConv2d","dilation2d","divNoNan","div","dot","elu","equal","erf","euclideanNorm","exp","expandDims","expm1","fft","flatten","floor","floorDiv","gather","indices","greaterEqual","greater","ifft","irfft","isFinite","isInf","isNaN","leakyRelu","alpha","lessEqual","less","localResponseNormalization","depthRadius","bias","beta","logSigmoid","logSoftmax","logSumExp","log","log1p","logicalAnd","logicalNot","logicalOr","logicalXor","matMul","transposeA","transposeB","maxPool","maximum","minimum","mirrorPad","paddings","mode","mod","mul","neg","norm","ord","notEqual","oneHot","onValue","offValue","onesLike","constantValue","pool","windowShape","poolingType","padding","dilationRate","pow","prelu","prod","reciprocal","relu","relu6","reshapeAs","resizeBilinear","newShape2D","alignCorners","halfPixelCenters","resizeNearestNeighbor","halfFloatCenters","rfft","round","rsqrt","selu","separableConv2d","depthwiseFilter","pointwiseFilter","sigmoid","sign","sin","sinh","slice","begin","softmax","dim","softplus","spaceToBatchND","split","numOrSizeSplits","sqrt","square","squaredDifference","squeeze","stack","tensorsToBeStacked","step","stridedSlice","end","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","sub","sum","tan","tanh","tile","reps","toBool","toFloat","toInt","topk","k","sorted","transpose","perm","unique","unsortedSegmentSum","segmentIds","numSegments","unstack","where","condition","zerosLike","absGradConfig","kernelName","Abs","inputsToSave","gradFunc","dy","saved","acosGradConfig","Acos","a","scalar","acoshGradConfig","Acosh","addGradConfig","Add","outShape","broadcast_util","assertAndGetBroadcastShape","res","reduceAxes","getReductionAxes","length","addNGradConfig","AddN","saveAllInputs","ders","forEach","_","i","clone","argMaxGradConfig","ArgMax","argMinGradConfig","ArgMin","asinGradConfig","Asin","asinhGradConfig","Asinh","atan2GradConfig","Atan2","d","atanGradConfig","Atan","atanhGradConfig","Atanh","avgPool3dGrad","op","avgPool3dGrad_","input","$dy","convertToTensor","$input","dy5D","input5D","reshapedTo5D","rank","util","checkPadOnDimRoundingMode","inputs","attrs","ENGINE","AvgPool3DGrad","avgPool3DGradConfig","AvgPool3D","avgPoolGrad","avgPoolGrad_","input4D","dy4D","reshapedTo4D","AvgPoolGrad","avgPoolGradConfig","AvgPool","batchMatMulGradConfig","BatchMatMul","batchToSpaceNDGradConfig","BatchToSpaceND","broadcastToGradConfig","BroadcastTo","broadCastToAttrs","inputShape","Array","from","Error","axes","push","castGradConfig","Cast","ceilGradConfig","Ceil","clipByValueGradConfig","ClipByValue","clipValueMin","clipValueMax","complexAbsGradConfig","ComplexAbs","concatGradConfig","Concat","shapes","map","t","$axis","parseAxisParam","sizeSplits","s","conv2DGradConfig","Conv2D","x4D","$filter","conv_util","conv2DBackpropInput","conv2DBackpropFilter","conv2DBackpropInputGradConfig","Conv2DBackpropInput","ddx","conv3DBackpropFilter","conv3DBackpropFilter_","filterShape","x5D","Conv3DBackpropFilterV2","conv3DGradConfig","Conv3D","tupleValuesAreOne","conv3DBackpropInput","cosGradConfig","Cos","coshGradConfig","Cosh","cumsumGradConfig","Cumsum","permutation","getAxesPermutation","out","depthwiseConv2dNativeGradConfig","DepthwiseConv2dNative","$dilations","depthwiseConv2dNativeBackpropInput","depthwiseConv2dNativeBackpropFilter","dilation2dGradConfig","Dilation2D","inputInputs","filterInputs","Dilation2DBackpropInput","Dilation2DBackpropFilter","eluGradConfig","Elu","outputsToSave","y","EluGrad","erfGradConfig","Erf","Math","PI","expGradConfig","Exp","expandDimsGradConfig","ExpandDims","expm1GradConfig","Expm1","floorGradConfig","Floor","floorDivGradConfig","FloorDiv","tmp","fusedBatchNormGradConfig","FusedBatchNorm","scaleValue","reductionAxes","tileShape","xMinusMean","dyTimesScaleValue","oneOverSqrtVariance","minusHalfRCube","meanDer","varianceDer","xMinusMean2TimesRsqrt","scaleDer","offsetDer","gatherGradConfig","GatherV2","parsedAxis","paramsShape","indicesSize","outerShape","outerDims","innerShape","innerDims","outerAxesIndices","arrayRange","innerAxesIndices","valuesShape","arrayConcat","values","reshapedIndices","transposeDims","valuesTranspose","paramsGrad","invertTransposeDims","getUndoAxesPermutation","start","stop","result","arrays","j","greaterEqualGradConfig","GreaterEqual","identityGradConfig","Identity","isFiniteGradConfig","IsFinite","isInfGradConfig","IsInf","isNanGradConfig","IsNan","leakyReluGradConfig","LeakyRelu","mask","log1pGradConfig","Log1p","logGradConfig","Log","logSoftmaxGradConfig","LogSoftmax","value","logits","localResponseNormalizationBackprop","localResponseNormalizationBackprop_","LRNGrad","lrnGradConfig","LRN","gradForMinAndMax","xOrig","origAxes","axis_util","maxGradConfig","Max","reductionIndices","maxGrad","maximumGradConfig","Maximum","maxPool3dGrad","maxPool3dGrad_","output","$output","output5D","MaxPool3DGrad","maxPool3DGradConfig","MaxPool3D","maxPoolGrad","maxPoolGrad_","MaxPoolGrad","maxPoolGradConfig","MaxPool","meanGradConfig","Mean","reduceShape","computeOutAndReduceShapes","reduceSize","expandedDyShape","expandedDy","ones","minGradConfig","Min","minGrad","minimumGradConfig","Minimum","mirrorPadGradConfig","MirrorPad","p","modGradConfig","Mod","multiplyGradConfig","Multiply","negGradConfig","Neg","oneHotGradConfig","OneHot","zeros","onesLikeGradConfig","OnesLike","packGradConfig","Pack","padV2GradConfig","PadV2","powGradConfig","Pow","base","expFloat","logBase","preluGradConfig","Prelu","prodsGradFn_","xRank","finalProdAxis","xPermutation","backend_util","permutedX","newShape","endPartShape","splice","reduce","c","prodGrad","expandedYShape","xCumProd","xCumRevProd","dx","prodGradFn_","undoPermutation","prodGradConfig","Prod","axisArr","undefined","divGradConfig","RealDiv","reciprocalGradConfig","Reciprocal","relu6GradConfig","Relu6","reluGradConfig","Relu","reshapeGradConfig","Reshape","resizeBilinearGradConfig","ResizeBilinear","images","ResizeBilinearGrad","resizeNearestNeighborGradConfig","ResizeNearestNeighbor","ResizeNearestNeighborGrad","reverseGradConfig","Reverse","dims","roundGradConfig","Round","rsqrtGradConfig","Rsqrt","selectGradConfig","Select","e","seluGradConfig","Selu","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","greaterThanZeroDer","lessEqualZeroDer","sigmoidGradConfig","Sigmoid","signGradConfig","Sign","sinGradConfig","Sin","sinhGradConfig","Sinh","sliceGradConfig","Slice","parseSliceParams","begin_","size_","softmaxGradConfig","Softmax","dyTimesY","softplusGradConfig","Softplus","spaceToBatchNDGradConfig","SpaceToBatchND","splitVGradConfig","SplitV","sqrtGradConfig","Sqrt","squareGradConfig","Square","squaredDifferenceGradConfig","SquaredDifference","two","stepGradConfig","Step","subGradConfig","Sub","sumGradConfig","Sum","derX","tanGradConfig","Tan","tanhGradConfig","Tanh","tileGradConfig","Tile","xGrad","l","transposeGradConfig","Transpose","undoPerm","unpackGradConfig","Unpack","unsortedSegmentSumGradConfig","UnsortedSegmentSum","zeroClippedIndices","gathered","isPositive","numIters","zeroSlice","gatherDropNegatives","zerosLikeGradConfig","ZerosLike","gradientConfig","registerGradient","AttributeError","message","Object","setPrototypeOf","RuntimeError","ValueError","NotImplementedError","AssertionError","LruCache","maxEntries","cache","Map","key","entry","has","get","delete","set","keyToDelete","keys","next","pyListRepeat","numValues","isArray","newArray","fill","val","count","array","refernce","counter","singletonOrArray","xs","toList","toSnakeCase","name","insecure","replace","toLowerCase","toCamelCase","identifier","indexOf","m","p1","toUpperCase","_GLOBAL_CUSTOM_OBJECTS","serializeKerasObject","instance","dict","getClassName","getConfig","convertNDArrayScalarsInConfig","config","configItem","field","deserializeKerasObject","moduleObjects","customObjects","printableModuleName","fastWeightInit","fn","functionName","JSON","stringify","cls","fromConfig","className","customObjectsCombined","nestedConfig","backupCustomObjects","returnObj","reverseNumberCompare","numberCompare","isObjectEmpty","obj","hasOwnProperty","checkStringTypeUnionValue","label","checkArrayTypeAndLength","expectedType","minLength","maxLength","Infinity","every","assertPositiveInteger","v","Number","isInteger","formatAsFriendlyString","join","mapActivationToFusedKernel","activationName","_nextUniqueTensorId","getNextUniqueTensorId","_uidPrefixes","getUid","prefix","toString","VALID_DATA_FORMAT_VALUES","VALID_INTERPOLATION_FORMAT_VALUES","VALID_PADDING_MODE_VALUES","VALID_POOL_MODE_VALUES","VALID_BIDIRECTIONAL_MERGE_MODES","nameMap","checkDataFormat","checkPaddingMode","checkPoolMode","_nameScopeStack","nameScope","pop","getScopedTensorName","tensorName","isValidTensorName","getUniqueTensorName","scopedName","index","_epsilon","tensorNameRegex","RegExp","match","arrayProd","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","range","epsilon","backend","tfc","math_utils","sliceAlongFirstAxis","tidy","sliceAlongLastAxis","sliceAlongAxis","concatenate","tensors","concatAlongFirstAxis","n","randomNormal","stddev","seed","activation","reshapeBias","aFirstDims","aLastDim","bShape","bLastDim","ySecondLastDim","yOtherDims","reference","tensor1d","biasShape","biasAdd","dropout","level","noiseShape","inTrainPhase","alt","training","VALID_FAN_MODE_VALUES","VALID_DISTRIBUTION_VALUES","Initializer","serialization","Zeros","Ones","Constant","args","RandomUniform","DEFAULT_MINVAL","DEFAULT_MAXVAL","minval","maxval","randomUniform","RandomNormal","DEFAULT_MEAN","DEFAULT_STDDEV","K","TruncatedNormal","truncatedNormal","gain","eye","VarianceScaling","distribution","checkDistribution","fans","fanIn","fanOut","receptiveFieldSize","shapeProd","computeFans","limit","GlorotUniform","GlorotNormal","HeNormal","HeUniform","LeCunNormal","LeCunUniform","Orthogonal","DEFAULT_GAIN","console","warn","q","linalg","INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","deserializeInitializer","classNameMap","serializeInitializer","initializer","getInitializer","isArrayOfShapes","normalizeShapeList","getExactlyOneTensor","getExactlyOneShape","countParamsInWeights","weights","weight","DEFAULT_VARIABLE_NAME_PREFIX","LayerVariable","trainable","constraint","id","originalName","trainable_","assertNotDisposed","newVal","checkShapesMatch","assign","apply","dispose","isDisposed","batchGetValue","read","batchSetValue","variablesAndValues","variableAndValue","write","InputSpec","ndim","maxNDim","minNDim","SymbolicTensor","sourceLayer","callArgs","outputTensorIndex","_nextNodeID","Node","outboundLayer","inboundLayers","nodeIndices","tensorIndices","inputTensors","outputTensors","inputMasks","outputMasks","inputShapes","outputShapes","layer","outboundNodes","inboundNodes","inboundNames","_nextLayerID","Layer","_callHook","_addedWeightNames","_stateful","activityRegularizer","inputSpec","supportsMasking","_trainableWeights","_nonTrainableWeights","_losses","_updates","_built","generic_utils","batchInputShape","batchSize","inputDType","initialWeights","_refCount","fastWeightInitDuringBuild","nodeIndex","attrName","getNodeAtIndex","losses","lossFn","built","w","trainableWeights","nonTrainableWeights","stateful","inputIndex","spec","xShape","xShapeAtAxis","specDim","kwargs","callHook","inputsList","allAreSymbolic","noneAreSymbolic","assertInputCompatibility","xElem","build","setWeights","call","outputList","outputListCopy","collectInputShape","computeOutputShape","outputDType","warnOnIncompatibleInputShape","addInboundNode","dimMismatch","dimension","allOutputShapes","node","shapeString","variable_utils","trainableOnly","params","weightValueTuples","paramValues","pv","regularizer","getInitializerFunc","initValue","addLoss","TypeError","maskElement","inputTensorList","types_utils","tensorIndex","numDisposedVariables","disposeWeights","refCountAfterDispose","getSourceInputs","tensor","sourceTensors","previousSources","InputLayer","sparse","inputTensor","Input","batchShape","FeedDict","feeds","id2Value","id2Mask","name2Id","feed","err","assertFeedCompatibility","cachedSorted","cachedRecipientCounts","execute","fetches","feedDict","probe","arrayFetches","fetchArray","outputNames","finalOutputs","feedNames","names","outputName","getValue","maxNumTensors","minNumTensors","recipientCounts","fetchAndFeedKey","sort","finalSorted","finalRecipientMap","getTopologicalSortAndRecipientCountsForOneFetch","recipientMap","visited","Set","symbolicTensor","recipient","recipientMap2Counts","getTopologicalSortAndRecipientCounts","put","internalFeedDict","numTensors","memory","symbolic","srcLayer","inputValues","tensorsToDispose","maskExists","getMask","hasKey","outputMask","computeMask","layerOutputs","getNodeOutputs","outputSymbolicTensors","disposeMasks","fetch","marks","top","topIsMarked","getOutputAt","calcL2Norms","env","registerFlag","setMaxEntries","Constraint","MaxNorm","defaultMaxValue","defaultAxis","maxValue","norms","desired","UnitNorm","NonNeg","MinMaxNorm","defaultMinValue","defaultRate","minValue","rate","CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeConstraint","deserializeConstraint","getConstraint","ModelLoggingVerbosity","resolveScalarsInLogs","logs","promises","scalarsToDispose","valueScalar","data","Promise","disposeTensorsInLogs","BaseCallback","validationData","epoch","batch","model","CallbackList","callbacks","queueLength","callback","setParams","setModel","onEpochBegin","onEpochEnd","onBatchBegin","onBatchEnd","onTrainBegin","onTrainEnd","BaseLogger","seen","totals","oldTotalsToDispose","total","keep","History","history","valueArray","CustomCallback","yieldEvery","currentEpoch","nowFunc","nextFrameFunc","nextFrame","onYield","maybeWait","f","waitMs","lastResult","lastTime","now","bind","trainBegin","trainEnd","epochBegin","epochEnd","batchBegin","batchEnd","yield","ps","standardizeCallbacks","callbackConfig","CallbackConstructorRegistry","verbosityLevel","callbackConstructor","checkForDuplicate","constructors","levelName","ctor","configureCallbacks","verbose","epochs","initialEpoch","numTrainSamples","stepsPerEpoch","doValidation","callbackMetrics","actualCallbacks","createCallbacks","callbackList","samples","steps","metrics","deserialize","l2Normalize","squareSum","epsilonTensor","meanSquaredError","yTrue","yPred","meanAbsoluteError","meanAbsolutePercentageError","diff","clippedTrue","MAX_VALUE","absResult","meanSquaredLogarithmicError","clippedPred","firstLog","secondLog","categoricalCrossentropy","target","fromLogits","outputSum","sparseCategoricalCrossentropy","flatTarget","binaryCrossentropy","labels","reluLogits","negAbsLogits","sigmoidCrossEntropyWithLogits","kullbackLeiblerDivergence","cosineProximity","trueNormalized","predNormalized","trueXPred","lossesMap","squaredHinge","maxResult","hinge","categoricalHinge","pos","logcosh","log2","predictionDiff","logcoshResult","poisson","logPred","identifierOrFn","errMsg","includes","binaryAccuracy","threshold","yPredThresholded","categoricalAccuracy","truePositives","lossBinaryCrossentropy","sparseCategoricalAccuracy","categoricalCrossentropyLoss","sparseCategoricalCrossentropyLoss","metricsMap","precision","tp","fp","falsePositives","denominator","mse","MSE","mae","MAE","mape","MAPE","cosine","getLossOrMetricName","fnName","MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH","checkUserDefinedMetadata","userDefinedMetadata","modelName","checkSize","getPrototypeOf","plainObjectCheck","xType","printSummary","lineLength","positions","relevantNodes","printFn","sequentialLike","isModelSequentialLike","toDisplay","nodesByDepth","repeat","printRow","layers","printLayerSummary","printLayerSummaryWithConnections","checkTrainableWeightsConsistency","trainableCount","countTrainableParams","nonTrainableCount","collectedTrainableWeights","nodes","depthNodes","flag","fields","line","countParams","connections","inboundLayer","inboundLayerIndex","inboundTensorIndex","firstConnection","isArrayItemInputOrOutputName","convertPythonicToTs","pythonicConfig","tsArray","arrayLength","item","tsDict","pythonicKey","pythonicValue","tsKey","convertTsToPythonic","tsConfig","pyArray","pyDict","tsValue","pyKey","version","Container","containerNodes","outputs","inputLayers","inputLayersNodeIndices","inputLayersTensorIndices","outputLayers","outputLayersNodeIndices","outputLayersTensorIndices","internalContainerRefs","inputNames","feedInputShapes","feedInputNames","feedOutputNames","internalInputShapes","internalOutputShapes","nodesDepths","nodeIDToNode","layersDepths","layerIDToLayer","layerIndices","nodesInDecreasingDepth","buildMapOfGraph","finishedNodes","nodesInProgress","nodeKey","numInboundLayers","reversedNodesInDecreasingDepth","previousDepth","inboundNode","nodeID","layersByDepth","layerID","depthKeys","parseInt","layersForDepth","aIndex","bIndex","computableTensors","layersWithCompleteInput","allNames","numOccurrences","container","strict","nameToWeight","totalWeightsCount","validatedName","tokens","shortenNameArray","unsetNames","theConfig","modelConfig","layersVersion","unused","returnString","updatedConfig","masks","runInternalGraph","layersToOutputShapes","outputShapeKeys","shapeKey","tensorMap","referenceInputTensors","referenceOutputTensors","computedData","computedTensors","computedMasks","computedTensor","computedMask","keptNodes","nodeConversionMap","originalNodeIndex","calculateLosses","buildNodeConversionMap","layerConfigs","layerClassName","layerConfig","filteredInboundNodes","nodeData","newNodeIndex","modelInputs","modelOutputs","resetStates","createdLayers","unprocessedNodes","addUnprocessedNode","processNode","inputData","inboundLayerName","inboundNodeIndex","processLayer","layerData","layerName","deserializeLayer","setFastWeightInitDuringBuild","layersFromConfig","currentUnprocessedNodesForLayer","inputLayersFromConfig","layerOutputTensors","outputLayersFromConfig","standardizeSampleOrClassWeights","xWeight","weightType","numOutputs","standardizeClassWeights","classWeight","standardizeWeights","sampleWeight","sampleWeightMode","yClasses","yClassIndices","classSampleWeight","classIndex","computeWeightedLoss","sampleWeights","standardizeDataIteratorOutput","iteratorOut","ys","iteratorOutObj","flattenedXs","flattenTensorOrArrayOrMap","flattenedYs","xIndex","yIndex","inputOrOutput","standardizeTensorValidationData","fitDataset","dataset","hasBatchesPerEpoch","batchesPerEpoch","optimizer","isTraining","isDatasetObject","validationBatches","valXs","valYs","trainFunction","makeTrainFunction","outLabels","getDedupedMetricsNames","getStepsPerEpoch","stopTraining_","iterator","dataIterator","epochLogs","stepsDone","batchIndex","done","batchLogs","standardClassWeights","ins","outs","valOuts","evaluateDataset","batches","evaluate","validationBatchSize","metricsNames","syncData","isLazyIteratorObject","hasBatches","testFunction","numExamples","xsAndYs","batchOuts","batchOut","oldScalar","checkBatchSize","sliceArrays","sliceArraysByIndices","makeBatches","batchStart","ensureTensorsRank2OrHigher","disposeNewTensors","refTensors","oldTensorIds","oldTensor","isDataArray","isDataDict","isDataTensor","standardizeInputData","checkBatchAxis","exceptionPrefix","gotUnexpectedData","refDim","checkArrayLengths","targets","setX","setY","checkLossAndTargetCompatibility","lossFns","keyLosses","loss","slicedYShape","slicedShape","targetDim","outDim","checkInputData","LayersModel","optimizer_","optimizerMap","train","optimizers","isOptimizerOwned","Optimizer","lossFunctions","theLosses","lossFunction","feedOutputShapes","feedLossFns","skipTargetIndices","metricsTensors","weightedLoss","nestedMetrics","wrappedMetrics","outputMetrics","collectMetrics","appendMetric","outputIndex","metricName","metricTensor","accFn","weightedMetricFn","metric","Metrics","suffix","metricFn","metricResult","handleMetrics","standardizedOuts","standardizeUserDataXY","makeTestFunction","testOuts","testLoop","numSamples","stepsName","outputsIsArray","retrieveSymbolicTensors","tensorValue","executeOutputs","symbolicTensorNames","outputsRemaining","layerOutputNames","remainingNames","checkNumSamples","outsBatches","insBatch","xsRank2OrHigher","predictLoop","standardXs","standardYs","standardSampleWeights","classWeights","indexArray","batchIds","dedupedOutLabels","newLabel","dupIndex","lossValues","metricsValues","variables","param","minimize","totalLoss","meanLoss","weightedMetric","regularizerLoss","valOutputs","meanMetric","standardizeUserData","inputValX","inputValY","valStandardized","valX","valY","valIns","validationSplit","splitAt","originalBatchSize","originalInputs","originalTargets","validationSteps","valFunction","fitLoop","shuffle","valF","epochIndexArray1D","standardizeOut","namedWeights","weightValues","getWeights","numTensorsBeforeOptmizerDisposal","lossNames","metricsIdentifiers","getLossIdentifiers","getMetricIdentifiers","optimizer_config","class_name","trainingConfig","weighted_metrics","loss_weights","sample_weight_mode","lossEntry","compile","handlerOrURL","handlers","io","save","getNamedWeights","weightDataAndSpecs","toJSON","modelArtifacts","modelTopology","format","generatedBy","convertedBy","includeOptimizer","getTrainingConfig","encodeWeights","optimizerWeightData","optimizerWeightSpecs","specs","weightData","weightSpecs","Functional","loadLayersModel","pathOrIOHandler","options","loadLayersModelFromIOHandler","handler","load","artifacts","loadTrainingConfig","setUserDefinedMetadata","decodeModelAndOptimizerWeights","modelWeights","optimizerWeights","loadWeights","buffer","name2Tensor","group","Sequential","some","modelLayer","isLayerModelInstance","checkShape","outputTensor","lastLayerIndex","predict","predictOnBatch","fit","trainOnBatch","stopTraining","configArray","extraModelConfig","conf","sequential","Activation","Linear","HardSigmoid","Softsign","Swish","Mish","serializeActivation","deserializeActivation","getActivation","assertObjectArgs","Regularizer","L1L2","l1","l2","hasL1","hasL2","regularization","REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeRegularizer","deserializeRegularizer","getRegularizer","ReLU","baseConfig","LeakyReLU","DEFAULT_ALPHA","PReLU","DEFAULT_ALPHA_INITIALIZER","alphaInitializer","alphaRegularizer","alphaConstraint","sharedAxes","paramShape","addWeight","ELU","ThresholdedReLU","DEFAULT_THETA","theta","DEFAULT_AXIS","softmaxActivation","normalizeArray","singleValue","convOutputLength","inputLength","outputLength","dilatedFilterSize","deconvLength","dimSize","strideSize","kernelSize","preprocessConv2DInput","preprocessConv3DInput","conv1dWithBias","kernel","conv2dWithBiasActivation","conv3dWithBias","BaseConv","DEFAULT_KERNEL_INITIALIZER","DEFAULT_BIAS_INITIALIZER","verifyArgs","useBias","biasInitializer","biasConstraint","biasRegularizer","Conv","filters","kernelInitializer","kernelConstraint","kernelRegularizer","channelAxis","inputDim","kernelShape","biasValue","fusedActivationName","newSpace","space","newDim","Conv2DTranspose","hAxis","wAxis","height","width","kernelH","kernelW","strideH","strideW","heightAxis","widthAxis","Conv3DTranspose","dAxis","kernelD","strideD","depthAxis","SeparableConv","DEFAULT_DEPTHWISE_INITIALIZER","DEFAULT_POINTWISE_INITIALIZER","depthwiseKernel","pointwiseKernel","depthMultiplier","depthwiseInitializer","depthwiseRegularizer","depthwiseConstraint","pointwiseInitializer","pointwiseRegularizer","pointwiseConstraint","depthwiseKernelShape","pointwiseKernelShape","SeparableConv2D","Conv1D","Cropping2D","cropping","hSliced","UpSampling2D","DEFAULT_SIZE","interpolation","resized","DepthwiseConv2D","cols","outFilters","outRows","outCols","standardizeArgs","initialState","constants","numConstants","toListOrNull","rnn","stepFunction","initialStates","goBackwards","unroll","needPerStepOutputs","lastOutput","perStepMasks","perStepOutputs","states","timeSteps","perStepInputs","currentInput","stepOutputs","maskedOutputs","stepMask","negStepMask","newStates","state","RNN","cell","StackedRNNCells","cells","stateSize","returnSequences","returnState","stateSpec","states_","keptStates","outputDim","stateShape","stateMask","numStates","stepInputShape","expectedShape","standardized","additionalInputs","additionalSpecs","fullInput","fullInputSpec","originalInputSpec","getInitialState","cellCallKwargs","rnnOutputs","cellConfig","RNNCell","SimpleRNNCell","DEFAULT_ACTIVATION","DEFAULT_RECURRENT_INITIALIZER","units","recurrentInitializer","recurrentRegularizer","recurrentConstraint","recurrentDropout","dropoutFunc","dropoutMask","recurrentDropoutMask","recurrentKernel","prevOutput","h","generateDropoutMask","dpMask","recDpMask","SimpleRNN","GRUCell","DEFAULT_RECURRENT_ACTIVATION","resetAfter","recurrentActivation","implementation","hTMinus1","z","r","hh","matrixX","recurrentKernelValue","rk1","rk2","matrixInner","xZ","xR","xH","recurrentZ","recurrentR","recurrentH","GRU","LSTMCell","unitForgetBias","capturedBiasInit","capturedUnits","_a","bI","bF","bCAndH","cTMinus1","o","z0","z1","z2","z3","LSTM","nestedStates","callInputs","newNestedStates","cellStates","tuples","numParams","inputWeights","droppedInputs","createMask","ConvRNN2D","computeSingleOutputShape","getStates","isChannelsFirst","hOut","wOut","ConvLSTM2DCell","recurrentKernelShape","init","applyDropout","xI","xF","xC","xO","recDropoutMask","hI","hF","hC","hO","kernelI","kernelF","kernelC","kernelO","biasI","biasF","biasC","biasO","inputConv","recKernelI","recKernelF","recKernelC","recKernelO","recurrentConv","ConvLSTM2D","Dropout","invokeCallHook","getNoiseShape","SpatialDropout1D","Dense","inputLastDim","Flatten","RepeatVector","targetShape","isUnknown","errorMsg","finalShape","known","unknown","originalSize","anyUnknownDims","fixUnknownDimension","Permute","expectedSortedIndices","dimsIncludingBatch","Masking","maskValue","booleanMask","Embedding","embeddings","DEFAULT_EMBEDDINGS_INITIALIZER","embeddingsInitializer","embeddingsRegularizer","embeddingsConstraint","maskZero","inLens","s1","s2","Merge","shape1","shape2","computeElementwiseOpOutputShape","batchSizes","allRanks","reshapeRequired","reshapedInputs","inputDims","mathUtils","xNDim","mergeFunction","transposed","xTransposed","yNDim","yShape","Average","Concatenate","allNoneShape","shapeSet","shapeWithoutConcatAxis","exists","allNullMasks","concatenatedMasks","interpretAxis","Dot","normalize","interpretAxes","x1","x2","axesArray","diffShape","adjX","adjY","idx","squeezeAxes","batchDot","GaussianNoise","GaussianDropout","AlphaDropout","_getNoiseShape","alphaP","keptIdx","batchNormalization","gamma","regularNormalizeBatchInTraining","meanAndVariance","broadcastNormalizeBatchInTraining","broadcastMean","broadcastVariance","broadcastGamma","broadcastBeta","BatchNormalization","momentum","center","betaInitializer","gammaInitializer","movingMeanInitializer","movingVarianceInitializer","betaConstraint","gammaConstraint","betaRegularizer","gammaRegularizer","movingMean","movingVariance","broadcastShape","sortedReductionAxes","needsBroadcasting","broadcastMovingMean","broadcastMovingVariance","normalizeInference","normalizeBatchInTraining","normedTraining","doMovingAverage","variable","decay","origValue","updateDelta","LayerNormalization","nDims","moments","broadcast","momentsTiling","scaleOffsetTiling","ZeroPadding2D","heightPadding","widthPadding","pattern","pool2d","poolSize","poolMode","paddingString","pool3d","Pooling1D","poolingFunction","MaxPooling1D","AveragePooling1D","Pooling2D","MaxPooling2D","AveragePooling2D","Pooling3D","depths","MaxPooling3D","AveragePooling3D","GlobalPooling1D","GlobalAveragePooling1D","GlobalMaxPooling1D","GlobalPooling2D","GlobalAveragePooling2D","GlobalMaxPooling2D","Wrapper","newConfig","TimeDistributed","childInputShape","childOutputShape","timesteps","Bidirectional","forwDict","forwardLayer","backDict","backwardLayer","mergeMode","_trainable","numWeights","numeightsOver2","layerShapes","stateSpecs","isSymbolicTensor","yRev","forwardState","backwardState","rnnLayer","Rescaling","image","cropAndResize","CenterCrop","hBuffer","wBuffer","inputHeight","inputWidth","isRank3","bound","boxesArr","boxes","boxInd","cropped","rankedInputs","centerCrop","upsize","CategoryEncoding","numTokens","outputMode","countWeights","greaterEqualMax","bufferSync","greaterMin","originalShape","binCounts","binaryOutput","denseBincountInput","denseBincount","utils","INTERPOLATION_METHODS","Resizing","cropToAspectRatio","Boolean","numChannels","inputLayer","reLU","leakyReLU","thresholdedReLU","conv3d","conv3dTranspose","cropping2D","upSampling2d","dense","spatialDropout1d","repeatVector","permute","embedding","average","multiply","layerNormalization","zeroPadding2d","averagePooling1d","avgPool1d","avgPooling1d","averagePooling2d","avgPool2d","avgPooling2d","averagePooling3d","avgPool3d","avgPooling3d","globalAveragePooling1d","globalAveragePooling2d","globalMaxPooling1d","globalMaxPooling2d","maxPooling1d","maxPooling2d","maxPooling3d","gru","gruCell","lstm","lstmCell","simpleRNN","simpleRNNCell","convLstm2d","convLstm2dCell","stackedRNNCells","bidirectional","timeDistributed","globalMaxPool1d","globalMaxPool2d","maxPool1d","maxPool2d","gaussianNoise","gaussianDropout","alphaDropout","masking","rescaling","resizing","categoryEncoding","DataType","SaverDef","debugValue","CheckpointFormatVersion","deepMapInternal","mapFn","containedIn","Blob","recurse","isIterable","mappedIterable","child","childResult","__proto__","deepZip","zipFn","zipToList","deepZipInternal","isTextDecoder","tf","TextDecoder","require","StringDecoder","ArrayBuffer","isView","deepClone","deepMap","cloneIfTensor","RingBuffer","capacity","RangeError","doubledCapacity","isFull","wrap","isEmpty","relativeIndex","GrowingRingBuffer","INITIAL_CAPACITY","expand","newCapacity","newData","len","iteratorFromFunction","func","FunctionCallIterator","iteratorFromConcatenated","baseIterators","baseErrorHandler","ChainedIterator","ZipMismatchMode","LazyIterator","stream","prefetch","predicate","shouldContinue","ErrorHandlingLazyIterator","FilterIterator","transform","MapIterator","AsyncMapIterator","serial","FlatmapIterator","resolveFully","serialMapAsync","resolveWhile","smallLastBatch","RowMajorBatchIterator","rowBatches","rowMajorBatch","ArrayIterator","TakeIterator","SkipIterator","bufferSize","PrefetchIterator","windowSize","ShuffleIterator","SerialIterator","items","trav","nextFn","upstream","lastRead","resolve","summary","then","serialNext","maxCount","skipped","enableSmallLastBatch","mapped","OneToManyIterator","outputQueue","pump","shift","mappedArray","pushAll","iterators","moreIterators","readFromChain","iteratorResult","handleErrors","itemResult","refill","upstreamExhausted","random","seedrandom","alea","randomInt","chosenIndex","chooseIndex","shuffleExcise","Dataset","datasetFromIteratorFn","columnMajorBatch","deepBatchConcat","forEachAsync","mapAsync","iteratorIterator","take","skip","reshuffleEachIteration","seed2","int32","toArray","toArrayForTest","iteratorFn","canTensorify","batchConcat","Symbol","whereImpl","kernel_impls","MathBackendCPU","firstUse","DataStorage","engine","nextDataId","dataId","refCount","outId","encodedValues","numDataIds","readSync","complexTensorInfos","realValues","real","imagValues","imag","strings","makeTensorFromTensorInfo","makeTensorInfo","force","disposeData","tensorInfo","kernelMs","unreliable","reasons","assertNotComplex","condVals","KernelBackend","registerBackend","unaryKernelFunc","xi","eluConfig","backendName","kernelFunc","xSize","xVals","outVals","leakyReluConfig","preluImpl","createSimpleBinaryKernelImpl","xValue","aValue","aVals","bVals","resultData","resultShape","preluConfig","reluConfig","relu6Config","applyActivation","preluActivationWeights","leakyreluAlpha","identity","$shape","$xSize","incRef","xData","reshapeConfig","batchMatMul","aRank","bRank","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","bi","i0","j0","k0","iBlock","jBlock","kBlock","batchOffsetA","batchOffsetB","disposeIntermediateTensorInfo","batchMatMulConfig","_fusedMatMulConfig","_FusedMatMul","current","addRes","activationRes","intermediates","acosConfig","acoshConfig","addNConfig","vals","outBuf","currVals","allConfig","All","permutedAxes","$x","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","intermediateTensorInfos","outSize","maxIndex","argMinConfig","minIndex","asinConfig","asinhConfig","atanConfig","atan2Impl","bValue","binaryKernelFunc","atan2Config","atanhConfig","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","padLeft","left","initialValue","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","xROffset","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","xBuf","maxPosition","wR","wC","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","filterWidth","filterHeight","inShape","avgPool3DConfig","filterDepth","avgMultiplier","dyBuf","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","mVals","varVals","sVals","Float32Array","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","reshaped","permuted","reshapedPermuted","sliceBeginCoords","sliceSize","xReshaped","xTransposedReshaped","bincountConfig","Bincount","weightsVals","bincountImpl","broadcastArgsConfig","BroadcastArgs","s0","s0Vals","s1Vals","Int32Array","clipAttrs","clipByValueConfig","complexAbsConfig","cpuBackend","resultValues","complexVals","realVals","imagVals","hypot","makeOutput","imagVal","imagConfig","Imag","$inputs","reals","imags","realConcated","imagConcated","complex","inputs2D","innerSize","inputsValShapes","simplyConcat","concatImpl","finalOutShape","outInfo","concatConfig","conv2D","$dataFormat","isChannelsLast","TensorBuffer","xStrides","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","conv2DBackpropFilterConfig","Conv2DBackpropFilter","dW","leftPad","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","yF","xFCorner","wF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cosConfig","coshConfig","cropAndResizeConfig","CropAndResize","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","y2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","closestY","inInd","outInd","cumprodConfig","Cumprod","permutedAxis","resultDtype","upcastType","finalDim","indexAdjuster","prevIdx","reversePermutation","reverseTransposedResult","cumsumConfig","denseBincountConfig","DenseBincount","weightsBuf","bincountReduceImpl","depthToSpaceConfig","DepthToSpace","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","inH","offsetH","inW","offsetD","inputIdx","depthwiseConv2dNative","chMul","depthwiseConv2dNativeConfig","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","trunc","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2DConfig","filterVals","filterRank","outRank","hBeg","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","filterIndex","dilation2DBackpropFilterConfig","gradients","hMax","wMax","dilation2DBackpropInputConfig","hInMax","wInMax","oldResult","sumConfig","einsumConfig","Einsum","equation","allDims","summedDims","idDims","path","nSteps","numDimsRemaining","idTerm","permutationIndices","dimsToExpand","a1","a2","a3","a4","a5","erfConfig","inputRank","$dim","expandDimsConfig","realDivImpl","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","resultSize","resultReal","resultImag","fftImpl","$realInfo","$imagInfo","inputSize","fftRadix2","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","term","fourierTransformByMatmul","half","evenComplex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","eShape","eRealInfo","eImagInfo","complexInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","$dtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchIdx","batchOffset","row","rowOffset","col","colOffset","coordX","outIdx","outputValue","floorDivImpl","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","reshapedBias","reshapedAlpha","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","paramsSize","indicesShape","sliceRank","numSlices","indicesData","paramsBuf","gatherNdImpl","gatherV2Config","batchDims","indicesVals","axisDim","$batchDims","shapeInfo","flattenX","outerSize","flattenIndex","flattenOutputShape","indicesBuf","gatherV2Impl","ifftConfig","IFFT","isFiniteConfig","isInfConfig","isNaNConfig","linSpaceConfig","LinSpace","num","linSpaceImpl","log1pConfig","logicalAndImpl","LogicalAnd","logicalAndConfig","LogicalNot","logicalNotConfig","logicalOrImpl","LogicalOr","logicalOrConfig","LRNConfig","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","LRNGradConfig","dySize","yValues","depthBegin","depthEnd","dyi","transposeImpl","maxOutShape","maxImpl","maxConfig","maxPoolConfig","maxPool3DConfig","maxPosBuf","maxPool3dPositions","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","maxPools","maxPoolWithArgmaxImpl","pooled","indexes","pooledDataId","indexesDataId","meanConfig","toDispose","reduceSizeScalar","minConfig","mirrorPadConfig","resultRank","resultStrides","coords","inIndex","modImpl","rem","modConfig","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","multinomialConfig","Multinomial","normalized","probabilities","numEvents","probVals","resShape","cdf","event","outOffset","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","selectedScores","oneHotConfig","indicesVal","realPart","imagPart","zerosLikeConfig","onesLikeConfig","pack","expandedT","packConfig","padV2Config","outCoords","powImpl","powConfig","raggedGatherConfig","RaggedGather","paramsNestedSplits","paramsDenseValues","outputRaggedRank","$paramsNestedSplits","$paramsNestedSplitsShapes","$paramsDenseValues","$indices","raggedGatherImpl","outputNestedSplits","outputDenseValues","outputDenseValuesShape","outputNestedSplitsTensors","splits","outputDenseValuesTensor","raggedRangeConfig","RaggedRange","starts","limits","deltas","$starts","$limits","$deltas","raggedRangeImpl","rtNestedSplitsData","rtDenseValuesData","raggedTensorToTensorConfig","RaggedTensorToTensor","defaultValue","rowPartitionTensors","rowPartitionTypes","$values","$defaultValue","$rowPartitionValues","rowPartitionValuesShapes","raggedTensorToTensorImpl","rangeConfig","Range","rangeImpl","reciprocalConfig","resizeBilinearConfig","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","outputOffset","sourceNearestRow","sourceNearestCol","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","$dims","outLoc","indexToLoc","inLoc","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","centerX","centerY","sinFactor","cosFactor","coordY","roundConfig","scatterNdConfig","ScatterNd","updates","numUpdates","outputSize","updatesBuf","scatterImpl","lowerBound","right","mid","upperBound","searchSortedConfig","SearchSorted","sortedSequence","side","sortedInputs","numInputs","sortedInputsSlice","searchSortedImpl","selectConfig","conditionRank","tValues","eValues","newValues","seluConfig","signConfig","sinConfig","sinhConfig","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","flattenShape","paddedXReshaped","transposeInputs","transposeAttrs","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","denseShape","$denseShape","sparseFillEmptyRowsImpl","outputIndices","outputIndicesShape","outputValues","emptyRowIndicator","reverseIndexMap","Uint8Array","sparseReshapeConfig","SparseReshape","inputIndices","$inputShape","$inputIndices","sparseReshapeImpl","newIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","sparseSegmentReductionImpl","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","sumDupeIndices","splitVConfig","splitSizes","sliceT","squareConfig","squaredDifferenceImpl","squaredDifferenceConfig","stepAttrs","stepConfig","stridedSliceConfig","StridedSlice","slice_util","finalShapeSparse","isIdentity","sliceDim0","isSimpleSlice","$begin","$end","$strides","sliced","stridedSliceImpl","stringNGramsConfig","StringNGrams","separator","nGramWidths","rightPad","padWidth","preserveShortSequences","dataSplits","$dataSplits","stringNGramsImpl","nGrams","nGramsSplits","stringSplitConfig","StringSplit","skipEmpty","delimiter","$delimiter","stringSplitImpl","stringToHashBucketFastConfig","StringToHashBucketFast","numBuckets","stringToHashBucketFastImpl","tanConfig","tanhConfig","tileConfig","tileImpl","topKConfig","TopK","topKImpl","allTopKVals","allTopKIndices","transformConfig","Transform","transforms","fillMode","inStrides","batchInStride","rowInStride","colInStride","outStrides","batchOutStride","rowOutStride","colOutStride","transformVals","subarray","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","inCoord","sz2","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","batchStride","rowStride","colStride","yFloor","xFloor","yCeil","xCeil","uniqueConfig","Unique","uniqueImpl","unpackConfig","valueRank","outIndex","tempRes","unsortedSegmentSumConfig","expanded","scalarValue","segmentId","maskCasted","sumTensorInfo","absConfig","addConfig","castConfig","ceilConfig","complexConfig","equalConfig","expConfig","expm1Config","floorConfig","greaterConfig","greaterEqualConfig","identityConfig","lessConfig","lessEqualConfig","logConfig","maximumConfig","minimumConfig","multiplyConfig","negConfig","notEqualConfig","prodConfig","realConfig","rsqrtConfig","sigmoidConfig","sliceConfig","sqrtConfig","subConfig","transposeConfig","kernelConfig","registerKernel","version_core","version_webgl"],"sourceRoot":""}