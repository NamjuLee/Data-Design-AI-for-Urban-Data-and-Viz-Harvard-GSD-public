{"version":3,"file":"static/js/5367.7f98f11c.chunk.js","mappings":"iTAGaA,EAAQ,0CAOjB,WAAYC,GAAY,IAAD,mBACnB,cAAMA,IANVC,OAAuB,GAAG,EAC1BC,UAAwB,GAAG,EAC3BC,OAAmB,GAAG,EACtBC,MAAkB,GAOd,EAAKC,KAAK,IAEV,IAAMC,EACO,UADPA,EAEM,UAFNA,EAGS,UAHTA,EAIQ,UAJRA,EAKS,UA6CZ,OAzCHC,EAAAA,EAAAA,gBAAeC,2FAA2DC,MAAK,SAACC,GAK5E,IAJA,IAAIC,EAAS,EACTC,EAAS,EACTC,EAAQ,EAEHC,EAAI,EAAIA,EAAIJ,EAAY,SAAEK,SAAUD,EAAG,CAC5C,IAAME,EAAMN,EAAY,SAAEI,GAAa,SAAe,YAEtD,EAAKZ,UAAUe,KAAKD,GACpBL,GAAUK,EAAI,GACdJ,GAAUI,EAAI,GACdH,IAEA,EAAKT,MAAMa,KAAKP,EAAY,SAAEI,GAAe,WAAQ,MAErD,IAAMI,EAAiBR,EAAY,SAAEI,GAAe,WAAS,MAE7D,GAAII,EAAKC,SAAS,QACd,EAAKhB,OAAOc,KAAKX,OACd,IAAIY,EAAKC,SAAS,OAAQ,CAC7B,EAAKhB,OAAOc,KAAKX,GAAuB,QAC5C,CAAO,GAAIY,EAAKC,SAAS,UAAW,CAChC,EAAKhB,OAAOc,KAAKX,GAA0B,QAC/C,CAAO,GAAIY,EAAKC,SAAS,SAAU,CAC/B,EAAKhB,OAAOc,KAAKX,GAAyB,QAC9C,CACI,EAAKH,OAAOc,KAAKX,EACrB,CAEJ,CACA,EAAKc,OAAOT,EAASE,EAAOD,EAASC,IAGrCN,EAAAA,EAAAA,gBAAe,qFAAqFE,MAAK,SAACY,GACtG,IAAK,IAAIP,EAAI,EAAIA,EAAIO,EAAe,SAAEN,SAAUD,EAC5C,EAAKb,OAAOgB,KAAKI,EAAe,SAAEP,GAAa,SAAe,aAGlEQ,QAAQC,IAAI,EAAKtB,QACjB,EAAKuB,OACT,GACJ,IAAG,CAEP,CAiCC,OAjCA,8BACD,SAAcC,GAIV,IAAK,IAAIX,EAAI,EAAGA,EAAIY,KAAKzB,OAAOc,SAAUD,EAGtC,IAFA,IAAMa,EAAQD,KAAKzB,OAAOa,GAEjBc,EAAI,EAAGA,EAAID,EAAMZ,SAAUa,EAAG,CAEnC,IAAIC,EAAYH,KAAKI,SAASH,EAAMC,GAAG,GAAG,GAAID,EAAMC,GAAG,GAAG,IACpDG,EAAO,IAAIC,OACjBD,EAAKE,OAAOJ,EAAU,GAAIA,EAAU,IAEpC,IAAK,IAAIK,EAAI,EAAGA,EAAIP,EAAMC,GAAGb,SAAUmB,EACnCL,EAAYH,KAAKI,SAASH,EAAMC,GAAGM,GAAG,GAAIP,EAAMC,GAAGM,GAAG,IACtDH,EAAKI,OAAON,EAAU,GAAIA,EAAU,IAGxCJ,EAAIW,UAAaC,KAAKC,IAAgB,IAAZZ,KAAKa,MAAc,KAC7Cd,EAAIe,OAAOT,EACf,CAGJ,IAAK,IAAIjB,EAAI,EAAGA,EAAIY,KAAKxB,UAAUa,SAAUD,EAAG,CAC5C,IAAMe,EAAYH,KAAKI,SAASJ,KAAKxB,UAAUY,GAAG,GAAIY,KAAKxB,UAAUY,GAAG,IAExE2B,EAAYhB,EAAKI,EAAU,GAAIA,EAAU,GAAIH,KAAKa,KAAMb,KAAKvB,OAAOW,IACpE4B,EAAWjB,EAAKI,EAAU,GAAIA,EAAU,GAAIH,KAAKtB,MAAMU,GAAIY,KAAKvB,OAAOW,GAC3E,CAIJ,KAAC,EAnGgB,CAAS6B,EAAAA,eAqGxBF,EAAc,SAAChB,EAA+BmB,EAAWC,EAAWC,EAAWC,GACjFtB,EAAIuB,UAAYD,EAChBtB,EAAIwB,YAAc,OAClBxB,EAAIW,UAAY,IAChBX,EAAIyB,YACJzB,EAAI0B,IAAIP,EAAGC,EAA6B,GAAzBR,KAAKC,IAAQ,GAAJQ,GAAW,GAAQ,EAAa,EAAVT,KAAKe,IACnD3B,EAAI4B,YACJ5B,EAAI6B,OACJ7B,EAAIe,QACR,EACME,EAAa,SAACjB,EAA+BmB,EAAWC,EAAWU,EAAcR,GACnFtB,EAAIwB,YAAcF,EAClBtB,EAAIW,UAAY,GAChBX,EAAI+B,WAAWD,EAAMX,EAAI,GAAIC,EACjC,C","sources":["PART_10_Web_Visualization_Digital_Mapping_Analysis/04_JSON/MultiLineString.ts"],"sourcesContent":["import { RendererJSAPI } from '../../lib'\r\nimport { getJSONFromURL } from 'njscore';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    routes: number[][][] = [];\r\n    locations: number[][] = [];\r\n    colors: string[] = [];\r\n    names: string[] = [];\r\n\r\n    constructor(view: any) {\r\n        super(view);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.zoom(12);\r\n\r\n        const colorsTempate = {\r\n            'blue' : \"#0683d2\",\r\n            'red' : \"#ec2f3d\",\r\n            'orange' : \"#ff961e\",\r\n            'green' : \"#049564\",\r\n            'silver' : \"#959597\",\r\n        }\r\n\r\n        \r\n        getJSONFromURL(process.env.PUBLIC_URL + '/static/data/MBTA_stop.geojson').then((d) => {\r\n            let lonSum = 0;\r\n            let latSum = 0;\r\n            let count = 0;\r\n\r\n            for (let i = 0 ; i < d['features'].length; ++i) {\r\n                const loc = d['features'][i]['geometry']['coordinates'];\r\n\r\n                this.locations.push(loc);\r\n                lonSum += loc[0];\r\n                latSum += loc[1];\r\n                count++;\r\n\r\n                this.names.push(d['features'][i]['properties']['name']);\r\n\r\n                const line: string[] = d['features'][i]['properties']['lines'];\r\n\r\n                if (line.includes('blue')) {\r\n                    this.colors.push(colorsTempate['blue']);\r\n                } else if (line.includes('red')) {\r\n                    this.colors.push(colorsTempate['red']); continue;\r\n                } else if (line.includes('orange')) {\r\n                    this.colors.push(colorsTempate['orange']); continue;\r\n                } else if (line.includes('green')) {\r\n                    this.colors.push(colorsTempate['green']); continue;\r\n                } else {\r\n                    this.colors.push(colorsTempate['silver']);\r\n                }\r\n\r\n            }\r\n            this.center(lonSum / count, latSum / count);\r\n\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Boston/MBTA_routes.geojson').then((data) => {\r\n                for (let i = 0 ; i < data['features'].length; ++i) {\r\n                    this.routes.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n\r\n                console.log(this.routes)\r\n                this.start();\r\n            });\r\n        });\r\n        \r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n        for (let i = 0; i < this.routes.length; ++i) { \r\n            const route = this.routes[i]\r\n            \r\n            for (let j = 0; j < route.length; ++j) { \r\n\r\n                let projected = this.toScreen(route[j][0][0], route[j][0][1]); \r\n                const path = new Path2D();\r\n                path.moveTo(projected[0], projected[1]);\r\n\r\n                for (let k = 1; k < route[j].length; ++k) { \r\n                    projected = this.toScreen(route[j][k][0], route[j][k][1]); \r\n                    path.lineTo(projected[0], projected[1]);\r\n                }\r\n\r\n                ctx.lineWidth =  Math.sin(this.time * 1.5) + 1.15;\r\n                ctx.stroke(path);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.locations.length; ++i) { \r\n            const projected = this.toScreen(this.locations[i][0], this.locations[i][1]); \r\n            // console.log('2', projected)\r\n            renderPoint(ctx, projected[0], projected[1], this.time, this.colors[i]);\r\n            renderText(ctx, projected[0], projected[1], this.names[i], this.colors[i]);\r\n        }\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n}\r\nconst renderPoint = (ctx: CanvasRenderingContext2D, x: number, y: number, t: number, color: string) => {\r\n    ctx.fillStyle = color;\r\n    ctx.strokeStyle = '#fff';\r\n    ctx.lineWidth = 0.75;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, (Math.sin(t * 0.8) + 4) * 2, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.stroke();\r\n};\r\nconst renderText = (ctx: CanvasRenderingContext2D, x: number, y: number, name: string, color: string) => {\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = 0.5;\r\n    ctx.strokeText(name, x + 13, y);\r\n};\r\n\r\n\r\n"],"names":["Solution","view","routes","locations","colors","names","zoom","colorsTempate","getJSONFromURL","process","then","d","lonSum","latSum","count","i","length","loc","push","line","includes","center","data","console","log","start","ctx","this","route","j","projected","toScreen","path","Path2D","moveTo","k","lineTo","lineWidth","Math","sin","time","stroke","renderPoint","renderText","RendererJSAPI","x","y","t","color","fillStyle","strokeStyle","beginPath","arc","PI","closePath","fill","name","strokeText"],"sourceRoot":""}