{"version":3,"file":"static/js/3415.c2f8d81f.chunk.js","mappings":"oSAKaA,EAAQ,WAIjB,WAAYC,IAAa,eAErBC,QAAQC,IAAI,wBACZD,QAAQC,IAAI,kCAIZ,IAAMC,EAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GACjBC,EAAI,CAAC,EAAG,EAAG,GAAI,GAAI,IAEnBC,EAAQ,IAAIC,EAAAA,iBAClBD,EAAME,IAAIJ,EAAGC,GACb,IAAMI,EAASH,EAAMI,QAAQ,CAAC,MAC9BR,QAAQC,IAAIM,EAAQH,EAAMK,OAAQL,EAAMM,MAGxC,IAAMC,EAAU,IAAIC,EAAAA,gCACpBD,EAAQL,IAAIJ,EAAGC,EAAG,KAClB,IAAMU,EAAWF,EAAQH,QAAQ,CAAC,MAClCR,QAAQC,IAAIY,EAAUF,EAAQF,OAAQE,EAAQD,MAY9CI,EALU,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GAER,CAAC,IAKbd,QAAQC,IAAI,mBAChB,CApCC,OAoCA,+BAtCD,WAEA,KAAC,EAHgB,GA2Efa,EAAmB,SAACC,EAAaC,EAAaC,GAChD,IAAMC,EAAK,IAAIb,EAAAA,iBACfa,EAAGZ,IAAIS,EAAGC,GAEV,IAAMT,EAASW,EAAGV,QAAQS,GAC1BjB,QAAQC,IAAIM,GAMZP,QAAQC,KAAIkB,EAAAA,EAAAA,UAASJ,EAAGC,EAAGE,EAAGR,MAClC,C","sources":["PART_06_Problem_Data_Model_Train_Validation/LAB_Web_02_ModelLinearRegression/index.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\nimport '@tensorflow/tfjs-backend-webgl';\r\n\r\nimport { LinearRegression, LinearRegressionGradientDescent, rSquared } from '../../lib';\r\n\r\nexport class Solution {\r\n    public destroy() {\r\n        \r\n    }\r\n    constructor(id: string) {\r\n    //  https://js.tensorflow.org/api/latest/\r\n        console.log(\"Let's learn TF JS !!\");\r\n        console.log(\"==============================\");\r\n\r\n\r\n\r\n        const x = [1, 2, 3, 4, 5];\r\n        const y = [0, 5, 10, 15, 20];\r\n\r\n        const model = new LinearRegression()\r\n        model.fit(x, y);\r\n        const result = model.predict([2.5]);\r\n        console.log(result, model.weight, model.bias);\r\n\r\n\r\n        const modelGD = new LinearRegressionGradientDescent()\r\n        modelGD.fit(x, y, 500);\r\n        const resultGD = modelGD.predict([2.5]);\r\n        console.log(resultGD, modelGD.weight, modelGD.bias);\r\n\r\n\r\n\r\n\r\n\r\n\r\n        const X = [1, 2, 3, 4];\r\n        const Y = [1, 3, 5, 7];\r\n\r\n        const val = [3]\r\n \r\n        linearRegression(X, Y, val);\r\n        // linearRegressionTF(X, Y, val);\r\n\r\n        console.log('Playground done!');\r\n    }\r\n};\r\n\r\nconst linearRegressionTF = (X: number[], Y: number[], val: number[]) => {\r\n    // Define a model for linear regression.\r\n    const model = tf.sequential();\r\n    model.add(tf.layers.dense({units: 1, inputShape: [1]}));\r\n\r\n    // Prepare the model for training: Specify the loss and the optimizer.\r\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\r\n\r\n    // Generate some synthetic data for training.\r\n    const x_train = tf.tensor2d(X, [4, 1]);\r\n    const y_train = tf.tensor2d(Y, [4, 1]);\r\n\r\n    x_train.print();\r\n    y_train.print();\r\n\r\n    const x_val = tf.tensor2d([3], [1, 1])\r\n    console.log('prediction of ', x_val.toString() , 'is ...'); \r\n\r\n    // Train the model using the data.\r\n    model.fit(x_train, y_train, { epochs: 100 }).then(() => {\r\n        // Use the model to do inference on a data point the model hasn't seen before:\r\n        // Open the browser devtools to see the output\r\n        (model.predict(x_val) as any).print();\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n\r\n};\r\n\r\n\r\nconst linearRegression = (X: number[], Y: number[], val: number[]) => {\r\n    const lr = new LinearRegression();\r\n    lr.fit(X, Y);\r\n\r\n    const result = lr.predict(val);\r\n    console.log(result);\r\n\r\n    // x = [5, 7, 8, 7, 2, 17, 2, 9, 4, 11, 12, 9, 6]\r\n    // y = [99, 86, 87, 88, 111, 86, 103, 87, 94, 78, 77, 85, 86]\r\n\r\n    // 다시 봐라 이거 맞는지 확인\r\n    console.log(rSquared(X, Y, lr.bias));\r\n}\r\n\r\n/*\r\nReference:\r\nhttps://www.tensorflow.org/js\r\nhttps://www.tensorflow.org/js/tutorials\r\nhttps://www.tensorflow.org/js/models\r\nhttps://js.tensorflow.org/api/latest/\r\n\r\n\r\n*/"],"names":["Solution","id","console","log","x","y","model","LinearRegression","fit","result","predict","weight","bias","modelGD","LinearRegressionGradientDescent","resultGD","linearRegression","X","Y","val","lr","rSquared"],"sourceRoot":""}