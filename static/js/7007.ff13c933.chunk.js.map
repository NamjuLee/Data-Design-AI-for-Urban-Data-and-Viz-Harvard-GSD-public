{"version":3,"file":"static/js/7007.ff13c933.chunk.js","mappings":"iTAGaA,EAAQ,0CAMjB,WAAYC,GAAY,IAAD,mBACnB,cAAMA,IALVC,UAAwB,GAAG,EAC3BC,OAAmB,GAAG,EACtBC,MAAkB,GAOd,IAAMC,EACO,UADPA,EAEM,UAFNA,EAGS,UAHTA,EAIQ,UAJRA,EAKS,UAqCZ,OAjCHC,EAAAA,EAAAA,gBAAeC,2FAA2DC,MAAK,SAACC,GAK5E,IAJA,IAAIC,EAAS,EACTC,EAAS,EACTC,EAAQ,EAEHC,EAAI,EAAIA,EAAIJ,EAAY,SAAEK,SAAUD,EAAG,CAC5C,IAAME,EAAMN,EAAY,SAAEI,GAAa,SAAe,YAEtD,EAAKX,UAAUc,KAAKD,GACpBL,GAAUK,EAAI,GACdJ,GAAUI,EAAI,GACdH,IAEA,EAAKR,MAAMY,KAAKP,EAAY,SAAEI,GAAe,WAAQ,MAErD,IAAMI,EAAiBR,EAAY,SAAEI,GAAe,WAAS,MAE7D,GAAII,EAAKC,SAAS,QACd,EAAKf,OAAOa,KAAKX,OACd,IAAIY,EAAKC,SAAS,OAAQ,CAC7B,EAAKf,OAAOa,KAAKX,GAAuB,QAC5C,CAAO,GAAIY,EAAKC,SAAS,UAAW,CAChC,EAAKf,OAAOa,KAAKX,GAA0B,QAC/C,CAAO,GAAIY,EAAKC,SAAS,SAAU,CAC/B,EAAKf,OAAOa,KAAKX,GAAyB,QAC9C,CACI,EAAKF,OAAOa,KAAKX,EACrB,CAEJ,CACA,EAAKc,OAAOT,EAASE,EAAOD,EAASC,GAErC,EAAKQ,OACT,IAAG,CACP,CAaC,OAbA,8BACD,SAAcC,GAIV,IAAK,IAAIR,EAAI,EAAGA,EAAIS,KAAKpB,UAAUY,SAAUD,EAAG,CAC5C,IAAMU,EAAYD,KAAKE,SAASF,KAAKpB,UAAUW,GAAG,GAAIS,KAAKpB,UAAUW,GAAG,IACxEY,EAAYJ,EAAKE,EAAU,GAAIA,EAAU,GAAID,KAAKI,KAAMJ,KAAKnB,OAAOU,IACpEc,EAAWN,EAAKE,EAAU,GAAIA,EAAU,GAAID,KAAKlB,MAAMS,GAAIS,KAAKnB,OAAOU,GAC3E,CAIJ,KAAC,EAnEgB,CAASe,EAAAA,eAqExBH,EAAc,SAACJ,EAA+BQ,EAAWC,EAAWC,EAAWC,GACjFX,EAAIY,UAAYD,EAChBX,EAAIa,YAAc,OAClBb,EAAIc,UAAY,IAChBd,EAAIe,YACJf,EAAIgB,IAAIR,EAAGC,EAA6B,GAAzBQ,KAAKC,IAAQ,GAAJR,GAAW,GAAQ,EAAa,EAAVO,KAAKE,IACnDnB,EAAIoB,YACJpB,EAAIqB,OACJrB,EAAIsB,QACR,EACMhB,EAAa,SAACN,EAA+BQ,EAAWC,EAAWc,EAAcZ,GACnFX,EAAIa,YAAcF,EAClBX,EAAIc,UAAY,GAChBd,EAAIwB,WAAWD,EAAMf,EAAI,GAAIC,EACjC,C","sources":["PART_10_Web_Visualization_Digital_Mapping_Analysis/09_JSON/index.ts"],"sourcesContent":["import { RendererJSAPI } from '../../lib'\r\nimport { getJSONFromURL } from 'njscore';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    locations: number[][] = [];\r\n    colors: string[] = [];\r\n    names: string[] = [];\r\n\r\n    constructor(view: any) {\r\n        super(view);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        const colorsTempate = {\r\n            'blue' : \"#0683d2\",\r\n            'red' : \"#ec2f3d\",\r\n            'orange' : \"#ff961e\",\r\n            'green' : \"#049564\",\r\n            'silver' : \"#959597\",\r\n        }\r\n\r\n        \r\n        getJSONFromURL(process.env.PUBLIC_URL + '/static/data/MBTA_stop.geojson').then((d) => {\r\n            let lonSum = 0;\r\n            let latSum = 0;\r\n            let count = 0;\r\n\r\n            for (let i = 0 ; i < d['features'].length; ++i) {\r\n                const loc = d['features'][i]['geometry']['coordinates'];\r\n\r\n                this.locations.push(loc);\r\n                lonSum += loc[0];\r\n                latSum += loc[1];\r\n                count++;\r\n\r\n                this.names.push(d['features'][i]['properties']['name']);\r\n\r\n                const line: string[] = d['features'][i]['properties']['lines'];\r\n\r\n                if (line.includes('blue')) {\r\n                    this.colors.push(colorsTempate['blue']);\r\n                } else if (line.includes('red')) {\r\n                    this.colors.push(colorsTempate['red']); continue;\r\n                } else if (line.includes('orange')) {\r\n                    this.colors.push(colorsTempate['orange']); continue;\r\n                } else if (line.includes('green')) {\r\n                    this.colors.push(colorsTempate['green']); continue;\r\n                } else {\r\n                    this.colors.push(colorsTempate['silver']);\r\n                }\r\n\r\n            }\r\n            this.center(lonSum / count, latSum / count);\r\n\r\n            this.start();\r\n        });\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n        for (let i = 0; i < this.locations.length; ++i) { \r\n            const projected = this.toScreen(this.locations[i][0], this.locations[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time, this.colors[i]);\r\n            renderText(ctx, projected[0], projected[1], this.names[i], this.colors[i]);\r\n        }\r\n\r\n        // // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n}\r\nconst renderPoint = (ctx: CanvasRenderingContext2D, x: number, y: number, t: number, color: string) => {\r\n    ctx.fillStyle = color;\r\n    ctx.strokeStyle = '#fff';\r\n    ctx.lineWidth = 0.75;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, (Math.sin(t * 0.8) + 4) * 2, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.stroke();\r\n};\r\nconst renderText = (ctx: CanvasRenderingContext2D, x: number, y: number, name: string, color: string) => {\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = 0.5;\r\n    ctx.strokeText(name, x + 13, y);\r\n};\r\n\r\n\r\n"],"names":["Solution","view","locations","colors","names","colorsTempate","getJSONFromURL","process","then","d","lonSum","latSum","count","i","length","loc","push","line","includes","center","start","ctx","this","projected","toScreen","renderPoint","time","renderText","RendererJSAPI","x","y","t","color","fillStyle","strokeStyle","lineWidth","beginPath","arc","Math","sin","PI","closePath","fill","stroke","name","strokeText"],"sourceRoot":""}