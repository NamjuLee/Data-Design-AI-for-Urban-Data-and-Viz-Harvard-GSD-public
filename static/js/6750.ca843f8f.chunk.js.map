{"version":3,"file":"static/js/6750.ca843f8f.chunk.js","mappings":"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","sources":["PART_11_Web_Visualization_3D_for_GIS/Slowzone_Polygon/index.ts","PART_11_Web_Visualization_3D_for_GIS/Slowzone_Polyline/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree } from '../../lib';\r\nimport { getJSONFromURL, MercatorProjection } from 'njscore';\r\nimport { renderLines } from '../Slowzone_Polyline';\r\n\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n\r\n        const canvasGL = document.createElement('canvas');\r\n        canvasGL.style.position = 'absolute';\r\n        canvasGL.style.pointerEvents = 'none';\r\n        canvasGL.style.mixBlendMode = 'darken';\r\n        canvasGL.width = this.hostDiv.clientWidth;\r\n        canvasGL.height = this.hostDiv.clientHeight;\r\n        this.hostDiv.appendChild(canvasGL);\r\n        const glCtx = canvasGL.getContext('webgl');\r\n\r\n\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        const path = '/static/research/slow-zone/';\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            renderLines(this.scene, this.streetOSM, [0.3, 0.3, 0.3]);\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/zones-30.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.zones30.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderMultiPolygon(this.scene, this.zones30, [0, 1, 0]);\r\n\r\n            });\r\n\r\n            this.start();\r\n        });\r\n    }\r\n}\r\nconst renderMultiPolygon = (scene: THREE.Scene, paths: any, colorArray: number[]) => {\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    const positions = [];\r\n\r\n    for (let multi = 0; multi < paths.length; ++multi) {\r\n        const multiPolygon = paths[multi];\r\n\r\n        for (let polyI = 0; polyI < multiPolygon.length; ++polyI) {\r\n            const polygon = multiPolygon[polyI];\r\n\r\n\r\n            if (polygon.length === 1) {\r\n                const thePolygon = polygon[0];\r\n\r\n                const shape = [];\r\n\r\n                for (let i = 0; i < thePolygon.length; ++i) {\r\n\r\n                    const [xPro, yPro] = MercatorProjection(thePolygon[i][0], thePolygon[i][1]);\r\n\r\n                    const x = (xPro + xOFf) * scale\r\n                    const y = (yPro + yOFf) * scale\r\n                    // console.log(x, y)\r\n                    positions.push(x, 0, y)\r\n\r\n                    shape.push(new THREE.Vector2(x, y));\r\n                }\r\n\r\n                let geometry = new THREE.ShapeGeometry(new THREE.Shape(shape));\r\n                let mat = new THREE.MeshBasicMaterial({\r\n                    side: THREE.DoubleSide, color: 0x00ff00,\r\n                    transparent: true,\r\n                    opacity: 0.3\r\n                });\r\n                let mesh = new THREE.Mesh(geometry, mat);\r\n                scene.add(mesh);\r\n                mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n\r\n            }\r\n        }\r\n    }\r\n};","import * as THREE from 'three';\r\nimport { RendererThree, } from '../../lib';\r\nimport { getJSONFromURL, MercatorProjection, } from 'njscore';\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n  \r\n\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        const path = '/static/research/slow-zone/';\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            renderLines(this.scene, this.streetOSM, [0, 1, 1]);\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/treated-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesTreated, [1, 0, 0]);\r\n            });\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/control-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesControl.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesControl, [0, 1, 0]);\r\n            });\r\n\r\n            this.start();\r\n        });\r\n    }\r\n}\r\nexport const renderLines = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const material = new THREE.LineBasicMaterial({ vertexColors: true });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n    const indices = [];\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    let xC = 0\r\n    let yC = 0\r\n    let Count = 0\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n                xC += xPro;\r\n                yC += yPro;\r\n                Count += 1;\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                positions.push(x, 0, y)\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n                if (k < route[j].length - 1) {\r\n                    indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    geometry.setIndex(indices);\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    geometry.computeBoundingSphere();\r\n    const line = new THREE.LineSegments(geometry, material);\r\n    scene.add(line);\r\n    return line;\r\n};"],"names":["Solution","id","streetOSM","routesTreated","routesControl","zones30","light","THREE","camera","add","scene","canvasGL","document","createElement","style","position","pointerEvents","mixBlendMode","width","hostDiv","clientWidth","height","clientHeight","appendChild","getContext","set","getJSONFromURL","then","data","i","length","push","renderLines","renderMultiPolygon","start","RendererThree","paths","colorArray","positions","multi","multiPolygon","polyI","polygon","thePolygon","shape","MercatorProjection","x","y","geometry","mat","side","color","transparent","opacity","mesh","rotateOnAxis","Math","PI","material","vertexColors","colors","indices","route","j","k","xPro","yPro","floor","setIndex","setAttribute","computeBoundingSphere","line"],"sourceRoot":""}