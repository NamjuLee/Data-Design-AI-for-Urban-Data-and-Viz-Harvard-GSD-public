{"version":3,"file":"static/js/2305.8ff620b6.chunk.js","mappings":"iTAGaA,EAAQ,0CAIjB,aAAkC,IAAD,EAArBC,EAAU,uDAAG,OAgDlB,OAhDwB,gBAC3B,cAAMA,IAHVC,gBAAU,EAKN,EAAKC,OAAOC,SAASC,IAAI,EAAG,GAAI,KAEhCC,EAAAA,EAAAA,eAAc,4GAA4GC,MAAK,SAACC,GAO5H,IANA,IAAMC,EAAQD,EAAEE,MAAM,eAEhBC,EAAK,GACLC,EAAU,GACVC,EAAS,GAENC,EAAI,EAAGA,EAAIL,EAAMM,SAAUD,EAAG,CACnC,IAAME,EAAOP,EAAMK,GAAGJ,MAAM,KAGZ,MAAZM,EAAK,IACLL,EAAGM,MAAMD,EAAK,IAAMA,EAAK,IAAMA,EAAK,IAGxB,OAAZA,EAAK,IACLH,EAAOI,MAAMD,EAAK,GAAK,KAAMA,EAAK,GAAK,KAAMA,EAAK,GAAI,KAG1C,MAAZA,EAAK,KACLJ,EAAQK,MAAMD,EAAK,IAAKA,EAAK,IAAKA,EAAK,IACvCJ,EAAQK,MAAMD,EAAK,IAAKA,EAAK,IAAKA,EAAK,IAG/C,CACA,IAAME,EAAW,IAAIC,EAAAA,IAAwB,CACzCC,KAAMD,EAAAA,IACNE,cAAc,IAIZC,EAAW,IAAIH,EAAAA,IACrBG,EAASC,SAASX,GAClBU,EAASE,aAAa,WAAY,IAAIL,EAAAA,IAA6BR,EAAI,IACvEW,EAASE,aAAa,QAAS,IAAIL,EAAAA,IAA6BN,EAAQ,IAGxES,EAASG,wBACTH,EAASI,uBACT,IAAMC,EAAO,IAAIR,EAAAA,IAAWG,EAAUJ,GACtC,EAAKU,MAAMC,IAAIF,GAEf,EAAKG,OACT,IAAG,CAEP,CAAC,iBAtDgB,CAASC,EAAAA,c","sources":["PART_11_Web_Visualization_3D_for_GIS/LAB_Web_10_Mesh-Vertex-Color/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree, getCSVFromURL } from '../../lib';\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    pointLight: THREE.PointLight\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        this.camera.position.set(0, 50, 50);\r\n\r\n        getCSVFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/geometry/CFDSimulationOBJ/CFDSimulationCustom.obj').then((d) => {\r\n            const lines = d.split(/\\r\\n|\\r|\\n/g);\r\n\r\n            const vs = []\r\n            const indices = [];\r\n            const colors = []\r\n\r\n            for (let i = 0; i < lines.length; ++i) {\r\n                const line = lines[i].split(' ');\r\n                \r\n         \r\n                if (line[0] === 'v') {\r\n                    vs.push(+line[1] , +line[3] , +line[2] )\r\n                }\r\n                \r\n                if (line[0] === 'vc') {\r\n                    colors.push(+line[1] / 255, +line[2] / 255, +line[3]/ 255)\r\n                }\r\n\r\n                if (line[0] === 'f') {\r\n                    indices.push(+line[1], +line[2], +line[3])\r\n                    indices.push(+line[1], +line[3], +line[4])\r\n\r\n                }\r\n            }\r\n            const material = new THREE.MeshBasicMaterial({\r\n                side: THREE.DoubleSide,\r\n                vertexColors: true,\r\n                // wireframe: true,\r\n            });\r\n            \r\n            const geometry = new THREE.BufferGeometry();\r\n            geometry.setIndex(indices );\r\n            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vs, 3));\r\n            geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n\r\n            \r\n            geometry.computeBoundingSphere();\r\n            geometry.computeVertexNormals();\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            this.scene.add(mesh);\r\n\r\n            this.start();\r\n        });\r\n\r\n    }\r\n}\r\n"],"names":["Solution","id","pointLight","camera","position","set","getCSVFromURL","then","d","lines","split","vs","indices","colors","i","length","line","push","material","THREE","side","vertexColors","geometry","setIndex","setAttribute","computeBoundingSphere","computeVertexNormals","mesh","scene","add","start","RendererThree"],"sourceRoot":""}