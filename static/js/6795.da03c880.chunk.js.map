{"version":3,"file":"static/js/6795.da03c880.chunk.js","mappings":"oUAEaA,EAAQ,WAGjB,WAAYC,IAAe,oBAFpBA,aAAO,OACPC,cAAQ,EAEXC,KAAKF,QAAUA,EAGfE,KAAKF,QAAQG,MAAMC,QAAU,OAC7BF,KAAKF,QAAQG,MAAME,WAAa,SAEhC,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIH,MAAMM,WAAa,OACvBH,EAAIH,MAAMO,YAAc,OACxBJ,EAAIH,MAAMQ,gBAAkB,OAC5BL,EAAIH,MAAMS,MAAQ,QAClBN,EAAIH,MAAMU,OAAS,QAEnBX,KAAKF,QAAQc,YAAYR,GAKzBJ,KAAKD,SAAW,IAAIc,EAAST,EAIjC,CAMC,OANA,+BACD,WAEI,IADAJ,KAAKD,SAASe,UACPd,KAAKF,QAAQiB,kBAChBf,KAAKF,QAAQkB,YAAYhB,KAAKF,QAAQiB,iBAE9C,KAAC,EAhCgB,GAmCRF,EAAQ,0CAGjB,WAAYT,GAAW,IAAD,mBAClB,cAAMA,IAHVa,SAAoCC,EAAS,EAC7CC,SAAW,GAMPC,EAAAA,EAAAA,eAAc,+FAA+FC,MAAM,SAACJ,GAChHK,QAAQC,IAAIN,GACZ,EAAKA,IAAMA,CAYf,IAEA,IAAMO,EAAYnB,SAASC,cAAc,OAoBL,OAnBpCkB,EAAUC,YAAc,SAExBD,EAAUE,QAAU,WAChBJ,QAAQC,IAAI,MAEA,EAAKI,QAAQC,YAAc,EAAKD,QAAQE,aAAe,EAAKF,QAAQC,YAAc,EAAKD,QAAQE,aAA3G,IAEMnB,EAAQ,EAAKiB,QAAQ1B,MAAMS,MACjC,EAAKiB,QAAQ1B,MAAMS,MAAQ,EAAKiB,QAAQ1B,MAAMU,OAC9C,EAAKgB,QAAQ1B,MAAMU,OAASD,EAE5B,EAAKoB,OAAOpB,MAAQ,EAAKiB,QAAQC,YACjC,EAAKE,OAAOnB,OAAS,EAAKgB,QAAQE,aAElC,EAAKV,UAAsB,GAAVY,KAAKC,EAC1B,EAIA,EAAKL,QAAQf,YAAYY,GAAW,CAGxC,CAwCC,OAxCA,8BACD,SAAcS,GAGVjC,KAAKiC,IAAIC,OACTlC,KAAKiC,IAAIE,UAA8B,GAApBnC,KAAK8B,OAAOpB,MAAkC,GAArBV,KAAK8B,OAAOnB,QACxDX,KAAKiC,IAAIG,OAAOpC,KAAKmB,UAClBnB,KAAKiB,KACJjB,KAAKiC,IAAII,UAAUrC,KAAKiB,IAAuB,IAAjBjB,KAAKiB,IAAIP,MAAgC,IAAlBV,KAAKiB,IAAIN,QAIlEsB,EAAIK,YACJL,EAAIM,IAAI,EAAG,EAAG,GAAI,EAAa,EAAVR,KAAKC,IAC1BC,EAAIO,YACJP,EAAIQ,OAEJnB,QAAQC,IAAIU,GAEZjC,KAAKiC,IAAIS,SAGb,GAAC,uBACD,SAAiBC,EAAWC,GACxB,GACH,qBACD,SAAeD,EAAWC,GACtB,GACH,uBACD,SAAiBD,EAAWC,GACxB,GACH,wBACD,SAAkBD,EAAWC,GACzB,GACH,uBACD,SAAiBD,EAAWC,GACxB,GACH,qBACD,SAAeC,GACX,KACH,EAvFgB,CAASC,EAAAA,e","sources":["PART_9_LAB_Visualization_Analysis/Lab/16-1_CanvasTransformation/index.ts"],"sourcesContent":["import { RendererCanvas, getImgFromURL } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(divHost: any) {\r\n        this.divHost = divHost; \r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '600px';\r\n        div.style.height = '350px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n    img: HTMLImageElement | undefined = undefined\r\n    rotation = 0.0;\r\n    constructor(div: any) {\r\n        super(div);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        getImgFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/img/bg/zoom-James-River-Kayaking.jpg').then( (img: HTMLImageElement) => {\r\n            console.log(img)\r\n            this.img = img;\r\n            // this.hostDiv.style.width = img.width + 'px';\r\n            // this.hostDiv.style.height = img.height + 'px';\r\n\r\n            // this.ctx.canvas.width = img.width;\r\n            // this.ctx.canvas.height = img.height;\r\n            // this.ctx.beginPath();\r\n            // this.ctx.arc(100, 100, 150, 0, Math.PI * 2);\r\n            // this.ctx.closePath();\r\n            // this.ctx.fill()\r\n            // this.ctx.drawImage(img, 0, 0);\r\n            // this.hostDiv.appendChild(img)\r\n        });\r\n\r\n        const divRotate = document.createElement('div');\r\n        divRotate.textContent = 'rotate';\r\n\r\n        divRotate.onclick = () => {\r\n            console.log('ro');\r\n\r\n            const max = this.hostDiv.clientWidth > this.hostDiv.clientHeight ? this.hostDiv.clientWidth : this.hostDiv.clientHeight;\r\n\r\n            const width = this.hostDiv.style.width;\r\n            this.hostDiv.style.width = this.hostDiv.style.height\r\n            this.hostDiv.style.height = width;\r\n\r\n            this.canvas.width = this.hostDiv.clientWidth;\r\n            this.canvas.height = this.hostDiv.clientHeight;\r\n\r\n            this.rotation += Math.PI * 0.5;\r\n        }\r\n\r\n        \r\n\r\n        this.hostDiv.appendChild(divRotate);\r\n\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n        this.ctx.save();\r\n        this.ctx.translate(this.canvas.width * 0.5, this.canvas.height * 0.5)\r\n        this.ctx.rotate(this.rotation)\r\n        if(this.img) {\r\n            this.ctx.drawImage(this.img, -this.img.width * 0.5, -this.img.height * 0.5);\r\n        }\r\n\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, 50, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill()\r\n\r\n        console.log(ctx)\r\n\r\n        this.ctx.restore();\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent): void {\r\n        // TODO\r\n    }\r\n}"],"names":["Solution","divHost","renderer","this","style","display","alignItems","div","document","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","destroy","lastElementChild","removeChild","img","undefined","rotation","getImgFromURL","then","console","log","divRotate","textContent","onclick","hostDiv","clientWidth","clientHeight","canvas","Math","PI","ctx","save","translate","rotate","drawImage","beginPath","arc","closePath","fill","restore","x","y","k","RendererCanvas"],"sourceRoot":""}