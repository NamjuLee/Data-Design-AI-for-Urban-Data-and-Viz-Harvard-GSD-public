{"version":3,"file":"static/js/6838.186ce61b.chunk.js","mappings":"sSAIaA,EAAQ,0CAIjB,aAAkC,IAAD,EAArBC,EAAU,uDAAG,QAAM,gBAC3B,cAAMA,IAHVC,gBAAU,EAIN,IAAMC,EAAQ,EAAKA,MAEnB,EAAKC,OAAOC,SAASC,IAAI,EAAG,GAAI,IAEhC,IAAMC,EAAe,IAAIC,EAAAA,IAAmB,SAAU,KACtD,EAAKL,MAAMM,IAAIF,GAEf,EAAKL,WAAa,IAAIM,EAAAA,IAAiB,SAAU,KACjD,EAAKN,WAAWG,SAASK,EAAI,GAC7B,EAAKR,WAAWG,SAASM,EAAI,GAC7B,EAAKT,WAAWU,YAAa,EAC7B,EAAKT,MAAMM,IAAI,EAAKP,YAIpB,IAFA,IAAMW,EAAW,GAERC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAMJ,EAA4B,IAAvBK,KAAKC,SAAW,IACrBL,EAA4B,IAAvBI,KAAKC,SAAW,IACrBC,EAA4B,IAAvBF,KAAKC,SAAW,IAC3BH,EAASK,KAAKR,EAAGC,EAAGM,EACxB,CAgCA,IAAME,EAAW,IAAIX,EAAAA,IACrBW,EAASC,aAAa,WAAY,IAAIZ,EAAAA,IAA6BK,EAAU,IAC7E,IAAMQ,EAAW,IAAIb,EAAAA,IAAqB,CAAEc,MAAO,QAC7CC,EAAS,IAAIf,EAAAA,IAAaW,EAAUE,GAI7B,OAHblB,EAAMM,IAAIc,GAGV,EAAKC,QAAQ,CACjB,CAKC,OALA,8BACD,SAAcrB,GACV,IAAIsB,EAAS,IAAIjB,EAAAA,IACjBiB,EAAOC,cAAwB,KAAVX,KAAKY,IAC1BC,KAAK1B,WAAWG,SAASwB,aAAaJ,EAC1C,KAAC,EAvEgB,C,SAASK,c","sources":["PART_11_Web_Visualization_3D_for_GIS/LAB_Web_03_Point/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree, getCSVFromURL } from '../../lib';\r\n\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    pointLight: THREE.PointLight\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n        const scene = this.scene;\r\n\r\n        this.camera.position.set(0, 50, 50);\r\n\r\n        const ambientLight = new THREE.AmbientLight(0xcccccc, 0.25);\r\n        this.scene.add(ambientLight);\r\n\r\n        this.pointLight = new THREE.PointLight(0xffffff, 0.75);\r\n        this.pointLight.position.x = 10;\r\n        this.pointLight.position.y = 10;\r\n        this.pointLight.castShadow = true;\r\n        this.scene.add(this.pointLight);\r\n\r\n        const vertices = [];\r\n\r\n        for (let i = 0; i < 100; i++) {\r\n            const x = (Math.random() - 0.5) * 15;\r\n            const y = (Math.random() - 0.5) * 15;\r\n            const z = (Math.random() - 0.5) * 15;\r\n            vertices.push(x, y, z);\r\n        }\r\n\r\n        // for (let j = 0; j < 10; j++) {\r\n        //     for (let i = 0; i < 10; i++) {\r\n        //         const x = i;\r\n        //         const y = j;\r\n        //         const z = 0\r\n        //         vertices.push(x, z, y);\r\n        //     }\r\n        // }\r\n\r\n        // for (let j = 0; j < 30; j++) {\r\n        //     for (let i = 0; i < 30; i++) {\r\n        //         const x = i;\r\n        //         let y = j;\r\n        //         y = Math.sin(x * y * 0.02) * 5 + y;\r\n        //         vertices.push(x, y, y);\r\n        //     }\r\n        // }\r\n\r\n\r\n        // for (let k = 0; k < 10; k++) {\r\n        //     for (let j = 0; j < 10; j++) {\r\n        //         for (let i = 0; i < 10; i++) {\r\n        //             const x = i;\r\n        //             const y = j;\r\n        //             const z = k\r\n        //             vertices.push(x, z, y);\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\r\n        const material = new THREE.PointsMaterial({ color: 0x00fff0 });\r\n        const points = new THREE.Points(geometry, material);\r\n        scene.add(points);\r\n\r\n\r\n        this.start();\r\n    }\r\n    public update(scene: THREE.Scene) {\r\n        let matrix = new THREE.Matrix4();\r\n        matrix.makeRotationY(Math.PI * 0.011);\r\n        this.pointLight.position.applyMatrix4(matrix);\r\n    }\r\n}\r\n"],"names":["Solution","id","pointLight","scene","camera","position","set","ambientLight","THREE","add","x","y","castShadow","vertices","i","Math","random","z","push","geometry","setAttribute","material","color","points","start","matrix","makeRotationY","PI","this","applyMatrix4","RendererThree"],"sourceRoot":""}