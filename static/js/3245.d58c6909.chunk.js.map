{"version":3,"file":"static/js/3245.d58c6909.chunk.js","mappings":"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K,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,EAAK,IAAK,GAAK,GAAI,CAAC,IAAK,EAAK,IAAK,GAAK,GAAI,CAAC,IAAK,EAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,EAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,EAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,EAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,EAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,IAAK,IAAK,IAAK,GAAK,GACvE,CAAC,IAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,GAAK,GAAI,CAAC,EAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,EAAK,EAAK,IAAK,EAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,EAAK,IAAK,EAAK,EAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,EAAK,IAAK,GACvE,CAAC,EAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,EAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,EAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,EAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,EAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,EAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,EAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,EAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,EAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,EAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GACvE,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,EAAK,IAAK,GACvE,CAAC,IAAK,EAAK,IAAK,EAAK,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,CAAC,IAAK,EAAK,IAAK,IAAK,GAE/E,C","sources":["PART_06_Problem_Data_Model_Train_Validation/LAB_Web_06_IrisPrediction/index.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs'\r\nimport { RendererCanvas, Vector3, remap, } from '../../lib';\r\n\r\n\r\n// import { NVector3, MathUtility } from '../../../lib';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '600px';\r\n        div.style.height = '350px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class Renderer extends RendererCanvas {\r\n    tfModel: TFModel;\r\n    accList: number[] = []\r\n    lossList: number[] = []\r\n    constructor(divHost: HTMLDivElement) {\r\n        super(divHost);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.tfModel = new TFModel();\r\n\r\n        // !! you should execute it for rendering\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n        // this.tfModel.trainLoop();\r\n        // console.log(this.tfModel.hist);\r\n\r\n        let minX = 0\r\n        let maxX = this.canvas.width;\r\n        \r\n        let minY = Number.MAX_VALUE;\r\n        let maxY = Number.MIN_VALUE;\r\n        \r\n\r\n        for(let i = 0 ; i < this.tfModel.hist.length; ++i) {\r\n            let acc = this.tfModel.hist[i].acc;\r\n            let loss = this.tfModel.hist[i].loss;\r\n\r\n            if (minY > acc) minY = acc;\r\n            if (minY > loss) minY = loss;\r\n            \r\n            if (maxY < acc) maxY = acc;\r\n            if (maxY < loss) maxY = loss;\r\n\r\n            this.accList.push(acc);\r\n            this.lossList.push(loss);\r\n        }\r\n\r\n        if (this.accList.length > 1) {\r\n\r\n            for (let i = 0; i < this.accList.length; ++i) {\r\n                let acc = this.accList[i];\r\n                console.log(acc)\r\n\r\n\r\n                let projected_X_Acc = remap(i, 0, this.accList.length,  0, this.canvas.width);\r\n                let projected_Y_Acc = remap(acc, maxY, minY,  0, this.canvas.height);\r\n\r\n                if (i == 0) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(projected_X_Acc, projected_Y_Acc);\r\n                } else {\r\n                    ctx.lineTo(projected_X_Acc, projected_Y_Acc);\r\n                }\r\n\r\n            }\r\n            ctx.strokeStyle = '#0f0'\r\n            ctx.stroke();\r\n\r\n        }\r\n\r\n        console.log(this.lossList);\r\n\r\n        if (this.lossList.length > 1) {\r\n\r\n            for (let i = 0; i < this.lossList.length; ++i) {\r\n                let loss = this.lossList[i];\r\n                console.log(loss)\r\n\r\n                let projected_X_loss = remap(i, 0, this.lossList.length,  0, this.canvas.width);\r\n                let projected_Y_loss = remap(loss, minY, maxY,  0, this.canvas.height);\r\n\r\n                if (i === 0) {\r\n                    // ctx.beginPath();\r\n                    // ctx.moveTo(projected_X_loss, projected_Y_loss);\r\n                } else {\r\n                    // ctx.lineTo(projected_X_loss, projected_Y_loss);\r\n                    ctx.beginPath();\r\n                    ctx.arc(projected_X_loss, projected_Y_loss, 1, 0 ,3.14 *2);\r\n                    ctx.closePath();\r\n                    ctx.strokeStyle = '#f00'\r\n                    ctx.stroke();\r\n                }\r\n\r\n            }\r\n            ctx.strokeStyle = '#f00'\r\n            ctx.stroke();\r\n\r\n        }\r\n\r\n        \r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n}\r\n\r\n\r\nclass TFModel {\r\n    model: tf.Sequential;\r\n    inputsTensor: tf.Tensor<tf.Rank.R2>;\r\n    labelsTensor: tf.Tensor<tf.Rank.R2>;\r\n    hist: any = [];\r\n    isTraining = false;\r\n\r\n    // xTrain = tf.tensor2d([\r\n    //     [0.0, 0.0],\r\n    //     [1.0, 0.0],\r\n    //     [0.0, 1.0],\r\n    //     [1.0, 1.0]\r\n    // ]);\r\n    // yTrain = tf.tensor2d([\r\n    //     [0.0],\r\n    //     [1.0],\r\n    //     [1.0],\r\n    //     [0.0]\r\n    // ]);\r\n    constructor() {\r\n        const d = getIrisData();\r\n        tf.util.shuffle(d);\r\n\r\n\r\n        // console.log(d);\r\n\r\n        const inputs = [];\r\n        for (let i = 0; i < d.length; ++i) {\r\n            let row = [];\r\n            for (let j = 0; j < d[i].length - 1; ++j) {\r\n                row.push(d[i][j]);\r\n            }\r\n            inputs.push(row);\r\n        }\r\n\r\n        const labels = []; //  d.map((d: number[]) => [d[d.length - 1]]);\r\n        for (let i = 0; i < d.length; ++i) {\r\n            if (d[i][d[i].length - 1] === 0) {\r\n                labels.push([1, 0, 0]);\r\n            } else if (d[i][d[i].length - 1] === 1) {\r\n                labels.push([0, 1, 0]);\r\n            } else if (d[i][d[i].length - 1] === 2) {\r\n                labels.push([0, 0, 1]);\r\n            }\r\n\r\n        }\r\n\r\n        // console.log(inputs);\r\n        // console.log(labels);\r\n\r\n        // console.log('tensor......................');\r\n        this.inputsTensor = tf.tensor2d(inputs);\r\n        this.labelsTensor = tf.tensor2d(labels);\r\n        // console.log(this.inputsTensor);\r\n        // console.log(this.labelsTensor);\r\n        this.inputsTensor.print();\r\n        this.labelsTensor.print();\r\n\r\n        this.model = tf.sequential();\r\n\r\n        // console.log(this.inputsTensor.shape[1]);\r\n\r\n        const hidden = tf.layers.dense({\r\n            inputShape: [this.inputsTensor.shape[1]],\r\n            units: 10,\r\n            activation: 'sigmoid',\r\n        });\r\n        const output = tf.layers.dense({\r\n            // inputShape: [10],\r\n            units: 3,\r\n            activation: 'softmax',\r\n        });\r\n        this.model.add(hidden);\r\n        this.model.add(output);\r\n        this.model.compile({\r\n            optimizer: tf.train.adam(),\r\n            // loss: tf.losses.meanSquaredError,\r\n            // metrics: ['mse'],\r\n            loss: tf.losses.softmaxCrossEntropy,  // 'categoricalCrossentropy',\r\n            metrics: ['accuracy'],\r\n        });\r\n        this.model.summary();\r\n        // tfvis.show.modelSummary({ name: 'Model Summary' }, this.model);\r\n\r\n        this.isTraining = true;\r\n        this.trainLoop();\r\n    }\r\n    public async trainLoop() {\r\n        if (!this.isTraining) return;\r\n\r\n        // for saving the model\r\n        // await this.model.save('downloads://my-model');\r\n        // const saveResults = await this.model.save('localstorage://ml/my-model-1');\r\n        // console.log(saveResults);\r\n\r\n        this.train().then((result: any) => {\r\n            // console.log(result.history.loss[0]);\r\n            this.hist = result.history;\r\n            console.log(result.history)\r\n            setTimeout(() => this.trainLoop(), 1);\r\n        });\r\n    }\r\n    public async train() {\r\n        return await this.model.fit(this.inputsTensor, this.labelsTensor, {\r\n            // batchSize: 100,\r\n            epochs: 1,\r\n            shuffle: true,\r\n            validationData: [this.inputsTensor, this.labelsTensor],\r\n        });\r\n    }\r\n}\r\n\r\n\r\nconst getIrisData = () => {\r\n    return [\r\n        [5.1, 3.5, 1.4, 0.2, 0], [4.9, 3.0, 1.4, 0.2, 0], [4.7, 3.2, 1.3, 0.2, 0],\r\n        [4.6, 3.1, 1.5, 0.2, 0], [5.0, 3.6, 1.4, 0.2, 0], [5.4, 3.9, 1.7, 0.4, 0],\r\n        [4.6, 3.4, 1.4, 0.3, 0], [5.0, 3.4, 1.5, 0.2, 0], [4.4, 2.9, 1.4, 0.2, 0],\r\n        [4.9, 3.1, 1.5, 0.1, 0], [5.4, 3.7, 1.5, 0.2, 0], [4.8, 3.4, 1.6, 0.2, 0],\r\n        [4.8, 3.0, 1.4, 0.1, 0], [4.3, 3.0, 1.1, 0.1, 0], [5.8, 4.0, 1.2, 0.2, 0],\r\n        [5.7, 4.4, 1.5, 0.4, 0], [5.4, 3.9, 1.3, 0.4, 0], [5.1, 3.5, 1.4, 0.3, 0],\r\n        [5.7, 3.8, 1.7, 0.3, 0], [5.1, 3.8, 1.5, 0.3, 0], [5.4, 3.4, 1.7, 0.2, 0],\r\n        [5.1, 3.7, 1.5, 0.4, 0], [4.6, 3.6, 1.0, 0.2, 0], [5.1, 3.3, 1.7, 0.5, 0],\r\n        [4.8, 3.4, 1.9, 0.2, 0], [5.0, 3.0, 1.6, 0.2, 0], [5.0, 3.4, 1.6, 0.4, 0],\r\n        [5.2, 3.5, 1.5, 0.2, 0], [5.2, 3.4, 1.4, 0.2, 0], [4.7, 3.2, 1.6, 0.2, 0],\r\n        [4.8, 3.1, 1.6, 0.2, 0], [5.4, 3.4, 1.5, 0.4, 0], [5.2, 4.1, 1.5, 0.1, 0],\r\n        [5.5, 4.2, 1.4, 0.2, 0], [4.9, 3.1, 1.5, 0.1, 0], [5.0, 3.2, 1.2, 0.2, 0],\r\n        [5.5, 3.5, 1.3, 0.2, 0], [4.9, 3.1, 1.5, 0.1, 0], [4.4, 3.0, 1.3, 0.2, 0],\r\n        [5.1, 3.4, 1.5, 0.2, 0], [5.0, 3.5, 1.3, 0.3, 0], [4.5, 2.3, 1.3, 0.3, 0],\r\n        [4.4, 3.2, 1.3, 0.2, 0], [5.0, 3.5, 1.6, 0.6, 0], [5.1, 3.8, 1.9, 0.4, 0],\r\n        [4.8, 3.0, 1.4, 0.3, 0], [5.1, 3.8, 1.6, 0.2, 0], [4.6, 3.2, 1.4, 0.2, 0],\r\n        [5.3, 3.7, 1.5, 0.2, 0], [5.0, 3.3, 1.4, 0.2, 0], [7.0, 3.2, 4.7, 1.4, 1],\r\n        [6.4, 3.2, 4.5, 1.5, 1], [6.9, 3.1, 4.9, 1.5, 1], [5.5, 2.3, 4.0, 1.3, 1],\r\n        [6.5, 2.8, 4.6, 1.5, 1], [5.7, 2.8, 4.5, 1.3, 1], [6.3, 3.3, 4.7, 1.6, 1],\r\n        [4.9, 2.4, 3.3, 1.0, 1], [6.6, 2.9, 4.6, 1.3, 1], [5.2, 2.7, 3.9, 1.4, 1],\r\n        [5.0, 2.0, 3.5, 1.0, 1], [5.9, 3.0, 4.2, 1.5, 1], [6.0, 2.2, 4.0, 1.0, 1],\r\n        [6.1, 2.9, 4.7, 1.4, 1], [5.6, 2.9, 3.6, 1.3, 1], [6.7, 3.1, 4.4, 1.4, 1],\r\n        [5.6, 3.0, 4.5, 1.5, 1], [5.8, 2.7, 4.1, 1.0, 1], [6.2, 2.2, 4.5, 1.5, 1],\r\n        [5.6, 2.5, 3.9, 1.1, 1], [5.9, 3.2, 4.8, 1.8, 1], [6.1, 2.8, 4.0, 1.3, 1],\r\n        [6.3, 2.5, 4.9, 1.5, 1], [6.1, 2.8, 4.7, 1.2, 1], [6.4, 2.9, 4.3, 1.3, 1],\r\n        [6.6, 3.0, 4.4, 1.4, 1], [6.8, 2.8, 4.8, 1.4, 1], [6.7, 3.0, 5.0, 1.7, 1],\r\n        [6.0, 2.9, 4.5, 1.5, 1], [5.7, 2.6, 3.5, 1.0, 1], [5.5, 2.4, 3.8, 1.1, 1],\r\n        [5.5, 2.4, 3.7, 1.0, 1], [5.8, 2.7, 3.9, 1.2, 1], [6.0, 2.7, 5.1, 1.6, 1],\r\n        [5.4, 3.0, 4.5, 1.5, 1], [6.0, 3.4, 4.5, 1.6, 1], [6.7, 3.1, 4.7, 1.5, 1],\r\n        [6.3, 2.3, 4.4, 1.3, 1], [5.6, 3.0, 4.1, 1.3, 1], [5.5, 2.5, 4.0, 1.3, 1],\r\n        [5.5, 2.6, 4.4, 1.2, 1], [6.1, 3.0, 4.6, 1.4, 1], [5.8, 2.6, 4.0, 1.2, 1],\r\n        [5.0, 2.3, 3.3, 1.0, 1], [5.6, 2.7, 4.2, 1.3, 1], [5.7, 3.0, 4.2, 1.2, 1],\r\n        [5.7, 2.9, 4.2, 1.3, 1], [6.2, 2.9, 4.3, 1.3, 1], [5.1, 2.5, 3.0, 1.1, 1],\r\n        [5.7, 2.8, 4.1, 1.3, 1], [6.3, 3.3, 6.0, 2.5, 2], [5.8, 2.7, 5.1, 1.9, 2],\r\n        [7.1, 3.0, 5.9, 2.1, 2], [6.3, 2.9, 5.6, 1.8, 2], [6.5, 3.0, 5.8, 2.2, 2],\r\n        [7.6, 3.0, 6.6, 2.1, 2], [4.9, 2.5, 4.5, 1.7, 2], [7.3, 2.9, 6.3, 1.8, 2],\r\n        [6.7, 2.5, 5.8, 1.8, 2], [7.2, 3.6, 6.1, 2.5, 2], [6.5, 3.2, 5.1, 2.0, 2],\r\n        [6.4, 2.7, 5.3, 1.9, 2], [6.8, 3.0, 5.5, 2.1, 2], [5.7, 2.5, 5.0, 2.0, 2],\r\n        [5.8, 2.8, 5.1, 2.4, 2], [6.4, 3.2, 5.3, 2.3, 2], [6.5, 3.0, 5.5, 1.8, 2],\r\n        [7.7, 3.8, 6.7, 2.2, 2], [7.7, 2.6, 6.9, 2.3, 2], [6.0, 2.2, 5.0, 1.5, 2],\r\n        [6.9, 3.2, 5.7, 2.3, 2], [5.6, 2.8, 4.9, 2.0, 2], [7.7, 2.8, 6.7, 2.0, 2],\r\n        [6.3, 2.7, 4.9, 1.8, 2], [6.7, 3.3, 5.7, 2.1, 2], [7.2, 3.2, 6.0, 1.8, 2],\r\n        [6.2, 2.8, 4.8, 1.8, 2], [6.1, 3.0, 4.9, 1.8, 2], [6.4, 2.8, 5.6, 2.1, 2],\r\n        [7.2, 3.0, 5.8, 1.6, 2], [7.4, 2.8, 6.1, 1.9, 2], [7.9, 3.8, 6.4, 2.0, 2],\r\n        [6.4, 2.8, 5.6, 2.2, 2], [6.3, 2.8, 5.1, 1.5, 2], [6.1, 2.6, 5.6, 1.4, 2],\r\n        [7.7, 3.0, 6.1, 2.3, 2], [6.3, 3.4, 5.6, 2.4, 2], [6.4, 3.1, 5.5, 1.8, 2],\r\n        [6.0, 3.0, 4.8, 1.8, 2], [6.9, 3.1, 5.4, 2.1, 2], [6.7, 3.1, 5.6, 2.4, 2],\r\n        [6.9, 3.1, 5.1, 2.3, 2], [5.8, 2.7, 5.1, 1.9, 2], [6.8, 3.2, 5.9, 2.3, 2],\r\n        [6.7, 3.3, 5.7, 2.5, 2], [6.7, 3.0, 5.2, 2.3, 2], [6.3, 2.5, 5.0, 1.9, 2],\r\n        [6.5, 3.0, 5.2, 2.0, 2], [6.2, 3.4, 5.4, 2.3, 2], [5.9, 3.0, 5.1, 1.8, 2],\r\n    ];\r\n};"],"names":["Solution","id","divHost","renderer","this","document","getElementById","style","display","alignItems","div","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","destroy","lastElementChild","removeChild","tfModel","accList","lossList","TFModel","start","ctx","canvas","minY","Number","MAX_VALUE","maxY","MIN_VALUE","i","hist","length","acc","loss","push","console","log","projected_X_Acc","remap","projected_Y_Acc","beginPath","moveTo","lineTo","strokeStyle","stroke","projected_X_loss","projected_Y_loss","arc","closePath","RendererCanvas","model","inputsTensor","labelsTensor","isTraining","d","getIrisData","tf","inputs","row","j","labels","print","hidden","inputShape","shape","units","activation","output","add","compile","optimizer","metrics","summary","trainLoop","train","then","result","history","setTimeout","fit","epochs","shuffle","validationData"],"sourceRoot":""}