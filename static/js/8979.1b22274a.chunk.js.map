{"version":3,"file":"static/js/8979.1b22274a.chunk.js","mappings":"qQAAaA,EAAQ,WACjB,WAAYC,IAAY,eACpBC,QAAQC,IAAI,kEACZD,QAAQC,IAAI,oCACZD,QAAQC,IAAI,qCAaZ,IAFA,IAAIC,EAAgB,GAEXC,EAAI,EAAGA,EAAI,IAAKA,EACrBD,EAAME,KAAK,IAAIC,EAAKF,IAGxBD,EAAM,GAAGE,KAAKF,EAAM,IACpBA,EAAM,GAAGE,KAAKF,EAAM,IAEpBA,EAAM,GAAGE,KAAKF,EAAM,IACpBA,EAAM,GAAGE,KAAKF,EAAM,IAEpBA,EAAM,GAAGE,KAAKF,EAAM,IACpBA,EAAM,GAAGE,KAAKF,EAAM,IAKpB,IAAII,EAAM,EACNC,EAAe,IACP,SAACL,GACT,IAAIM,EAAgB,GAMpB,IALAN,EAAM,GAAGO,OAAQ,EAEjBD,EAAMJ,KAAKF,EAAM,IACjBK,EAAaH,KAAKF,EAAM,IAEjBM,EAAME,OAAS,GAAG,CAGrB,IAFA,IAAIC,EAAUH,EAAMI,QAEXT,EAAI,EAAGA,EAAIQ,EAAQE,WAAWH,SAAUP,EAAG,CAChD,IAAIW,EAAQH,EAAQE,WAAWV,GAC1BW,EAAML,QACPK,EAAML,OAAQ,EACdF,EAAaH,KAAKU,GAClBN,EAAMJ,KAAKU,GAEnB,CACA,GAAIR,IAAQ,IAAiC,YAA1BN,QAAQC,IAAI,YACnC,CAEJ,CACAc,CAAIb,GACJF,QAAQC,IAAI,OAAQM,GACpBP,QAAQC,IAAI,QAIZC,EAAQ,GACR,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,EACrBD,EAAME,KAAK,IAAIC,EAAKF,IAGxBD,EAAM,GAAGE,KAAKF,EAAM,IACpBA,EAAM,GAAGE,KAAKF,EAAM,IAEpBA,EAAM,GAAGE,KAAKF,EAAM,IACpBA,EAAM,GAAGE,KAAKF,EAAM,IAEpBA,EAAM,GAAGE,KAAKF,EAAM,IACpBA,EAAM,GAAGE,KAAKF,EAAM,IAEpB,IAAIc,EAAe,IACP,SAANC,EAAOC,GACT,IAAIA,EAAKT,MAAT,CACAS,EAAKT,OAAQ,EACbO,EAAaZ,KAAKc,GAClB,IAAK,IAAIf,EAAI,EAAGA,EAAIe,EAAKL,WAAWH,SAAUP,EAC1Cc,EAAIC,EAAKL,WAAWV,GAJE,CAM9B,CAEAc,CAAIf,EAAM,IACVF,QAAQC,IAAI,OAAQe,GACpBhB,QAAQC,IAAI,OAGhB,CAGC,OAHA,+BACD,WAEA,KAAC,EA/FgB,GAkGfI,EAAI,WAIN,WAAYc,IAAa,oBAHlBV,OAAiB,EAAM,KACvBU,IAAc,EAAE,KAChBN,WAAqB,GAExBO,KAAKD,GAAKA,CACd,CAIC,OAJA,4BACD,SAAYL,GACRM,KAAKP,WAAWT,KAAKU,GACrBA,EAAMD,WAAWT,KAAKgB,KAC1B,KAAC,EAVK,E","sources":["PART_04_Geometry_Data/LAB_Web_08_Graph/index.ts"],"sourcesContent":["export class Solution {\r\n    constructor(view: any) {\r\n        console.log(\"Let's learn Typescript for digital mapping and visualization!!\");\r\n        console.log(\"Typescript, Graph data Structure\");\r\n        console.log(\"=================================\");\r\n        // Codepan\r\n        // Typescript: https://codepen.io/NJStudio/details/RwWxGXo\r\n        // Javascript: https://codepen.io/NJStudio/details/bGdozYY\r\n\r\n        //           N0\r\n        //          /  \\\r\n        //        N1    N2\r\n        //        /\\    /\\\r\n        //      N3 N4  N5 N6\r\n\r\n        let nodes: Node[] = [];\r\n\r\n        for (let i = 0; i < 7; ++i) {\r\n            nodes.push(new Node(i))\r\n        }\r\n\r\n        nodes[0].push(nodes[1]);\r\n        nodes[0].push(nodes[2]);\r\n\r\n        nodes[1].push(nodes[3]);\r\n        nodes[1].push(nodes[4]);\r\n\r\n        nodes[2].push(nodes[5]);\r\n        nodes[2].push(nodes[6]);\r\n\r\n        // nodes[3].push(nodes[6]);\r\n\r\n        // ........................................... BFS\r\n        let num = 0;\r\n        let outSortedBFS = []\r\n        const bfs = (nodes: Node[]) => {\r\n            let queue: Node[] = [];\r\n            nodes[0].visit = true;\r\n\r\n            queue.push(nodes[0])\r\n            outSortedBFS.push(nodes[0])\r\n\r\n            while (queue.length > 0) {\r\n                let current = queue.shift();\r\n\r\n                for (let i = 0; i < current.connection.length; ++i) {\r\n                    let other = current.connection[i];\r\n                    if (!other.visit) {\r\n                        other.visit = true;\r\n                        outSortedBFS.push(other);\r\n                        queue.push(other);\r\n                    }\r\n                }\r\n                if (num++ > 100) { console.log('safeguard'); return; }\r\n            }\r\n            return outSortedBFS;\r\n        }\r\n        bfs(nodes);\r\n        console.log(\"BFS!\", outSortedBFS)\r\n        console.log('done');\r\n\r\n        // ........................................... DFS\r\n\r\n        nodes = [];\r\n        for (let i = 0; i < 7; ++i) {\r\n            nodes.push(new Node(i))\r\n        }\r\n\r\n        nodes[0].push(nodes[1]);\r\n        nodes[0].push(nodes[2]);\r\n\r\n        nodes[1].push(nodes[3]);\r\n        nodes[1].push(nodes[4]);\r\n\r\n        nodes[2].push(nodes[5]);\r\n        nodes[2].push(nodes[6]);\r\n        \r\n        let outSortedDFS = []\r\n        const dfs = (node: Node) => {\r\n            if (node.visit) { return; }\r\n            node.visit = true;\r\n            outSortedDFS.push(node);\r\n            for (let i = 0; i < node.connection.length; ++i) {\r\n                dfs(node.connection[i])\r\n            }\r\n        }\r\n\r\n        dfs(nodes[0]);\r\n        console.log(\"DFS!\", outSortedDFS)\r\n        console.log('done');\r\n\r\n\r\n    }\r\n    public destroy() {\r\n\r\n    }\r\n}\r\n\r\nclass Node {\r\n    public visit: boolean = false;\r\n    public id: number = -1;\r\n    public connection: Node[] = [];\r\n    constructor(id: number) {\r\n        this.id = id;\r\n    }\r\n    public push(other: Node) {\r\n        this.connection.push(other);\r\n        other.connection.push(this);\r\n    }\r\n}"],"names":["Solution","view","console","log","nodes","i","push","Node","num","outSortedBFS","queue","visit","length","current","shift","connection","other","bfs","outSortedDFS","dfs","node","id","this"],"sourceRoot":""}